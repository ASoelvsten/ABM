/* Generated by Cython 0.29.22 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/home/andreas/.local/lib/python3.6/site-packages/numpy/core/include/numpy/arrayobject.h",
            "/home/andreas/.local/lib/python3.6/site-packages/numpy/core/include/numpy/ufuncobject.h"
        ],
        "extra_compile_args": [
            "-O3"
        ],
        "include_dirs": [
            "/home/andreas/.local/lib/python3.6/site-packages/numpy/core/include"
        ],
        "language": "c++",
        "libraries": [
            "m"
        ],
        "name": "GBM",
        "sources": [
            "GBM.pyx"
        ]
    },
    "module_name": "GBM"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_22"
#define CYTHON_HEX_VERSION 0x001D16F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__GBM
#define __PYX_HAVE_API__GBM
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <stdlib.h>
#include <math.h>
#include "stdlib.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "GBM.pyx",
  "__init__.pxd",
  "type.pxd",
};

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":689
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":690
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":691
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":696
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":697
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":698
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":703
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":704
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":713
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":714
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":715
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":717
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":718
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":719
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":721
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":722
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":724
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":725
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":726
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_3GBM___pyx_scope_struct__ext_grid;
struct __pyx_obj_3GBM___pyx_scope_struct_1_genexpr;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":728
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":729
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":730
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":732
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "GBM.pyx":158
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def ext_grid(int gsize, np.ndarray points, np.ndarray Alive, np.ndarray index, np.ndarray Rim, tree, np.ndarray phs, list Discarded, np.ndarray Cell_pop, np.ndarray Dead, np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, double trapped):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i, newcomers
 */
struct __pyx_obj_3GBM___pyx_scope_struct__ext_grid {
  PyObject_HEAD
  PyArrayObject *__pyx_v_newpoints;
};


/* "GBM.pyx":184
 *     # Select only unique points in newpoints
 * 
 *     uni = list(set(tuple(x) for x in newpoints))             # <<<<<<<<<<<<<<
 * 
 *     cdef usize = len(uni)
 */
struct __pyx_obj_3GBM___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_3GBM___pyx_scope_struct__ext_grid *__pyx_outer_scope;
  PyObject *__pyx_v_x;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* DelItemInt.proto */
#define __Pyx_DelItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_DelItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_DelItem_Generic(o, to_py_func(i))))
static int __Pyx_DelItem_Generic(PyObject *o, PyObject *j);
static CYTHON_INLINE int __Pyx_DelItemInt_Fast(PyObject *o, Py_ssize_t i,
                                               int is_list, int wraparound);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_AddObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_AddObjC(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* py_abs.proto */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *num);
#define __Pyx_PyNumber_Absolute(x)\
    ((likely(PyLong_CheckExact(x))) ?\
         (likely(Py_SIZE(x) >= 0) ? (Py_INCREF(x), (x)) : __Pyx_PyLong_AbsNeg(x)) :\
         PyNumber_Absolute(x))
#else
#define __Pyx_PyNumber_Absolute(x)  PyNumber_Absolute(x)
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_EqObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_EqObjC(op1, op2, floatval, inplace, zerodivision_check)\
    (PyObject_RichCompare(op1, op2, Py_EQ))
    #endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_SubtractObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_SubtractObjC(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char);

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
static CYTHON_INLINE long __Pyx_pow_long(long, long);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cython' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'GBM' */
static PyTypeObject *__pyx_ptype_3GBM___pyx_scope_struct__ext_grid = 0;
static PyTypeObject *__pyx_ptype_3GBM___pyx_scope_struct_1_genexpr = 0;
static PyArrayObject *__pyx_f_3GBM_interLN(PyObject *, PyArrayObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/
#define __Pyx_MODULE_NAME "GBM"
extern int __pyx_module_is_main_GBM;
int __pyx_module_is_main_GBM = 0;

/* Implementation of 'GBM' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_sorted;
static PyObject *__pyx_builtin_map;
static PyObject *__pyx_builtin_round;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_all;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_X[] = "X";
static const char __pyx_k_Y[] = "Y";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_c[] = "c_";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k.";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_t[] = "$t$";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_Xs[] = "Xs";
static const char __pyx_k_Ys[] = "Ys";
static const char __pyx_k_dt[] = "dt";
static const char __pyx_k_dx[] = "dx";
static const char __pyx_k_dy[] = "dy";
static const char __pyx_k_eq[] = "eq";
static const char __pyx_k_ff[] = "ff";
static const char __pyx_k_h5[] = ".h5";
static const char __pyx_k_hf[] = "hf";
static const char __pyx_k_lx[] = "lx";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_nx[] = "nx";
static const char __pyx_k_ny[] = "ny";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_pl[] = "pl";
static const char __pyx_k_sx[] = "sx";
static const char __pyx_k_sy[] = "sy";
static const char __pyx_k_xx[] = "xx";
static const char __pyx_k_05d[] = "%05d";
static const char __pyx_k_DIV[] = "DIV";
static const char __pyx_k_Dox[] = "Dox";
static const char __pyx_k_Dup[] = "Dup";
static const char __pyx_k_GBM[] = "GBM";
static const char __pyx_k_GDS[] = "GDS";
static const char __pyx_k_GPP[] = "GPP";
static const char __pyx_k_GSC[] = "GSC";
static const char __pyx_k_Pup[] = "Pup";
static const char __pyx_k_Qup[] = "Qup";
static const char __pyx_k_Rim[] = "Rim";
static const char __pyx_k__23[] = "/";
static const char __pyx_k__26[] = ".";
static const char __pyx_k__29[] = " --- ";
static const char __pyx_k__30[] = "--";
static const char __pyx_k__31[] = "-.";
static const char __pyx_k__32[] = "-";
static const char __pyx_k__38[] = "*";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_any[] = "any";
static const char __pyx_k_c_2[] = "c";
static const char __pyx_k_clf[] = "clf";
static const char __pyx_k_cwd[] = "cwd";
static const char __pyx_k_gcf[] = "gcf";
static const char __pyx_k_k_2[] = "k";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_low[] = "low";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_mod[] = "mod";
static const char __pyx_k_new[] = "new";
static const char __pyx_k_phs[] = "phs";
static const char __pyx_k_plt[] = "plt";
static const char __pyx_k_png[] = ".png";
static const char __pyx_k_r_2[] = "r.";
static const char __pyx_k_res[] = "res";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_tri[] = "tri";
static const char __pyx_k_uni[] = "uni";
static const char __pyx_k_var[] = "var";
static const char __pyx_k_y_2[] = "y.";
static const char __pyx_k_Cell[] = "Cell";
static const char __pyx_k_Data[] = "/Data_";
static const char __pyx_k_Dead[] = "Dead";
static const char __pyx_k_File[] = "File";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_PDiv[] = "PDiv";
static const char __pyx_k_Pdie[] = "Pdie";
static const char __pyx_k_SavN[] = "SavN";
static const char __pyx_k_Xs_r[] = "Xs_r";
static const char __pyx_k_Ys_r[] = "Ys_r";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_axis[] = "axis";
static const char __pyx_k_blue[] = "blue";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_fipy[] = "fipy";
static const char __pyx_k_free[] = "free";
static const char __pyx_k_h5py[] = "h5py";
static const char __pyx_k_iden[] = "iden";
static const char __pyx_k_in1d[] = "in1d";
static const char __pyx_k_left[] = "left";
static const char __pyx_k_llen[] = "llen";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mask[] = "mask";
static const char __pyx_k_mesh[] = "mesh";
static const char __pyx_k_move[] = "move";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ones[] = "ones";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_plot[] = "plot";
static const char __pyx_k_resx[] = "resx";
static const char __pyx_k_resy[] = "resy";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_tree[] = "tree";
static const char __pyx_k_Alive[] = "Alive";
static const char __pyx_k_Input[] = "Input";
static const char __pyx_k_Pdivi[] = "Pdivi";
static const char __pyx_k_Pmove[] = "Pmove";
static const char __pyx_k_Pprol[] = "Pprol";
static const char __pyx_k_Xs_rh[] = "Xs_rh";
static const char __pyx_k_Xs_rl[] = "Xs_rl";
static const char __pyx_k_Ys_rh[] = "Ys_rh";
static const char __pyx_k_Ys_rl[] = "Ys_rl";
static const char __pyx_k_a_tot[] = "a_tot";
static const char __pyx_k_alpha[] = "alpha";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_asize[] = "asize";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_coeff[] = "coeff";
static const char __pyx_k_color[] = "color";
static const char __pyx_k_csize[] = "csize";
static const char __pyx_k_dsize[] = "dsize";
static const char __pyx_k_exten[] = "exten";
static const char __pyx_k_gsize[] = "gsize";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_isnan[] = "isnan";
static const char __pyx_k_label[] = "label";
static const char __pyx_k_neigh[] = "neigh";
static const char __pyx_k_nsize[] = "nsize";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_point[] = "point";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_query[] = "query";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_ravel[] = "ravel";
static const char __pyx_k_round[] = "round";
static const char __pyx_k_solve[] = "solve";
static const char __pyx_k_steps[] = "steps";
static const char __pyx_k_store[] = "store";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_tight[] = "tight";
static const char __pyx_k_upper[] = "upper";
static const char __pyx_k_usize[] = "usize";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_where[] = "where";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_x_new[] = "x_new";
static const char __pyx_k_y_new[] = "y_new";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_Grid2D[] = "Grid2D";
static const char __pyx_k_Ox_irr[] = "Ox_irr";
static const char __pyx_k_Oxygen[] = "Oxygen";
static const char __pyx_k_PDeath[] = "PDeath";
static const char __pyx_k_Points[] = "Points";
static const char __pyx_k_Reaper[] = "Reaper";
static const char __pyx_k_Viewer[] = "Viewer";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_arange[] = "arange";
static const char __pyx_k_argmin[] = "argmin";
static const char __pyx_k_bottom[] = "bottom";
static const char __pyx_k_dashes[] = "dashes";
static const char __pyx_k_delete[] = "delete";
static const char __pyx_k_divide[] = "divide";
static const char __pyx_k_figure[] = "figure";
static const char __pyx_k_getcwd[] = "getcwd";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_indptr[] = "indptr";
static const char __pyx_k_invert[] = "invert";
static const char __pyx_k_isfile[] = "isfile";
static const char __pyx_k_kdtree[] = "kdtree";
static const char __pyx_k_legend[] = "legend";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_orange[] = "orange";
static const char __pyx_k_oxygen[] = "oxygen";
static const char __pyx_k_points[] = "points";
static const char __pyx_k_random[] = "random";
static const char __pyx_k_sorted[] = "sorted";
static const char __pyx_k_stocev[] = "stocev";
static const char __pyx_k_tstart[] = "tstart";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_xlabel[] = "xlabel";
static const char __pyx_k_xticks[] = "xticks";
static const char __pyx_k_ylabel[] = "ylabel";
static const char __pyx_k_yticks[] = "yticks";
static const char __pyx_k_GBM_pyx[] = "GBM.pyx";
static const char __pyx_k_GDS_PDE[] = "GDS_PDE";
static const char __pyx_k_GDS_tot[] = "GDS_tot";
static const char __pyx_k_GPP_PDE[] = "GPP_PDE";
static const char __pyx_k_GPP_tot[] = "GPP_tot";
static const char __pyx_k_GSC_PDE[] = "GSC_PDE";
static const char __pyx_k_GSC_tot[] = "GSC_tot";
static const char __pyx_k_O2_crit[] = "O2_crit";
static const char __pyx_k_Restart[] = "Restart";
static const char __pyx_k_asarray[] = "asarray";
static const char __pyx_k_cKDTree[] = "cKDTree";
static const char __pyx_k_cluster[] = "cluster";
static const char __pyx_k_epsilon[] = "epsilon";
static const char __pyx_k_evolves[] = " evolves. ";
static const char __pyx_k_fdummy1[] = "fdummy1";
static const char __pyx_k_fdummy2[] = "fdummy2";
static const char __pyx_k_fdummy3[] = "fdummy3";
static const char __pyx_k_figsize[] = "figsize";
static const char __pyx_k_flatten[] = "flatten";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_idummy1[] = "idummy1";
static const char __pyx_k_idummy2[] = "idummy2";
static const char __pyx_k_idummy3[] = "idummy3";
static const char __pyx_k_idummy4[] = "idummy4";
static const char __pyx_k_idummy5[] = "idummy5";
static const char __pyx_k_indices[] = "indices";
static const char __pyx_k_lambdaC[] = "lambdaC";
static const char __pyx_k_logfile[] = "logfile";
static const char __pyx_k_myplots[] = "myplots";
static const char __pyx_k_progeny[] = "progeny";
static const char __pyx_k_qui_GDS[] = "qui_GDS";
static const char __pyx_k_qui_GPP[] = "qui_GPP";
static const char __pyx_k_qui_GSC[] = "qui_GSC";
static const char __pyx_k_reshape[] = "reshape";
static const char __pyx_k_reverse[] = "reverse";
static const char __pyx_k_run_ABM[] = "run_ABM";
static const char __pyx_k_savefig[] = "savefig";
static const char __pyx_k_seconds[] = " seconds ---";
static const char __pyx_k_trapped[] = "trapped";
static const char __pyx_k_triplot[] = "triplot";
static const char __pyx_k_uniform[] = "uniform";
static const char __pyx_k_Cell_pop[] = "Cell_pop";
static const char __pyx_k_Dead_tot[] = "Dead_tot";
static const char __pyx_k_Delaunay[] = "Delaunay";
static const char __pyx_k_Snapshot[] = "/Snapshot_";
static const char __pyx_k_daughter[] = "daughter";
static const char __pyx_k_dist_GDS[] = "dist_GDS";
static const char __pyx_k_dist_GPP[] = "dist_GPP";
static const char __pyx_k_dist_GSC[] = "dist_GSC";
static const char __pyx_k_ext_grid[] = "ext_grid";
static const char __pyx_k_fontsize[] = "fontsize";
static const char __pyx_k_meshgrid[] = "meshgrid";
static const char __pyx_k_semilogy[] = "semilogy";
static const char __pyx_k_setValue[] = "setValue";
static const char __pyx_k_Count_GDS[] = "Count_GDS";
static const char __pyx_k_Count_GPP[] = "Count_GPP";
static const char __pyx_k_Count_GSC[] = "Count_GSC";
static const char __pyx_k_Discarded[] = "Discarded";
static const char __pyx_k_Quiescent[] = "Quiescent";
static const char __pyx_k_Time_step[] = "Time-step: ";
static const char __pyx_k_cellcount[] = "cellcount";
static const char __pyx_k_daughters[] = "daughters";
static const char __pyx_k_deadcount[] = "deadcount";
static const char __pyx_k_hierarchy[] = "hierarchy";
static const char __pyx_k_linestyle[] = "linestyle";
static const char __pyx_k_newcomers[] = "newcomers";
static const char __pyx_k_newpoints[] = "newpoints";
static const char __pyx_k_simplices[] = "simplices";
static const char __pyx_k_alivecount[] = "alivecount";
static const char __pyx_k_conditions[] = "conditions";
static const char __pyx_k_mathrm_GDS[] = "$\\mathrm{GDS}$";
static const char __pyx_k_mathrm_GPP[] = "$\\mathrm{GPP}$";
static const char __pyx_k_mathrm_GSC[] = "$\\mathrm{GSC}$";
static const char __pyx_k_neighbours[] = "neighbours";
static const char __pyx_k_nsize_trap[] = "nsize_trap";
static const char __pyx_k_params_log[] = "/params.log";
static const char __pyx_k_paramsfile[] = "paramsfile";
static const char __pyx_k_points_low[] = "points_low";
static const char __pyx_k_region_GDS[] = "region_GDS";
static const char __pyx_k_region_GPP[] = "region_GPP";
static const char __pyx_k_region_GSC[] = "region_GSC";
static const char __pyx_k_start_time[] = "start_time";
static const char __pyx_k_time_label[] = "time_label";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_bbox_inches[] = "bbox_inches";
static const char __pyx_k_concatenate[] = "concatenate";
static const char __pyx_k_history_log[] = "/history.log";
static const char __pyx_k_init_oxygen[] = "init_oxygen";
static const char __pyx_k_logical_and[] = "logical_and";
static const char __pyx_k_mathrm_Dead[] = "$\\mathrm{Dead}$";
static const char __pyx_k_nsize_alive[] = "nsize_alive";
static const char __pyx_k_nsize_ndead[] = "nsize_ndead";
static const char __pyx_k_points_high[] = "points_high";
static const char __pyx_k_Alive_single[] = "Alive_single";
static const char __pyx_k_Blood_vessel[] = "Blood_vessel";
static const char __pyx_k_CellVariable[] = "CellVariable";
static const char __pyx_k_Dead_cluster[] = "Dead_cluster";
static const char __pyx_k_mathrm_Alive[] = "$\\mathrm{Alive}$";
static const char __pyx_k_solve_oxygen[] = "solve_oxygen";
static const char __pyx_k_DiffusionTerm[] = "DiffusionTerm";
static const char __pyx_k_Proliferating[] = "Proliferating";
static const char __pyx_k_TransientTerm[] = "TransientTerm";
static const char __pyx_k_init_Cell_pop[] = "init_Cell_pop";
static const char __pyx_k_read_snapshot[] = "read_snapshot";
static const char __pyx_k_scipy_spatial[] = "scipy.spatial";
static const char __pyx_k_GDS_population[] = "GDS_population";
static const char __pyx_k_GPP_population[] = "GPP_population";
static const char __pyx_k_GSC_population[] = "GSC_population";
static const char __pyx_k_create_dataset[] = "create_dataset";
static const char __pyx_k_i_2E_i_i_i_i_i[] = "%i %.2E %i %i %i %i %i \n";
static const char __pyx_k_more_itertools[] = "more_itertools";
static const char __pyx_k_voronoi_kdtree[] = "voronoi_kdtree";
static const char __pyx_k_write_snapshot[] = "write_snapshot";
static const char __pyx_k_Cell_population[] = "Cell_population";
static const char __pyx_k_Dead_population[] = "Dead_population";
static const char __pyx_k_Discarded_array[] = "Discarded_array";
static const char __pyx_k_Distance_to_rim[] = "Distance_to_rim";
static const char __pyx_k_dead_neighbours[] = "dead_neighbours";
static const char __pyx_k_subplots_adjust[] = "subplots_adjust";
static const char __pyx_k_Alive_population[] = "Alive_population";
static const char __pyx_k_Discarded_points[] = "Discarded_points";
static const char __pyx_k_mathrm_Alive_Rim[] = "$\\mathrm{Alive, \\, Rim}$";
static const char __pyx_k_query_ball_point[] = "query_ball_point";
static const char __pyx_k_timeStepDuration[] = "timeStepDuration";
static const char __pyx_k_matplotlib_pyplot[] = "matplotlib.pyplot";
static const char __pyx_k_scipy_interpolate[] = "scipy.interpolate";
static const char __pyx_k_Cell_population_of[] = "Cell population of ";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_mathrm_Cell_number[] = "$\\mathrm{Cell \\, number}$";
static const char __pyx_k_LinearNDInterpolator[] = "LinearNDInterpolator";
static const char __pyx_k_Summary_file_for_ABM[] = "# Summary file for ABM. \n";
static const char __pyx_k_NearestNDInterpolator[] = "NearestNDInterpolator";
static const char __pyx_k_run_ABM_locals_lambda[] = "run_ABM.<locals>.<lambda>";
static const char __pyx_k_Grid_creation_s_seconds[] = "Grid creation: --- %s seconds ---";
static const char __pyx_k_Population_overview_png[] = "/Population_overview.png";
static const char __pyx_k_ext_grid_locals_genexpr[] = "ext_grid.<locals>.genexpr";
static const char __pyx_k_vertex_neighbor_vertices[] = "vertex_neighbor_vertices";
static const char __pyx_k_are_dead_Total_population[] = " are dead. Total population: ";
static const char __pyx_k_mathrm_x_lattice_position[] = "$\\mathrm{x\\, lattice \\, position}$";
static const char __pyx_k_mathrm_y_lattice_position[] = "$\\mathrm{y\\, lattice \\, position}$";
static const char __pyx_k_Time_step_runtime_GSC_GPP_GDS_D[] = "# Time-step, runtime, GSC, GPP, GDS, Dead, Single cells \n";
static const char __pyx_k_are_modelled_individually_In_ad[] = " are modelled individually. In addition, ";
static const char __pyx_k_i_i_i_i_9E_9E_9E_i_i_9E_i_9E_9E[] = "%i %i %i %i %.9E %.9E %.9E %i %i %.9E %i %.9E %.9E %.9E %.9E %.2E %.2E \n";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_resx_resy_steps_SavN_Dox_lambda[] = "# resx, resy, steps, SavN, Dox, lambdaC, O2_crit, low, Dup, trapped, Qup, epsilon, Pdie, Pprol, Pdivi, dx, dy \n";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static PyObject *__pyx_kp_u_05d;
static PyObject *__pyx_n_s_Alive;
static PyObject *__pyx_n_u_Alive_population;
static PyObject *__pyx_n_s_Alive_single;
static PyObject *__pyx_n_s_Blood_vessel;
static PyObject *__pyx_n_s_Cell;
static PyObject *__pyx_n_s_CellVariable;
static PyObject *__pyx_n_s_Cell_pop;
static PyObject *__pyx_n_u_Cell_population;
static PyObject *__pyx_kp_u_Cell_population_of;
static PyObject *__pyx_n_s_Count_GDS;
static PyObject *__pyx_n_s_Count_GPP;
static PyObject *__pyx_n_s_Count_GSC;
static PyObject *__pyx_n_s_DIV;
static PyObject *__pyx_kp_u_Data;
static PyObject *__pyx_n_s_Dead;
static PyObject *__pyx_n_s_Dead_cluster;
static PyObject *__pyx_n_u_Dead_population;
static PyObject *__pyx_n_s_Dead_tot;
static PyObject *__pyx_n_s_Delaunay;
static PyObject *__pyx_n_s_DiffusionTerm;
static PyObject *__pyx_n_s_Discarded;
static PyObject *__pyx_n_s_Discarded_array;
static PyObject *__pyx_n_u_Discarded_points;
static PyObject *__pyx_n_u_Distance_to_rim;
static PyObject *__pyx_n_s_Dox;
static PyObject *__pyx_n_s_Dup;
static PyObject *__pyx_n_s_File;
static PyObject *__pyx_n_s_GBM;
static PyObject *__pyx_kp_s_GBM_pyx;
static PyObject *__pyx_n_s_GDS;
static PyObject *__pyx_n_s_GDS_PDE;
static PyObject *__pyx_n_u_GDS_population;
static PyObject *__pyx_n_s_GDS_tot;
static PyObject *__pyx_n_s_GPP;
static PyObject *__pyx_n_s_GPP_PDE;
static PyObject *__pyx_n_u_GPP_population;
static PyObject *__pyx_n_s_GPP_tot;
static PyObject *__pyx_n_s_GSC;
static PyObject *__pyx_n_s_GSC_PDE;
static PyObject *__pyx_n_u_GSC_population;
static PyObject *__pyx_n_s_GSC_tot;
static PyObject *__pyx_n_s_Grid2D;
static PyObject *__pyx_kp_u_Grid_creation_s_seconds;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_Input;
static PyObject *__pyx_n_u_Input;
static PyObject *__pyx_n_s_LinearNDInterpolator;
static PyObject *__pyx_n_s_NearestNDInterpolator;
static PyObject *__pyx_n_u_None;
static PyObject *__pyx_n_s_O2_crit;
static PyObject *__pyx_n_s_Ox_irr;
static PyObject *__pyx_n_u_Oxygen;
static PyObject *__pyx_n_s_PDeath;
static PyObject *__pyx_n_s_PDiv;
static PyObject *__pyx_n_s_Pdie;
static PyObject *__pyx_n_s_Pdivi;
static PyObject *__pyx_n_s_Pmove;
static PyObject *__pyx_n_u_Points;
static PyObject *__pyx_kp_u_Population_overview_png;
static PyObject *__pyx_n_s_Pprol;
static PyObject *__pyx_n_s_Proliferating;
static PyObject *__pyx_n_s_Pup;
static PyObject *__pyx_n_s_Quiescent;
static PyObject *__pyx_n_s_Qup;
static PyObject *__pyx_n_s_Reaper;
static PyObject *__pyx_n_s_Restart;
static PyObject *__pyx_n_s_Rim;
static PyObject *__pyx_n_s_SavN;
static PyObject *__pyx_kp_u_Snapshot;
static PyObject *__pyx_kp_u_Summary_file_for_ABM;
static PyObject *__pyx_kp_u_Time_step;
static PyObject *__pyx_kp_u_Time_step_runtime_GSC_GPP_GDS_D;
static PyObject *__pyx_n_s_TransientTerm;
static PyObject *__pyx_n_s_Viewer;
static PyObject *__pyx_n_s_X;
static PyObject *__pyx_n_s_Xs;
static PyObject *__pyx_n_s_Xs_r;
static PyObject *__pyx_n_s_Xs_rh;
static PyObject *__pyx_n_s_Xs_rl;
static PyObject *__pyx_n_s_Y;
static PyObject *__pyx_n_s_Ys;
static PyObject *__pyx_n_s_Ys_r;
static PyObject *__pyx_n_s_Ys_rh;
static PyObject *__pyx_n_s_Ys_rl;
static PyObject *__pyx_kp_u__23;
static PyObject *__pyx_kp_u__26;
static PyObject *__pyx_kp_u__29;
static PyObject *__pyx_kp_u__30;
static PyObject *__pyx_kp_u__31;
static PyObject *__pyx_kp_u__32;
static PyObject *__pyx_n_s__38;
static PyObject *__pyx_n_u_a;
static PyObject *__pyx_n_s_a_tot;
static PyObject *__pyx_n_s_alivecount;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_n_s_any;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_arange;
static PyObject *__pyx_kp_u_are_dead_Total_population;
static PyObject *__pyx_kp_u_are_modelled_individually_In_ad;
static PyObject *__pyx_n_s_argmin;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_asarray;
static PyObject *__pyx_n_s_asize;
static PyObject *__pyx_n_s_axis;
static PyObject *__pyx_n_s_bbox_inches;
static PyObject *__pyx_n_u_blue;
static PyObject *__pyx_n_s_bottom;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_cKDTree;
static PyObject *__pyx_n_u_c_2;
static PyObject *__pyx_n_s_cellcount;
static PyObject *__pyx_n_s_clf;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_cluster;
static PyObject *__pyx_n_s_coeff;
static PyObject *__pyx_n_s_color;
static PyObject *__pyx_n_s_concatenate;
static PyObject *__pyx_n_s_conditions;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_create_dataset;
static PyObject *__pyx_n_s_csize;
static PyObject *__pyx_n_s_cwd;
static PyObject *__pyx_n_u_d;
static PyObject *__pyx_n_s_dashes;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_daughter;
static PyObject *__pyx_n_s_daughters;
static PyObject *__pyx_n_s_dead_neighbours;
static PyObject *__pyx_n_s_deadcount;
static PyObject *__pyx_n_s_delete;
static PyObject *__pyx_n_s_dist_GDS;
static PyObject *__pyx_n_s_dist_GPP;
static PyObject *__pyx_n_s_dist_GSC;
static PyObject *__pyx_n_s_divide;
static PyObject *__pyx_n_s_dsize;
static PyObject *__pyx_n_s_dt;
static PyObject *__pyx_n_s_dx;
static PyObject *__pyx_n_s_dy;
static PyObject *__pyx_n_s_epsilon;
static PyObject *__pyx_n_s_eq;
static PyObject *__pyx_kp_u_evolves;
static PyObject *__pyx_n_s_ext_grid;
static PyObject *__pyx_n_s_ext_grid_locals_genexpr;
static PyObject *__pyx_n_s_exten;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_fdummy1;
static PyObject *__pyx_n_s_fdummy2;
static PyObject *__pyx_n_s_fdummy3;
static PyObject *__pyx_n_s_ff;
static PyObject *__pyx_n_s_figsize;
static PyObject *__pyx_n_s_figure;
static PyObject *__pyx_n_s_fipy;
static PyObject *__pyx_n_s_flatten;
static PyObject *__pyx_n_s_fontsize;
static PyObject *__pyx_n_s_free;
static PyObject *__pyx_n_u_g;
static PyObject *__pyx_n_s_gcf;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_getcwd;
static PyObject *__pyx_n_s_gsize;
static PyObject *__pyx_kp_u_h5;
static PyObject *__pyx_n_s_h5py;
static PyObject *__pyx_n_s_hf;
static PyObject *__pyx_n_s_hierarchy;
static PyObject *__pyx_kp_u_history_log;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_kp_u_i_2E_i_i_i_i_i;
static PyObject *__pyx_kp_u_i_i_i_i_9E_9E_9E_i_i_9E_i_9E_9E;
static PyObject *__pyx_n_s_iden;
static PyObject *__pyx_n_s_idummy1;
static PyObject *__pyx_n_s_idummy2;
static PyObject *__pyx_n_s_idummy3;
static PyObject *__pyx_n_s_idummy4;
static PyObject *__pyx_n_s_idummy5;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_in1d;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_indices;
static PyObject *__pyx_n_s_indptr;
static PyObject *__pyx_n_s_init_Cell_pop;
static PyObject *__pyx_n_s_init_oxygen;
static PyObject *__pyx_n_s_invert;
static PyObject *__pyx_n_s_isfile;
static PyObject *__pyx_n_s_isnan;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_kp_u_k;
static PyObject *__pyx_n_s_k_2;
static PyObject *__pyx_n_u_k_2;
static PyObject *__pyx_n_s_kdtree;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_s_lambdaC;
static PyObject *__pyx_n_s_left;
static PyObject *__pyx_n_s_legend;
static PyObject *__pyx_n_s_linestyle;
static PyObject *__pyx_n_s_llen;
static PyObject *__pyx_n_s_logfile;
static PyObject *__pyx_n_s_logical_and;
static PyObject *__pyx_n_s_low;
static PyObject *__pyx_n_s_lx;
static PyObject *__pyx_n_u_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_map;
static PyObject *__pyx_n_s_mask;
static PyObject *__pyx_kp_u_mathrm_Alive;
static PyObject *__pyx_kp_u_mathrm_Alive_Rim;
static PyObject *__pyx_kp_u_mathrm_Cell_number;
static PyObject *__pyx_kp_u_mathrm_Dead;
static PyObject *__pyx_kp_u_mathrm_GDS;
static PyObject *__pyx_kp_u_mathrm_GPP;
static PyObject *__pyx_kp_u_mathrm_GSC;
static PyObject *__pyx_kp_u_mathrm_x_lattice_position;
static PyObject *__pyx_kp_u_mathrm_y_lattice_position;
static PyObject *__pyx_n_s_matplotlib_pyplot;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_mesh;
static PyObject *__pyx_n_s_meshgrid;
static PyObject *__pyx_n_s_mod;
static PyObject *__pyx_n_s_more_itertools;
static PyObject *__pyx_n_s_move;
static PyObject *__pyx_n_s_myplots;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_neigh;
static PyObject *__pyx_n_s_neighbours;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_newcomers;
static PyObject *__pyx_n_s_newpoints;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_nsize;
static PyObject *__pyx_n_s_nsize_alive;
static PyObject *__pyx_n_s_nsize_ndead;
static PyObject *__pyx_n_s_nsize_trap;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_nx;
static PyObject *__pyx_n_s_ny;
static PyObject *__pyx_n_s_ones;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_u_orange;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_oxygen;
static PyObject *__pyx_kp_u_params_log;
static PyObject *__pyx_n_s_paramsfile;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_phs;
static PyObject *__pyx_n_s_pl;
static PyObject *__pyx_n_s_plot;
static PyObject *__pyx_n_s_plt;
static PyObject *__pyx_kp_u_png;
static PyObject *__pyx_n_s_point;
static PyObject *__pyx_n_s_points;
static PyObject *__pyx_n_u_points_high;
static PyObject *__pyx_n_u_points_low;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_progeny;
static PyObject *__pyx_n_s_query;
static PyObject *__pyx_n_s_query_ball_point;
static PyObject *__pyx_n_s_qui_GDS;
static PyObject *__pyx_n_s_qui_GPP;
static PyObject *__pyx_n_s_qui_GSC;
static PyObject *__pyx_n_u_r;
static PyObject *__pyx_kp_u_r_2;
static PyObject *__pyx_n_s_random;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_ravel;
static PyObject *__pyx_n_s_read_snapshot;
static PyObject *__pyx_n_s_region_GDS;
static PyObject *__pyx_n_s_region_GPP;
static PyObject *__pyx_n_s_region_GSC;
static PyObject *__pyx_n_s_res;
static PyObject *__pyx_n_s_reshape;
static PyObject *__pyx_n_s_resx;
static PyObject *__pyx_kp_u_resx_resy_steps_SavN_Dox_lambda;
static PyObject *__pyx_n_s_resy;
static PyObject *__pyx_n_s_reverse;
static PyObject *__pyx_n_s_round;
static PyObject *__pyx_n_s_run_ABM;
static PyObject *__pyx_n_s_run_ABM_locals_lambda;
static PyObject *__pyx_n_s_savefig;
static PyObject *__pyx_n_s_scipy_interpolate;
static PyObject *__pyx_n_s_scipy_spatial;
static PyObject *__pyx_kp_u_seconds;
static PyObject *__pyx_n_s_semilogy;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setValue;
static PyObject *__pyx_n_s_simplices;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_solve;
static PyObject *__pyx_n_s_solve_oxygen;
static PyObject *__pyx_n_s_sorted;
static PyObject *__pyx_n_s_start_time;
static PyObject *__pyx_n_s_steps;
static PyObject *__pyx_n_s_stocev;
static PyObject *__pyx_n_s_store;
static PyObject *__pyx_n_s_subplots_adjust;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_sx;
static PyObject *__pyx_n_s_sy;
static PyObject *__pyx_kp_u_t;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_u_tight;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_timeStepDuration;
static PyObject *__pyx_n_u_time_label;
static PyObject *__pyx_n_s_trapped;
static PyObject *__pyx_n_s_tree;
static PyObject *__pyx_n_s_tri;
static PyObject *__pyx_n_s_triplot;
static PyObject *__pyx_n_s_tstart;
static PyObject *__pyx_n_s_uni;
static PyObject *__pyx_n_s_uniform;
static PyObject *__pyx_n_s_upper;
static PyObject *__pyx_n_s_usize;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_var;
static PyObject *__pyx_n_s_vertex_neighbor_vertices;
static PyObject *__pyx_n_s_voronoi_kdtree;
static PyObject *__pyx_n_u_w;
static PyObject *__pyx_n_s_where;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_n_s_write_snapshot;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_x_new;
static PyObject *__pyx_n_s_xlabel;
static PyObject *__pyx_n_s_xticks;
static PyObject *__pyx_n_s_xx;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_u_y;
static PyObject *__pyx_kp_u_y_2;
static PyObject *__pyx_n_s_y_new;
static PyObject *__pyx_n_s_ylabel;
static PyObject *__pyx_n_s_yticks;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_pf_3GBM_Dead_cluster(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_GSC, PyArrayObject *__pyx_v_GPP, PyArrayObject *__pyx_v_GDS, PyArrayObject *__pyx_v_Alive, PyArrayObject *__pyx_v_Cell_pop, PyArrayObject *__pyx_v_Dead, PyArrayObject *__pyx_v_Rim, PyObject *__pyx_v_Xs_r, PyObject *__pyx_v_Ys_r, PyObject *__pyx_v_Discarded, PyArrayObject *__pyx_v_points, PyObject *__pyx_v_tri, PyArrayObject *__pyx_v_index, PyArrayObject *__pyx_v_indptr, PyArrayObject *__pyx_v_indices, int __pyx_v_Dup, int __pyx_v_Qup, double __pyx_v_trapped); /* proto */
static PyObject *__pyx_pf_3GBM_2stocev(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_Ox_irr, double __pyx_v_O2_crit, double __pyx_v_Pdie, double __pyx_v_Pprol, double __pyx_v_Pdivi); /* proto */
static PyObject *__pyx_pf_3GBM_8ext_grid_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3GBM_4ext_grid(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_gsize, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_Alive, PyArrayObject *__pyx_v_index, PyArrayObject *__pyx_v_Rim, PyObject *__pyx_v_tree, PyArrayObject *__pyx_v_phs, PyObject *__pyx_v_Discarded, PyArrayObject *__pyx_v_Cell_pop, PyArrayObject *__pyx_v_Dead, PyArrayObject *__pyx_v_GSC, PyArrayObject *__pyx_v_GPP, PyArrayObject *__pyx_v_GDS, double __pyx_v_trapped); /* proto */
static PyObject *__pyx_pf_3GBM_6interLN(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_points, PyArrayObject *__pyx_v_values, PyObject *__pyx_v_newpoints); /* proto */
static PyObject *__pyx_pf_3GBM_8init_oxygen(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_Restart, PyArrayObject *__pyx_v_Ox_irr, PyObject *__pyx_v_mesh, int __pyx_v_low, PyArrayObject *__pyx_v_points); /* proto */
static PyObject *__pyx_pf_3GBM_10solve_oxygen(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_mesh, PyObject *__pyx_v_oxygen, PyObject *__pyx_v_voronoi_kdtree, PyArrayObject *__pyx_v_pl, PyArrayObject *__pyx_v_GSC, PyArrayObject *__pyx_v_GPP, PyArrayObject *__pyx_v_GDS, PyObject *__pyx_v_Blood_vessel, double __pyx_v_Dox, PyArrayObject *__pyx_v_points, PyObject *__pyx_v_Xs_r, PyObject *__pyx_v_Ys_r, double __pyx_v_timeStepDuration, double __pyx_v_lambdaC); /* proto */
static PyObject *__pyx_pf_3GBM_12hierarchy(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_iden, int __pyx_v_daughter, PyArrayObject *__pyx_v_GSC, PyArrayObject *__pyx_v_GPP, PyArrayObject *__pyx_v_GDS, double __pyx_v_epsilon); /* proto */
static PyObject *__pyx_pf_3GBM_14write_snapshot(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_tstart, PyObject *__pyx_v_name, PyObject *__pyx_v_Input, PyArrayObject *__pyx_v_Ox_irr, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_pl, PyArrayObject *__pyx_v_phs, PyArrayObject *__pyx_v_Cell_pop, PyArrayObject *__pyx_v_GSC, PyArrayObject *__pyx_v_GPP, PyArrayObject *__pyx_v_GDS, PyArrayObject *__pyx_v_Alive, PyArrayObject *__pyx_v_Dead, PyArrayObject *__pyx_v_Rim, PyObject *__pyx_v_Discarded); /* proto */
static PyObject *__pyx_pf_3GBM_16read_snapshot(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_3GBM_18init_Cell_pop(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_Restart, PyObject *__pyx_v_Input); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda1(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda2(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_3GBM_20run_ABM(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_Restart, PyObject *__pyx_v_store, int __pyx_v_resx, int __pyx_v_resy, int __pyx_v_steps, int __pyx_v_SavN, double __pyx_v_Dox, double __pyx_v_lambdaC, double __pyx_v_O2_crit, int __pyx_v_low, int __pyx_v_Dup, double __pyx_v_trapped, int __pyx_v_Qup, double __pyx_v_epsilon, double __pyx_v_Pdie, double __pyx_v_Pprol, double __pyx_v_Pdivi, double __pyx_v_dx, double __pyx_v_dy, int __pyx_v_myplots); /* proto */
static PyObject *__pyx_tp_new_3GBM___pyx_scope_struct__ext_grid(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3GBM___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_;
static PyObject *__pyx_float_1_;
static PyObject *__pyx_float_0_1;
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_float_0_6;
static PyObject *__pyx_float_0_9;
static PyObject *__pyx_float_25_;
static PyObject *__pyx_float_3_0;
static PyObject *__pyx_float_0_00;
static PyObject *__pyx_float_0_18;
static PyObject *__pyx_float_500_;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_16;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_slice_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__42;
static PyObject *__pyx_codeobj__44;
static PyObject *__pyx_codeobj__46;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
/* Late includes */

/* "GBM.pyx":36
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def Dead_cluster(np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, np.ndarray Alive, np.ndarray Cell_pop, np.ndarray Dead, np.ndarray Rim, list Xs_r, list Ys_r, list Discarded, np.ndarray points, tri, np.ndarray index, np.ndarray indptr, np.ndarray indices, int Dup, int Qup, double trapped):             # <<<<<<<<<<<<<<
 * 
 *     cdef list neighbours = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_3GBM_1Dead_cluster(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3GBM_1Dead_cluster = {"Dead_cluster", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3GBM_1Dead_cluster, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3GBM_1Dead_cluster(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_GSC = 0;
  PyArrayObject *__pyx_v_GPP = 0;
  PyArrayObject *__pyx_v_GDS = 0;
  PyArrayObject *__pyx_v_Alive = 0;
  PyArrayObject *__pyx_v_Cell_pop = 0;
  PyArrayObject *__pyx_v_Dead = 0;
  PyArrayObject *__pyx_v_Rim = 0;
  PyObject *__pyx_v_Xs_r = 0;
  PyObject *__pyx_v_Ys_r = 0;
  PyObject *__pyx_v_Discarded = 0;
  PyArrayObject *__pyx_v_points = 0;
  PyObject *__pyx_v_tri = 0;
  PyArrayObject *__pyx_v_index = 0;
  PyArrayObject *__pyx_v_indptr = 0;
  PyArrayObject *__pyx_v_indices = 0;
  int __pyx_v_Dup;
  int __pyx_v_Qup;
  double __pyx_v_trapped;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Dead_cluster (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_GSC,&__pyx_n_s_GPP,&__pyx_n_s_GDS,&__pyx_n_s_Alive,&__pyx_n_s_Cell_pop,&__pyx_n_s_Dead,&__pyx_n_s_Rim,&__pyx_n_s_Xs_r,&__pyx_n_s_Ys_r,&__pyx_n_s_Discarded,&__pyx_n_s_points,&__pyx_n_s_tri,&__pyx_n_s_index,&__pyx_n_s_indptr,&__pyx_n_s_indices,&__pyx_n_s_Dup,&__pyx_n_s_Qup,&__pyx_n_s_trapped,0};
    PyObject* values[18] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        CYTHON_FALLTHROUGH;
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_GSC)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_GPP)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Dead_cluster", 1, 18, 18, 1); __PYX_ERR(0, 36, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_GDS)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Dead_cluster", 1, 18, 18, 2); __PYX_ERR(0, 36, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Alive)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Dead_cluster", 1, 18, 18, 3); __PYX_ERR(0, 36, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Cell_pop)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Dead_cluster", 1, 18, 18, 4); __PYX_ERR(0, 36, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Dead)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Dead_cluster", 1, 18, 18, 5); __PYX_ERR(0, 36, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Rim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Dead_cluster", 1, 18, 18, 6); __PYX_ERR(0, 36, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Xs_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Dead_cluster", 1, 18, 18, 7); __PYX_ERR(0, 36, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Ys_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Dead_cluster", 1, 18, 18, 8); __PYX_ERR(0, 36, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Discarded)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Dead_cluster", 1, 18, 18, 9); __PYX_ERR(0, 36, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Dead_cluster", 1, 18, 18, 10); __PYX_ERR(0, 36, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Dead_cluster", 1, 18, 18, 11); __PYX_ERR(0, 36, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Dead_cluster", 1, 18, 18, 12); __PYX_ERR(0, 36, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_indptr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Dead_cluster", 1, 18, 18, 13); __PYX_ERR(0, 36, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Dead_cluster", 1, 18, 18, 14); __PYX_ERR(0, 36, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Dup)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Dead_cluster", 1, 18, 18, 15); __PYX_ERR(0, 36, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (likely((values[16] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Qup)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Dead_cluster", 1, 18, 18, 16); __PYX_ERR(0, 36, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 17:
        if (likely((values[17] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trapped)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Dead_cluster", 1, 18, 18, 17); __PYX_ERR(0, 36, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Dead_cluster") < 0)) __PYX_ERR(0, 36, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 18) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
    }
    __pyx_v_GSC = ((PyArrayObject *)values[0]);
    __pyx_v_GPP = ((PyArrayObject *)values[1]);
    __pyx_v_GDS = ((PyArrayObject *)values[2]);
    __pyx_v_Alive = ((PyArrayObject *)values[3]);
    __pyx_v_Cell_pop = ((PyArrayObject *)values[4]);
    __pyx_v_Dead = ((PyArrayObject *)values[5]);
    __pyx_v_Rim = ((PyArrayObject *)values[6]);
    __pyx_v_Xs_r = ((PyObject*)values[7]);
    __pyx_v_Ys_r = ((PyObject*)values[8]);
    __pyx_v_Discarded = ((PyObject*)values[9]);
    __pyx_v_points = ((PyArrayObject *)values[10]);
    __pyx_v_tri = values[11];
    __pyx_v_index = ((PyArrayObject *)values[12]);
    __pyx_v_indptr = ((PyArrayObject *)values[13]);
    __pyx_v_indices = ((PyArrayObject *)values[14]);
    __pyx_v_Dup = __Pyx_PyInt_As_int(values[15]); if (unlikely((__pyx_v_Dup == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 36, __pyx_L3_error)
    __pyx_v_Qup = __Pyx_PyInt_As_int(values[16]); if (unlikely((__pyx_v_Qup == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 36, __pyx_L3_error)
    __pyx_v_trapped = __pyx_PyFloat_AsDouble(values[17]); if (unlikely((__pyx_v_trapped == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 36, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Dead_cluster", 1, 18, 18, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 36, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("GBM.Dead_cluster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_GSC), __pyx_ptype_5numpy_ndarray, 1, "GSC", 0))) __PYX_ERR(0, 36, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_GPP), __pyx_ptype_5numpy_ndarray, 1, "GPP", 0))) __PYX_ERR(0, 36, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_GDS), __pyx_ptype_5numpy_ndarray, 1, "GDS", 0))) __PYX_ERR(0, 36, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Alive), __pyx_ptype_5numpy_ndarray, 1, "Alive", 0))) __PYX_ERR(0, 36, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cell_pop), __pyx_ptype_5numpy_ndarray, 1, "Cell_pop", 0))) __PYX_ERR(0, 36, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Dead), __pyx_ptype_5numpy_ndarray, 1, "Dead", 0))) __PYX_ERR(0, 36, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Rim), __pyx_ptype_5numpy_ndarray, 1, "Rim", 0))) __PYX_ERR(0, 36, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Xs_r), (&PyList_Type), 1, "Xs_r", 1))) __PYX_ERR(0, 36, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Ys_r), (&PyList_Type), 1, "Ys_r", 1))) __PYX_ERR(0, 36, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Discarded), (&PyList_Type), 1, "Discarded", 1))) __PYX_ERR(0, 36, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 1, "points", 0))) __PYX_ERR(0, 36, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_index), __pyx_ptype_5numpy_ndarray, 1, "index", 0))) __PYX_ERR(0, 36, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_indptr), __pyx_ptype_5numpy_ndarray, 1, "indptr", 0))) __PYX_ERR(0, 36, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_indices), __pyx_ptype_5numpy_ndarray, 1, "indices", 0))) __PYX_ERR(0, 36, __pyx_L1_error)
  __pyx_r = __pyx_pf_3GBM_Dead_cluster(__pyx_self, __pyx_v_GSC, __pyx_v_GPP, __pyx_v_GDS, __pyx_v_Alive, __pyx_v_Cell_pop, __pyx_v_Dead, __pyx_v_Rim, __pyx_v_Xs_r, __pyx_v_Ys_r, __pyx_v_Discarded, __pyx_v_points, __pyx_v_tri, __pyx_v_index, __pyx_v_indptr, __pyx_v_indices, __pyx_v_Dup, __pyx_v_Qup, __pyx_v_trapped);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3GBM_Dead_cluster(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_GSC, PyArrayObject *__pyx_v_GPP, PyArrayObject *__pyx_v_GDS, PyArrayObject *__pyx_v_Alive, PyArrayObject *__pyx_v_Cell_pop, PyArrayObject *__pyx_v_Dead, PyArrayObject *__pyx_v_Rim, PyObject *__pyx_v_Xs_r, PyObject *__pyx_v_Ys_r, PyObject *__pyx_v_Discarded, PyArrayObject *__pyx_v_points, PyObject *__pyx_v_tri, PyArrayObject *__pyx_v_index, PyArrayObject *__pyx_v_indptr, PyArrayObject *__pyx_v_indices, int __pyx_v_Dup, int __pyx_v_Qup, double __pyx_v_trapped) {
  PyObject *__pyx_v_neighbours = 0;
  PyObject *__pyx_v_dead_neighbours = 0;
  PyObject *__pyx_v_qui_GSC = 0;
  PyObject *__pyx_v_qui_GPP = 0;
  PyObject *__pyx_v_qui_GDS = 0;
  PyObject *__pyx_v_cluster = 0;
  PyArrayObject *__pyx_v_neigh = 0;
  int __pyx_v_j;
  int __pyx_v_i;
  int __pyx_v_dsize;
  int __pyx_v_nsize;
  int __pyx_v_nsize_alive;
  int __pyx_v_nsize_trap;
  int __pyx_v_nsize_ndead;
  int __pyx_v_csize;
  double __pyx_v_deadcount;
  double __pyx_v_alivecount;
  double __pyx_v_cellcount;
  Py_ssize_t __pyx_v_gsize;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  long __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  double __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  int __pyx_t_15;
  PyObject *(*__pyx_t_16)(PyObject *);
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *(*__pyx_t_19)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Dead_cluster", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_GSC);
  __Pyx_INCREF((PyObject *)__pyx_v_GPP);
  __Pyx_INCREF((PyObject *)__pyx_v_GDS);
  __Pyx_INCREF((PyObject *)__pyx_v_Alive);
  __Pyx_INCREF((PyObject *)__pyx_v_Cell_pop);
  __Pyx_INCREF((PyObject *)__pyx_v_Dead);
  __Pyx_INCREF((PyObject *)__pyx_v_Rim);
  __Pyx_INCREF((PyObject *)__pyx_v_points);
  __Pyx_INCREF(__pyx_v_tri);
  __Pyx_INCREF((PyObject *)__pyx_v_index);
  __Pyx_INCREF((PyObject *)__pyx_v_indptr);
  __Pyx_INCREF((PyObject *)__pyx_v_indices);

  /* "GBM.pyx":38
 * def Dead_cluster(np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, np.ndarray Alive, np.ndarray Cell_pop, np.ndarray Dead, np.ndarray Rim, list Xs_r, list Ys_r, list Discarded, np.ndarray points, tri, np.ndarray index, np.ndarray indptr, np.ndarray indices, int Dup, int Qup, double trapped):
 * 
 *     cdef list neighbours = []             # <<<<<<<<<<<<<<
 *     cdef list dead_neighbours = []
 *     cdef list qui_GSC = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_neighbours = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "GBM.pyx":39
 * 
 *     cdef list neighbours = []
 *     cdef list dead_neighbours = []             # <<<<<<<<<<<<<<
 *     cdef list qui_GSC = []
 *     cdef list qui_GPP = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dead_neighbours = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "GBM.pyx":40
 *     cdef list neighbours = []
 *     cdef list dead_neighbours = []
 *     cdef list qui_GSC = []             # <<<<<<<<<<<<<<
 *     cdef list qui_GPP = []
 *     cdef list qui_GDS = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_qui_GSC = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "GBM.pyx":41
 *     cdef list dead_neighbours = []
 *     cdef list qui_GSC = []
 *     cdef list qui_GPP = []             # <<<<<<<<<<<<<<
 *     cdef list qui_GDS = []
 *     cdef list cluster = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_qui_GPP = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "GBM.pyx":42
 *     cdef list qui_GSC = []
 *     cdef list qui_GPP = []
 *     cdef list qui_GDS = []             # <<<<<<<<<<<<<<
 *     cdef list cluster = []
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_qui_GDS = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "GBM.pyx":43
 *     cdef list qui_GPP = []
 *     cdef list qui_GDS = []
 *     cdef list cluster = []             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray neigh
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cluster = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "GBM.pyx":50
 *     cdef double deadcount, alivecount, cellcount
 * 
 *     dsize = len(Dead)             # <<<<<<<<<<<<<<
 * 
 *     for j in range(dsize):
 */
  __pyx_t_2 = PyObject_Length(((PyObject *)__pyx_v_Dead)); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 50, __pyx_L1_error)
  __pyx_v_dsize = __pyx_t_2;

  /* "GBM.pyx":52
 *     dsize = len(Dead)
 * 
 *     for j in range(dsize):             # <<<<<<<<<<<<<<
 *         neigh = indices[indptr[j]:indptr[j+1]]
 *         nsize = len(neigh)
 */
  __pyx_t_3 = __pyx_v_dsize;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_j = __pyx_t_5;

    /* "GBM.pyx":53
 * 
 *     for j in range(dsize):
 *         neigh = indices[indptr[j]:indptr[j+1]]             # <<<<<<<<<<<<<<
 *         nsize = len(neigh)
 *         deadcount = Dead[j]
 */
    __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_indptr), __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = (__pyx_v_j + 1);
    __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_indptr), __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_indices), 0, 0, &__pyx_t_1, &__pyx_t_7, NULL, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_neigh, ((PyArrayObject *)__pyx_t_8));
    __pyx_t_8 = 0;

    /* "GBM.pyx":54
 *     for j in range(dsize):
 *         neigh = indices[indptr[j]:indptr[j+1]]
 *         nsize = len(neigh)             # <<<<<<<<<<<<<<
 *         deadcount = Dead[j]
 *         alivecount = Alive[j]
 */
    __pyx_t_2 = PyObject_Length(((PyObject *)__pyx_v_neigh)); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 54, __pyx_L1_error)
    __pyx_v_nsize = __pyx_t_2;

    /* "GBM.pyx":55
 *         neigh = indices[indptr[j]:indptr[j+1]]
 *         nsize = len(neigh)
 *         deadcount = Dead[j]             # <<<<<<<<<<<<<<
 *         alivecount = Alive[j]
 *         nsize_ndead = len(neigh[Dead[neigh] == 0])
 */
    __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_Dead), __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 55, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_deadcount = __pyx_t_9;

    /* "GBM.pyx":56
 *         nsize = len(neigh)
 *         deadcount = Dead[j]
 *         alivecount = Alive[j]             # <<<<<<<<<<<<<<
 *         nsize_ndead = len(neigh[Dead[neigh] == 0])
 *         nsize_alive = len(neigh[Alive[neigh] > 0 ])
 */
    __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_Alive), __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 56, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_alivecount = __pyx_t_9;

    /* "GBM.pyx":57
 *         deadcount = Dead[j]
 *         alivecount = Alive[j]
 *         nsize_ndead = len(neigh[Dead[neigh] == 0])             # <<<<<<<<<<<<<<
 *         nsize_alive = len(neigh[Alive[neigh] > 0 ])
 *         cellcount = Cell_pop[j]
 */
    __pyx_t_8 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Dead), ((PyObject *)__pyx_v_neigh)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyInt_EqObjC(__pyx_t_8, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_neigh), __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_2 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 57, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_nsize_ndead = __pyx_t_2;

    /* "GBM.pyx":58
 *         alivecount = Alive[j]
 *         nsize_ndead = len(neigh[Dead[neigh] == 0])
 *         nsize_alive = len(neigh[Alive[neigh] > 0 ])             # <<<<<<<<<<<<<<
 *         cellcount = Cell_pop[j]
 *         nsize_trap = len(neigh[Rim[neigh] <= trapped])
 */
    __pyx_t_8 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Alive), ((PyObject *)__pyx_v_neigh)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_8, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_neigh), __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_2 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_nsize_alive = __pyx_t_2;

    /* "GBM.pyx":59
 *         nsize_ndead = len(neigh[Dead[neigh] == 0])
 *         nsize_alive = len(neigh[Alive[neigh] > 0 ])
 *         cellcount = Cell_pop[j]             # <<<<<<<<<<<<<<
 *         nsize_trap = len(neigh[Rim[neigh] <= trapped])
 * 
 */
    __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_Cell_pop), __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_cellcount = __pyx_t_9;

    /* "GBM.pyx":60
 *         nsize_alive = len(neigh[Alive[neigh] > 0 ])
 *         cellcount = Cell_pop[j]
 *         nsize_trap = len(neigh[Rim[neigh] <= trapped])             # <<<<<<<<<<<<<<
 * 
 *         # If there are only dead cells around a dead cell then you might make a cluster of at least Dup.
 */
    __pyx_t_8 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Rim), ((PyObject *)__pyx_v_neigh)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_trapped); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_8, __pyx_t_7, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_neigh), __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_nsize_trap = __pyx_t_2;

    /* "GBM.pyx":63
 * 
 *         # If there are only dead cells around a dead cell then you might make a cluster of at least Dup.
 *         if j not in neighbours and deadcount > 0. and deadcount < float(Dup) and alivecount == 0 and nsize > 0 and nsize_ndead == 0 and nsize_alive ==0:             # <<<<<<<<<<<<<<
 *             neigh = neigh[Dead[neigh] <= Dup]
 *             neigh = neigh[np.in1d(neigh,neighbours,invert=True)]
 */
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_t_7, __pyx_v_neighbours, Py_NE)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_12 = (__pyx_t_11 != 0);
    if (__pyx_t_12) {
    } else {
      __pyx_t_10 = __pyx_t_12;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_12 = ((__pyx_v_deadcount > 0.) != 0);
    if (__pyx_t_12) {
    } else {
      __pyx_t_10 = __pyx_t_12;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_12 = ((__pyx_v_deadcount < ((double)__pyx_v_Dup)) != 0);
    if (__pyx_t_12) {
    } else {
      __pyx_t_10 = __pyx_t_12;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_12 = ((__pyx_v_alivecount == 0.0) != 0);
    if (__pyx_t_12) {
    } else {
      __pyx_t_10 = __pyx_t_12;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_12 = ((__pyx_v_nsize > 0) != 0);
    if (__pyx_t_12) {
    } else {
      __pyx_t_10 = __pyx_t_12;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_12 = ((__pyx_v_nsize_ndead == 0) != 0);
    if (__pyx_t_12) {
    } else {
      __pyx_t_10 = __pyx_t_12;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_12 = ((__pyx_v_nsize_alive == 0) != 0);
    __pyx_t_10 = __pyx_t_12;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_10) {

      /* "GBM.pyx":64
 *         # If there are only dead cells around a dead cell then you might make a cluster of at least Dup.
 *         if j not in neighbours and deadcount > 0. and deadcount < float(Dup) and alivecount == 0 and nsize > 0 and nsize_ndead == 0 and nsize_alive ==0:
 *             neigh = neigh[Dead[neigh] <= Dup]             # <<<<<<<<<<<<<<
 *             neigh = neigh[np.in1d(neigh,neighbours,invert=True)]
 *             nsize = len(neigh)
 */
      __pyx_t_7 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Dead), ((PyObject *)__pyx_v_neigh)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 64, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_Dup); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_7, __pyx_t_1, Py_LE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 64, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_neigh), __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 64, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_neigh, ((PyArrayObject *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "GBM.pyx":65
 *         if j not in neighbours and deadcount > 0. and deadcount < float(Dup) and alivecount == 0 and nsize > 0 and nsize_ndead == 0 and nsize_alive ==0:
 *             neigh = neigh[Dead[neigh] <= Dup]
 *             neigh = neigh[np.in1d(neigh,neighbours,invert=True)]             # <<<<<<<<<<<<<<
 *             nsize = len(neigh)
 *             if nsize > 0:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_in1d); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 65, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(((PyObject *)__pyx_v_neigh));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_neigh));
      PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_neigh));
      __Pyx_INCREF(__pyx_v_neighbours);
      __Pyx_GIVEREF(__pyx_v_neighbours);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_neighbours);
      __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 65, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_invert, Py_True) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
      __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 65, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_neigh), __pyx_t_13); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 65, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 65, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_neigh, ((PyArrayObject *)__pyx_t_7));
      __pyx_t_7 = 0;

      /* "GBM.pyx":66
 *             neigh = neigh[Dead[neigh] <= Dup]
 *             neigh = neigh[np.in1d(neigh,neighbours,invert=True)]
 *             nsize = len(neigh)             # <<<<<<<<<<<<<<
 *             if nsize > 0:
 *                 neighbours.extend(list(neigh))
 */
      __pyx_t_2 = PyObject_Length(((PyObject *)__pyx_v_neigh)); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 66, __pyx_L1_error)
      __pyx_v_nsize = __pyx_t_2;

      /* "GBM.pyx":67
 *             neigh = neigh[np.in1d(neigh,neighbours,invert=True)]
 *             nsize = len(neigh)
 *             if nsize > 0:             # <<<<<<<<<<<<<<
 *                 neighbours.extend(list(neigh))
 *                 dead_neighbours.extend([np.sum(Dead[neigh])])
 */
      __pyx_t_10 = ((__pyx_v_nsize > 0) != 0);
      if (__pyx_t_10) {

        /* "GBM.pyx":68
 *             nsize = len(neigh)
 *             if nsize > 0:
 *                 neighbours.extend(list(neigh))             # <<<<<<<<<<<<<<
 *                 dead_neighbours.extend([np.sum(Dead[neigh])])
 *                 qui_GSC.extend([0])
 */
        __pyx_t_7 = PySequence_List(((PyObject *)__pyx_v_neigh)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 68, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_14 = __Pyx_PyList_Extend(__pyx_v_neighbours, __pyx_t_7); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 68, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "GBM.pyx":69
 *             if nsize > 0:
 *                 neighbours.extend(list(neigh))
 *                 dead_neighbours.extend([np.sum(Dead[neigh])])             # <<<<<<<<<<<<<<
 *                 qui_GSC.extend([0])
 *                 qui_GPP.extend([0])
 */
        __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 69, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_sum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Dead), ((PyObject *)__pyx_v_neigh)); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 69, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_8 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_8, __pyx_t_13) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_13);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 69, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_dead_neighbours, __pyx_t_7); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 69, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        (void)(__pyx_t_14);

        /* "GBM.pyx":70
 *                 neighbours.extend(list(neigh))
 *                 dead_neighbours.extend([np.sum(Dead[neigh])])
 *                 qui_GSC.extend([0])             # <<<<<<<<<<<<<<
 *                 qui_GPP.extend([0])
 *                 qui_GDS.extend([0])
 */
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_qui_GSC, __pyx_int_0); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 70, __pyx_L1_error)

        /* "GBM.pyx":71
 *                 dead_neighbours.extend([np.sum(Dead[neigh])])
 *                 qui_GSC.extend([0])
 *                 qui_GPP.extend([0])             # <<<<<<<<<<<<<<
 *                 qui_GDS.extend([0])
 *                 cluster.extend([j])
 */
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_qui_GPP, __pyx_int_0); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 71, __pyx_L1_error)

        /* "GBM.pyx":72
 *                 qui_GSC.extend([0])
 *                 qui_GPP.extend([0])
 *                 qui_GDS.extend([0])             # <<<<<<<<<<<<<<
 *                 cluster.extend([j])
 * 
 */
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_qui_GDS, __pyx_int_0); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 72, __pyx_L1_error)

        /* "GBM.pyx":73
 *                 qui_GPP.extend([0])
 *                 qui_GDS.extend([0])
 *                 cluster.extend([j])             # <<<<<<<<<<<<<<
 * 
 *         # Otherwise, you might make a cluster of dead and living cells (GSC, GPP, GDS) of at least Qup cells.
 */
        __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 73, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_cluster, __pyx_t_7); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 73, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "GBM.pyx":67
 *             neigh = neigh[np.in1d(neigh,neighbours,invert=True)]
 *             nsize = len(neigh)
 *             if nsize > 0:             # <<<<<<<<<<<<<<
 *                 neighbours.extend(list(neigh))
 *                 dead_neighbours.extend([np.sum(Dead[neigh])])
 */
      }

      /* "GBM.pyx":63
 * 
 *         # If there are only dead cells around a dead cell then you might make a cluster of at least Dup.
 *         if j not in neighbours and deadcount > 0. and deadcount < float(Dup) and alivecount == 0 and nsize > 0 and nsize_ndead == 0 and nsize_alive ==0:             # <<<<<<<<<<<<<<
 *             neigh = neigh[Dead[neigh] <= Dup]
 *             neigh = neigh[np.in1d(neigh,neighbours,invert=True)]
 */
      goto __pyx_L5;
    }

    /* "GBM.pyx":76
 * 
 *         # Otherwise, you might make a cluster of dead and living cells (GSC, GPP, GDS) of at least Qup cells.
 *         elif j not in neighbours and nsize > 0. and (cellcount > 0. and cellcount < float(Qup)) and nsize_trap == 0:             # <<<<<<<<<<<<<<
 *             neigh = neigh[Cell_pop[neigh] <= Qup]
 *             neigh = neigh[np.in1d(neigh,neighbours,invert=True)]
 */
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = (__Pyx_PySequence_ContainsTF(__pyx_t_7, __pyx_v_neighbours, Py_NE)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_11 = (__pyx_t_12 != 0);
    if (__pyx_t_11) {
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_11 = ((__pyx_v_nsize > 0.) != 0);
    if (__pyx_t_11) {
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_11 = ((__pyx_v_cellcount > 0.) != 0);
    if (__pyx_t_11) {
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_11 = ((__pyx_v_cellcount < ((double)__pyx_v_Qup)) != 0);
    if (__pyx_t_11) {
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_11 = ((__pyx_v_nsize_trap == 0) != 0);
    __pyx_t_10 = __pyx_t_11;
    __pyx_L14_bool_binop_done:;
    if (__pyx_t_10) {

      /* "GBM.pyx":77
 *         # Otherwise, you might make a cluster of dead and living cells (GSC, GPP, GDS) of at least Qup cells.
 *         elif j not in neighbours and nsize > 0. and (cellcount > 0. and cellcount < float(Qup)) and nsize_trap == 0:
 *             neigh = neigh[Cell_pop[neigh] <= Qup]             # <<<<<<<<<<<<<<
 *             neigh = neigh[np.in1d(neigh,neighbours,invert=True)]
 *             nsize = len(neigh)
 */
      __pyx_t_7 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Cell_pop), ((PyObject *)__pyx_v_neigh)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_Qup); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_13 = PyObject_RichCompare(__pyx_t_7, __pyx_t_1, Py_LE); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 77, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_neigh), __pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 77, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_neigh, ((PyArrayObject *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "GBM.pyx":78
 *         elif j not in neighbours and nsize > 0. and (cellcount > 0. and cellcount < float(Qup)) and nsize_trap == 0:
 *             neigh = neigh[Cell_pop[neigh] <= Qup]
 *             neigh = neigh[np.in1d(neigh,neighbours,invert=True)]             # <<<<<<<<<<<<<<
 *             nsize = len(neigh)
 *             if nsize > 0:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_in1d); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 78, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(((PyObject *)__pyx_v_neigh));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_neigh));
      PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_neigh));
      __Pyx_INCREF(__pyx_v_neighbours);
      __Pyx_GIVEREF(__pyx_v_neighbours);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_neighbours);
      __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 78, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_invert, Py_True) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 78, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_neigh), __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 78, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 78, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_neigh, ((PyArrayObject *)__pyx_t_7));
      __pyx_t_7 = 0;

      /* "GBM.pyx":79
 *             neigh = neigh[Cell_pop[neigh] <= Qup]
 *             neigh = neigh[np.in1d(neigh,neighbours,invert=True)]
 *             nsize = len(neigh)             # <<<<<<<<<<<<<<
 *             if nsize > 0:
 *                 neighbours.extend(list(neigh))
 */
      __pyx_t_2 = PyObject_Length(((PyObject *)__pyx_v_neigh)); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 79, __pyx_L1_error)
      __pyx_v_nsize = __pyx_t_2;

      /* "GBM.pyx":80
 *             neigh = neigh[np.in1d(neigh,neighbours,invert=True)]
 *             nsize = len(neigh)
 *             if nsize > 0:             # <<<<<<<<<<<<<<
 *                 neighbours.extend(list(neigh))
 *                 dead_neighbours.extend([np.sum(Dead[neigh])])
 */
      __pyx_t_10 = ((__pyx_v_nsize > 0) != 0);
      if (__pyx_t_10) {

        /* "GBM.pyx":81
 *             nsize = len(neigh)
 *             if nsize > 0:
 *                 neighbours.extend(list(neigh))             # <<<<<<<<<<<<<<
 *                 dead_neighbours.extend([np.sum(Dead[neigh])])
 *                 qui_GSC.extend([np.sum(GSC[neigh])])
 */
        __pyx_t_7 = PySequence_List(((PyObject *)__pyx_v_neigh)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 81, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_14 = __Pyx_PyList_Extend(__pyx_v_neighbours, __pyx_t_7); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 81, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "GBM.pyx":82
 *             if nsize > 0:
 *                 neighbours.extend(list(neigh))
 *                 dead_neighbours.extend([np.sum(Dead[neigh])])             # <<<<<<<<<<<<<<
 *                 qui_GSC.extend([np.sum(GSC[neigh])])
 *                 qui_GPP.extend([np.sum(GPP[neigh])])
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 82, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_sum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Dead), ((PyObject *)__pyx_v_neigh)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 82, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_13 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_7 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_13, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_8);
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 82, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_dead_neighbours, __pyx_t_7); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 82, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        (void)(__pyx_t_14);

        /* "GBM.pyx":83
 *                 neighbours.extend(list(neigh))
 *                 dead_neighbours.extend([np.sum(Dead[neigh])])
 *                 qui_GSC.extend([np.sum(GSC[neigh])])             # <<<<<<<<<<<<<<
 *                 qui_GPP.extend([np.sum(GPP[neigh])])
 *                 qui_GDS.extend([np.sum(GDS[neigh])])
 */
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_sum); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 83, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_GSC), ((PyObject *)__pyx_v_neigh)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_13 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_7 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_13, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_1);
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 83, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_qui_GSC, __pyx_t_7); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 83, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        (void)(__pyx_t_14);

        /* "GBM.pyx":84
 *                 dead_neighbours.extend([np.sum(Dead[neigh])])
 *                 qui_GSC.extend([np.sum(GSC[neigh])])
 *                 qui_GPP.extend([np.sum(GPP[neigh])])             # <<<<<<<<<<<<<<
 *                 qui_GDS.extend([np.sum(GDS[neigh])])
 *                 cluster.extend([j])
 */
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_sum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_GPP), ((PyObject *)__pyx_v_neigh)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_13 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_7 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_13, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_8);
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_qui_GPP, __pyx_t_7); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        (void)(__pyx_t_14);

        /* "GBM.pyx":85
 *                 qui_GSC.extend([np.sum(GSC[neigh])])
 *                 qui_GPP.extend([np.sum(GPP[neigh])])
 *                 qui_GDS.extend([np.sum(GDS[neigh])])             # <<<<<<<<<<<<<<
 *                 cluster.extend([j])
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_sum); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 85, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_GDS), ((PyObject *)__pyx_v_neigh)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_13 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_7 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_13, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_1);
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 85, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_qui_GDS, __pyx_t_7); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 85, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        (void)(__pyx_t_14);

        /* "GBM.pyx":86
 *                 qui_GPP.extend([np.sum(GPP[neigh])])
 *                 qui_GDS.extend([np.sum(GDS[neigh])])
 *                 cluster.extend([j])             # <<<<<<<<<<<<<<
 * 
 *     csize = len(cluster)
 */
        __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 86, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_cluster, __pyx_t_7); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 86, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "GBM.pyx":80
 *             neigh = neigh[np.in1d(neigh,neighbours,invert=True)]
 *             nsize = len(neigh)
 *             if nsize > 0:             # <<<<<<<<<<<<<<
 *                 neighbours.extend(list(neigh))
 *                 dead_neighbours.extend([np.sum(Dead[neigh])])
 */
      }

      /* "GBM.pyx":76
 * 
 *         # Otherwise, you might make a cluster of dead and living cells (GSC, GPP, GDS) of at least Qup cells.
 *         elif j not in neighbours and nsize > 0. and (cellcount > 0. and cellcount < float(Qup)) and nsize_trap == 0:             # <<<<<<<<<<<<<<
 *             neigh = neigh[Cell_pop[neigh] <= Qup]
 *             neigh = neigh[np.in1d(neigh,neighbours,invert=True)]
 */
    }
    __pyx_L5:;
  }

  /* "GBM.pyx":88
 *                 cluster.extend([j])
 * 
 *     csize = len(cluster)             # <<<<<<<<<<<<<<
 * 
 *     # Move cells to cluster position.
 */
  __pyx_t_2 = PyList_GET_SIZE(__pyx_v_cluster); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 88, __pyx_L1_error)
  __pyx_v_csize = __pyx_t_2;

  /* "GBM.pyx":91
 * 
 *     # Move cells to cluster position.
 *     for j in range(csize):             # <<<<<<<<<<<<<<
 *         i = cluster[j]
 *         Dead[i] += dead_neighbours[j]
 */
  __pyx_t_3 = __pyx_v_csize;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_j = __pyx_t_5;

    /* "GBM.pyx":92
 *     # Move cells to cluster position.
 *     for j in range(csize):
 *         i = cluster[j]             # <<<<<<<<<<<<<<
 *         Dead[i] += dead_neighbours[j]
 *         GSC[i] += qui_GSC[j]
 */
    __pyx_t_15 = __Pyx_PyInt_As_int(PyList_GET_ITEM(__pyx_v_cluster, __pyx_v_j)); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 92, __pyx_L1_error)
    __pyx_v_i = __pyx_t_15;

    /* "GBM.pyx":93
 *     for j in range(csize):
 *         i = cluster[j]
 *         Dead[i] += dead_neighbours[j]             # <<<<<<<<<<<<<<
 *         GSC[i] += qui_GSC[j]
 *         GPP[i] += qui_GPP[j]
 */
    __pyx_t_15 = __pyx_v_i;
    __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_Dead), __pyx_t_15, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_t_7, PyList_GET_ITEM(__pyx_v_dead_neighbours, __pyx_v_j)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Dead), __pyx_t_15, __pyx_t_8, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "GBM.pyx":94
 *         i = cluster[j]
 *         Dead[i] += dead_neighbours[j]
 *         GSC[i] += qui_GSC[j]             # <<<<<<<<<<<<<<
 *         GPP[i] += qui_GPP[j]
 *         GDS[i] += qui_GDS[j]
 */
    __pyx_t_15 = __pyx_v_i;
    __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_GSC), __pyx_t_15, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PyNumber_InPlaceAdd(__pyx_t_8, PyList_GET_ITEM(__pyx_v_qui_GSC, __pyx_v_j)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GSC), __pyx_t_15, __pyx_t_7, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "GBM.pyx":95
 *         Dead[i] += dead_neighbours[j]
 *         GSC[i] += qui_GSC[j]
 *         GPP[i] += qui_GPP[j]             # <<<<<<<<<<<<<<
 *         GDS[i] += qui_GDS[j]
 * 
 */
    __pyx_t_15 = __pyx_v_i;
    __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_GPP), __pyx_t_15, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_t_7, PyList_GET_ITEM(__pyx_v_qui_GPP, __pyx_v_j)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GPP), __pyx_t_15, __pyx_t_8, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "GBM.pyx":96
 *         GSC[i] += qui_GSC[j]
 *         GPP[i] += qui_GPP[j]
 *         GDS[i] += qui_GDS[j]             # <<<<<<<<<<<<<<
 * 
 *     # Delete previous positions.
 */
    __pyx_t_15 = __pyx_v_i;
    __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_GDS), __pyx_t_15, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PyNumber_InPlaceAdd(__pyx_t_8, PyList_GET_ITEM(__pyx_v_qui_GDS, __pyx_v_j)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GDS), __pyx_t_15, __pyx_t_7, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }

  /* "GBM.pyx":99
 * 
 *     # Delete previous positions.
 *     for j in sorted(set(neighbours), reverse=True):             # <<<<<<<<<<<<<<
 *         Dead = np.delete(Dead, j)
 *         Rim = np.delete(Rim, j)
 */
  __pyx_t_7 = PySet_New(__pyx_v_neighbours); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_reverse, Py_True) < 0) __PYX_ERR(0, 99, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_7 = __pyx_t_1; __Pyx_INCREF(__pyx_t_7); __pyx_t_2 = 0;
    __pyx_t_16 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_16 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 99, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_16)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 99, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_7, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 99, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_7, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_16(__pyx_t_7);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 99, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 99, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_j = __pyx_t_3;

    /* "GBM.pyx":100
 *     # Delete previous positions.
 *     for j in sorted(set(neighbours), reverse=True):
 *         Dead = np.delete(Dead, j)             # <<<<<<<<<<<<<<
 *         Rim = np.delete(Rim, j)
 *         GSC = np.delete(GSC, j)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_delete); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_17 = NULL;
    __pyx_t_3 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
      __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_13);
      if (likely(__pyx_t_17)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_17);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_13, function);
        __pyx_t_3 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_13)) {
      PyObject *__pyx_temp[3] = {__pyx_t_17, ((PyObject *)__pyx_v_Dead), __pyx_t_8};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_3, 2+__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
      PyObject *__pyx_temp[3] = {__pyx_t_17, ((PyObject *)__pyx_v_Dead), __pyx_t_8};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_3, 2+__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_18 = PyTuple_New(2+__pyx_t_3); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      if (__pyx_t_17) {
        __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_17); __pyx_t_17 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_Dead));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_Dead));
      PyTuple_SET_ITEM(__pyx_t_18, 0+__pyx_t_3, ((PyObject *)__pyx_v_Dead));
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_18, 1+__pyx_t_3, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    }
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_Dead, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "GBM.pyx":101
 *     for j in sorted(set(neighbours), reverse=True):
 *         Dead = np.delete(Dead, j)
 *         Rim = np.delete(Rim, j)             # <<<<<<<<<<<<<<
 *         GSC = np.delete(GSC, j)
 *         GPP = np.delete(GPP, j)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_delete); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_8 = NULL;
    __pyx_t_3 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
        __pyx_t_3 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, ((PyObject *)__pyx_v_Rim), __pyx_t_13};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_3, 2+__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, ((PyObject *)__pyx_v_Rim), __pyx_t_13};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_3, 2+__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    } else
    #endif
    {
      __pyx_t_17 = PyTuple_New(2+__pyx_t_3); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_Rim));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_Rim));
      PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_3, ((PyObject *)__pyx_v_Rim));
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_3, __pyx_t_13);
      __pyx_t_13 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_Rim, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "GBM.pyx":102
 *         Dead = np.delete(Dead, j)
 *         Rim = np.delete(Rim, j)
 *         GSC = np.delete(GSC, j)             # <<<<<<<<<<<<<<
 *         GPP = np.delete(GPP, j)
 *         GDS = np.delete(GDS, j)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_np); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_delete); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_13 = NULL;
    __pyx_t_3 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_17);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_17, function);
        __pyx_t_3 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[3] = {__pyx_t_13, ((PyObject *)__pyx_v_GSC), __pyx_t_18};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_3, 2+__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[3] = {__pyx_t_13, ((PyObject *)__pyx_v_GSC), __pyx_t_18};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_3, 2+__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_13) {
        __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_13); __pyx_t_13 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_GSC));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_GSC));
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_3, ((PyObject *)__pyx_v_GSC));
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_3, __pyx_t_18);
      __pyx_t_18 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_GSC, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "GBM.pyx":103
 *         Rim = np.delete(Rim, j)
 *         GSC = np.delete(GSC, j)
 *         GPP = np.delete(GPP, j)             # <<<<<<<<<<<<<<
 *         GDS = np.delete(GDS, j)
 *         del Xs_r[j]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_np); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_delete); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_17 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_18 = NULL;
    __pyx_t_3 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_18)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_18);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_3 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_18, ((PyObject *)__pyx_v_GPP), __pyx_t_17};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_3, 2+__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_18, ((PyObject *)__pyx_v_GPP), __pyx_t_17};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_3, 2+__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    } else
    #endif
    {
      __pyx_t_13 = PyTuple_New(2+__pyx_t_3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 103, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      if (__pyx_t_18) {
        __Pyx_GIVEREF(__pyx_t_18); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_18); __pyx_t_18 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_GPP));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_GPP));
      PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_3, ((PyObject *)__pyx_v_GPP));
      __Pyx_GIVEREF(__pyx_t_17);
      PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_3, __pyx_t_17);
      __pyx_t_17 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_GPP, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "GBM.pyx":104
 *         GSC = np.delete(GSC, j)
 *         GPP = np.delete(GPP, j)
 *         GDS = np.delete(GDS, j)             # <<<<<<<<<<<<<<
 *         del Xs_r[j]
 *         del Ys_r[j]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_delete); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_17 = NULL;
    __pyx_t_3 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
      __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_13);
      if (likely(__pyx_t_17)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_17);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_13, function);
        __pyx_t_3 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_13)) {
      PyObject *__pyx_temp[3] = {__pyx_t_17, ((PyObject *)__pyx_v_GDS), __pyx_t_8};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_3, 2+__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
      PyObject *__pyx_temp[3] = {__pyx_t_17, ((PyObject *)__pyx_v_GDS), __pyx_t_8};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_3, 2+__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_18 = PyTuple_New(2+__pyx_t_3); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 104, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      if (__pyx_t_17) {
        __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_17); __pyx_t_17 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_GDS));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_GDS));
      PyTuple_SET_ITEM(__pyx_t_18, 0+__pyx_t_3, ((PyObject *)__pyx_v_GDS));
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_18, 1+__pyx_t_3, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    }
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_GDS, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "GBM.pyx":105
 *         GPP = np.delete(GPP, j)
 *         GDS = np.delete(GDS, j)
 *         del Xs_r[j]             # <<<<<<<<<<<<<<
 *         del Ys_r[j]
 *         Discarded.append(points[j])
 */
    if (unlikely(__pyx_v_Xs_r == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 105, __pyx_L1_error)
    }
    if (unlikely(__Pyx_DelItemInt(__pyx_v_Xs_r, __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 1, 0, 0) < 0)) __PYX_ERR(0, 105, __pyx_L1_error)

    /* "GBM.pyx":106
 *         GDS = np.delete(GDS, j)
 *         del Xs_r[j]
 *         del Ys_r[j]             # <<<<<<<<<<<<<<
 *         Discarded.append(points[j])
 * 
 */
    if (unlikely(__pyx_v_Ys_r == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 106, __pyx_L1_error)
    }
    if (unlikely(__Pyx_DelItemInt(__pyx_v_Ys_r, __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 1, 0, 0) < 0)) __PYX_ERR(0, 106, __pyx_L1_error)

    /* "GBM.pyx":107
 *         del Xs_r[j]
 *         del Ys_r[j]
 *         Discarded.append(points[j])             # <<<<<<<<<<<<<<
 * 
 *     Alive = GSC + GPP + GDS
 */
    if (unlikely(__pyx_v_Discarded == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(0, 107, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_points), __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_Discarded, __pyx_t_1); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "GBM.pyx":99
 * 
 *     # Delete previous positions.
 *     for j in sorted(set(neighbours), reverse=True):             # <<<<<<<<<<<<<<
 *         Dead = np.delete(Dead, j)
 *         Rim = np.delete(Rim, j)
 */
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "GBM.pyx":109
 *         Discarded.append(points[j])
 * 
 *     Alive = GSC + GPP + GDS             # <<<<<<<<<<<<<<
 *     Cell_pop = Dead + Alive
 * 
 */
  __pyx_t_7 = PyNumber_Add(((PyObject *)__pyx_v_GSC), ((PyObject *)__pyx_v_GPP)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = PyNumber_Add(__pyx_t_7, ((PyObject *)__pyx_v_GDS)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_Alive, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "GBM.pyx":110
 * 
 *     Alive = GSC + GPP + GDS
 *     Cell_pop = Dead + Alive             # <<<<<<<<<<<<<<
 * 
 *     # Re-initialize certain arrays.
 */
  __pyx_t_1 = PyNumber_Add(((PyObject *)__pyx_v_Dead), ((PyObject *)__pyx_v_Alive)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_Cell_pop, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "GBM.pyx":113
 * 
 *     # Re-initialize certain arrays.
 *     points = np.append(Xs_r,Ys_r,axis=1)             # <<<<<<<<<<<<<<
 * 
 *     tri = Delaunay(points)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_append); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_Xs_r);
  __Pyx_GIVEREF(__pyx_v_Xs_r);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_Xs_r);
  __Pyx_INCREF(__pyx_v_Ys_r);
  __Pyx_GIVEREF(__pyx_v_Ys_r);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_Ys_r);
  __pyx_t_13 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_axis, __pyx_int_1) < 0) __PYX_ERR(0, 113, __pyx_L1_error)
  __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, __pyx_t_13); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (!(likely(((__pyx_t_18) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_18, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_points, ((PyArrayObject *)__pyx_t_18));
  __pyx_t_18 = 0;

  /* "GBM.pyx":115
 *     points = np.append(Xs_r,Ys_r,axis=1)
 * 
 *     tri = Delaunay(points)             # <<<<<<<<<<<<<<
 * 
 *     (indptr, indices) = tri.vertex_neighbor_vertices
 */
  __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_Delaunay); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_13);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_13, function);
    }
  }
  __pyx_t_18 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_1, ((PyObject *)__pyx_v_points)) : __Pyx_PyObject_CallOneArg(__pyx_t_13, ((PyObject *)__pyx_v_points));
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF_SET(__pyx_v_tri, __pyx_t_18);
  __pyx_t_18 = 0;

  /* "GBM.pyx":117
 *     tri = Delaunay(points)
 * 
 *     (indptr, indices) = tri.vertex_neighbor_vertices             # <<<<<<<<<<<<<<
 * 
 *     gsize = len(points)
 */
  __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_v_tri, __pyx_n_s_vertex_neighbor_vertices); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  if ((likely(PyTuple_CheckExact(__pyx_t_18))) || (PyList_CheckExact(__pyx_t_18))) {
    PyObject* sequence = __pyx_t_18;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 117, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_13 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_13 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_13);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_13 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_7 = PyObject_GetIter(__pyx_t_18); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_19 = Py_TYPE(__pyx_t_7)->tp_iternext;
    index = 0; __pyx_t_13 = __pyx_t_19(__pyx_t_7); if (unlikely(!__pyx_t_13)) goto __pyx_L24_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_13);
    index = 1; __pyx_t_1 = __pyx_t_19(__pyx_t_7); if (unlikely(!__pyx_t_1)) goto __pyx_L24_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_19(__pyx_t_7), 2) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
    __pyx_t_19 = NULL;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L25_unpacking_done;
    __pyx_L24_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_19 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 117, __pyx_L1_error)
    __pyx_L25_unpacking_done:;
  }
  if (!(likely(((__pyx_t_13) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_13, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 117, __pyx_L1_error)
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_indptr, ((PyArrayObject *)__pyx_t_13));
  __pyx_t_13 = 0;
  __Pyx_DECREF_SET(__pyx_v_indices, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "GBM.pyx":119
 *     (indptr, indices) = tri.vertex_neighbor_vertices
 * 
 *     gsize = len(points)             # <<<<<<<<<<<<<<
 *     index = np.asarray(range(gsize))
 * 
 */
  __pyx_t_2 = PyObject_Length(((PyObject *)__pyx_v_points)); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 119, __pyx_L1_error)
  __pyx_v_gsize = __pyx_t_2;

  /* "GBM.pyx":120
 * 
 *     gsize = len(points)
 *     index = np.asarray(range(gsize))             # <<<<<<<<<<<<<<
 * 
 *     return gsize, GSC, GPP, GDS, Alive, Cell_pop, Dead, Rim, Xs_r, Ys_r, Discarded, points, tri, index, indptr, indices
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_gsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_13);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_13, function);
    }
  }
  __pyx_t_18 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_1, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (!(likely(((__pyx_t_18) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_18, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_index, ((PyArrayObject *)__pyx_t_18));
  __pyx_t_18 = 0;

  /* "GBM.pyx":122
 *     index = np.asarray(range(gsize))
 * 
 *     return gsize, GSC, GPP, GDS, Alive, Cell_pop, Dead, Rim, Xs_r, Ys_r, Discarded, points, tri, index, indptr, indices             # <<<<<<<<<<<<<<
 * 
 * #=========================================
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_18 = PyInt_FromSsize_t(__pyx_v_gsize); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_13 = PyTuple_New(16); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_18);
  PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_18);
  __Pyx_INCREF(((PyObject *)__pyx_v_GSC));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_GSC));
  PyTuple_SET_ITEM(__pyx_t_13, 1, ((PyObject *)__pyx_v_GSC));
  __Pyx_INCREF(((PyObject *)__pyx_v_GPP));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_GPP));
  PyTuple_SET_ITEM(__pyx_t_13, 2, ((PyObject *)__pyx_v_GPP));
  __Pyx_INCREF(((PyObject *)__pyx_v_GDS));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_GDS));
  PyTuple_SET_ITEM(__pyx_t_13, 3, ((PyObject *)__pyx_v_GDS));
  __Pyx_INCREF(((PyObject *)__pyx_v_Alive));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_Alive));
  PyTuple_SET_ITEM(__pyx_t_13, 4, ((PyObject *)__pyx_v_Alive));
  __Pyx_INCREF(((PyObject *)__pyx_v_Cell_pop));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_Cell_pop));
  PyTuple_SET_ITEM(__pyx_t_13, 5, ((PyObject *)__pyx_v_Cell_pop));
  __Pyx_INCREF(((PyObject *)__pyx_v_Dead));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_Dead));
  PyTuple_SET_ITEM(__pyx_t_13, 6, ((PyObject *)__pyx_v_Dead));
  __Pyx_INCREF(((PyObject *)__pyx_v_Rim));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_Rim));
  PyTuple_SET_ITEM(__pyx_t_13, 7, ((PyObject *)__pyx_v_Rim));
  __Pyx_INCREF(__pyx_v_Xs_r);
  __Pyx_GIVEREF(__pyx_v_Xs_r);
  PyTuple_SET_ITEM(__pyx_t_13, 8, __pyx_v_Xs_r);
  __Pyx_INCREF(__pyx_v_Ys_r);
  __Pyx_GIVEREF(__pyx_v_Ys_r);
  PyTuple_SET_ITEM(__pyx_t_13, 9, __pyx_v_Ys_r);
  __Pyx_INCREF(__pyx_v_Discarded);
  __Pyx_GIVEREF(__pyx_v_Discarded);
  PyTuple_SET_ITEM(__pyx_t_13, 10, __pyx_v_Discarded);
  __Pyx_INCREF(((PyObject *)__pyx_v_points));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
  PyTuple_SET_ITEM(__pyx_t_13, 11, ((PyObject *)__pyx_v_points));
  __Pyx_INCREF(__pyx_v_tri);
  __Pyx_GIVEREF(__pyx_v_tri);
  PyTuple_SET_ITEM(__pyx_t_13, 12, __pyx_v_tri);
  __Pyx_INCREF(((PyObject *)__pyx_v_index));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_index));
  PyTuple_SET_ITEM(__pyx_t_13, 13, ((PyObject *)__pyx_v_index));
  __Pyx_INCREF(((PyObject *)__pyx_v_indptr));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_indptr));
  PyTuple_SET_ITEM(__pyx_t_13, 14, ((PyObject *)__pyx_v_indptr));
  __Pyx_INCREF(((PyObject *)__pyx_v_indices));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_indices));
  PyTuple_SET_ITEM(__pyx_t_13, 15, ((PyObject *)__pyx_v_indices));
  __pyx_t_18 = 0;
  __pyx_r = __pyx_t_13;
  __pyx_t_13 = 0;
  goto __pyx_L0;

  /* "GBM.pyx":36
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def Dead_cluster(np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, np.ndarray Alive, np.ndarray Cell_pop, np.ndarray Dead, np.ndarray Rim, list Xs_r, list Ys_r, list Discarded, np.ndarray points, tri, np.ndarray index, np.ndarray indptr, np.ndarray indices, int Dup, int Qup, double trapped):             # <<<<<<<<<<<<<<
 * 
 *     cdef list neighbours = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("GBM.Dead_cluster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_neighbours);
  __Pyx_XDECREF(__pyx_v_dead_neighbours);
  __Pyx_XDECREF(__pyx_v_qui_GSC);
  __Pyx_XDECREF(__pyx_v_qui_GPP);
  __Pyx_XDECREF(__pyx_v_qui_GDS);
  __Pyx_XDECREF(__pyx_v_cluster);
  __Pyx_XDECREF((PyObject *)__pyx_v_neigh);
  __Pyx_XDECREF((PyObject *)__pyx_v_GSC);
  __Pyx_XDECREF((PyObject *)__pyx_v_GPP);
  __Pyx_XDECREF((PyObject *)__pyx_v_GDS);
  __Pyx_XDECREF((PyObject *)__pyx_v_Alive);
  __Pyx_XDECREF((PyObject *)__pyx_v_Cell_pop);
  __Pyx_XDECREF((PyObject *)__pyx_v_Dead);
  __Pyx_XDECREF((PyObject *)__pyx_v_Rim);
  __Pyx_XDECREF((PyObject *)__pyx_v_points);
  __Pyx_XDECREF(__pyx_v_tri);
  __Pyx_XDECREF((PyObject *)__pyx_v_index);
  __Pyx_XDECREF((PyObject *)__pyx_v_indptr);
  __Pyx_XDECREF((PyObject *)__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "GBM.pyx":130
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def stocev(np.ndarray Ox_irr, double O2_crit, double Pdie, double Pprol, double Pdivi):             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t gsize = len(Ox_irr)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3GBM_3stocev(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3GBM_3stocev = {"stocev", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3GBM_3stocev, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3GBM_3stocev(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_Ox_irr = 0;
  double __pyx_v_O2_crit;
  double __pyx_v_Pdie;
  double __pyx_v_Pprol;
  double __pyx_v_Pdivi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stocev (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Ox_irr,&__pyx_n_s_O2_crit,&__pyx_n_s_Pdie,&__pyx_n_s_Pprol,&__pyx_n_s_Pdivi,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Ox_irr)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_O2_crit)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("stocev", 1, 5, 5, 1); __PYX_ERR(0, 130, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Pdie)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("stocev", 1, 5, 5, 2); __PYX_ERR(0, 130, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Pprol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("stocev", 1, 5, 5, 3); __PYX_ERR(0, 130, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Pdivi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("stocev", 1, 5, 5, 4); __PYX_ERR(0, 130, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "stocev") < 0)) __PYX_ERR(0, 130, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_Ox_irr = ((PyArrayObject *)values[0]);
    __pyx_v_O2_crit = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_O2_crit == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 130, __pyx_L3_error)
    __pyx_v_Pdie = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Pdie == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 130, __pyx_L3_error)
    __pyx_v_Pprol = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_Pprol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 130, __pyx_L3_error)
    __pyx_v_Pdivi = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_Pdivi == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 130, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stocev", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 130, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("GBM.stocev", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Ox_irr), __pyx_ptype_5numpy_ndarray, 1, "Ox_irr", 0))) __PYX_ERR(0, 130, __pyx_L1_error)
  __pyx_r = __pyx_pf_3GBM_2stocev(__pyx_self, __pyx_v_Ox_irr, __pyx_v_O2_crit, __pyx_v_Pdie, __pyx_v_Pprol, __pyx_v_Pdivi);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3GBM_2stocev(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_Ox_irr, double __pyx_v_O2_crit, double __pyx_v_Pdie, double __pyx_v_Pprol, double __pyx_v_Pdivi) {
  Py_ssize_t __pyx_v_gsize;
  PyArrayObject *__pyx_v_Pmove = 0;
  PyArrayObject *__pyx_v_PDiv = 0;
  PyArrayObject *__pyx_v_PDeath = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stocev", 0);

  /* "GBM.pyx":132
 * def stocev(np.ndarray Ox_irr, double O2_crit, double Pdie, double Pprol, double Pdivi):
 * 
 *     cdef Py_ssize_t gsize = len(Ox_irr)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray Pmove, PDiv, PDeath
 * 
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_Ox_irr)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 132, __pyx_L1_error)
  __pyx_v_gsize = __pyx_t_1;

  /* "GBM.pyx":135
 *     cdef np.ndarray Pmove, PDiv, PDeath
 * 
 *     Pmove = np.ones((3, gsize))             # <<<<<<<<<<<<<<
 *     Pmove[0,:] = Pmove[0,:]*Pprol
 *     Pmove[1,:] = Pmove[1,:]*Pprol*25.
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ones); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_gsize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_int_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 135, __pyx_L1_error)
  __pyx_v_Pmove = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "GBM.pyx":136
 * 
 *     Pmove = np.ones((3, gsize))
 *     Pmove[0,:] = Pmove[0,:]*Pprol             # <<<<<<<<<<<<<<
 *     Pmove[1,:] = Pmove[1,:]*Pprol*25.
 *     Pmove[2,:] = Pmove[2,:]*Pprol
 */
  __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Pmove), __pyx_tuple__2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_Pprol); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_Pmove), __pyx_tuple__2, __pyx_t_5) < 0)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "GBM.pyx":137
 *     Pmove = np.ones((3, gsize))
 *     Pmove[0,:] = Pmove[0,:]*Pprol
 *     Pmove[1,:] = Pmove[1,:]*Pprol*25.             # <<<<<<<<<<<<<<
 *     Pmove[2,:] = Pmove[2,:]*Pprol
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Pmove), __pyx_tuple__3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_Pprol); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_float_25_); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_Pmove), __pyx_tuple__3, __pyx_t_4) < 0)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "GBM.pyx":138
 *     Pmove[0,:] = Pmove[0,:]*Pprol
 *     Pmove[1,:] = Pmove[1,:]*Pprol*25.
 *     Pmove[2,:] = Pmove[2,:]*Pprol             # <<<<<<<<<<<<<<
 * 
 *     PDiv = np.ones((3, gsize))
 */
  __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Pmove), __pyx_tuple__4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_Pprol); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_Pmove), __pyx_tuple__4, __pyx_t_5) < 0)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "GBM.pyx":140
 *     Pmove[2,:] = Pmove[2,:]*Pprol
 * 
 *     PDiv = np.ones((3, gsize))             # <<<<<<<<<<<<<<
 *     PDiv[0,:] = PDiv[0,:]*Pdivi
 *     PDiv[1,:] = PDiv[1,:]*Pdivi*0.6
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ones); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_gsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 140, __pyx_L1_error)
  __pyx_v_PDiv = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "GBM.pyx":141
 * 
 *     PDiv = np.ones((3, gsize))
 *     PDiv[0,:] = PDiv[0,:]*Pdivi             # <<<<<<<<<<<<<<
 *     PDiv[1,:] = PDiv[1,:]*Pdivi*0.6
 *     PDiv[2,:] = PDiv[2,:]*0.00
 */
  __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_PDiv), __pyx_tuple__2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_Pdivi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_PDiv), __pyx_tuple__2, __pyx_t_3) < 0)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "GBM.pyx":142
 *     PDiv = np.ones((3, gsize))
 *     PDiv[0,:] = PDiv[0,:]*Pdivi
 *     PDiv[1,:] = PDiv[1,:]*Pdivi*0.6             # <<<<<<<<<<<<<<
 *     PDiv[2,:] = PDiv[2,:]*0.00
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_PDiv), __pyx_tuple__3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_Pdivi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_5, __pyx_float_0_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_PDiv), __pyx_tuple__3, __pyx_t_4) < 0)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "GBM.pyx":143
 *     PDiv[0,:] = PDiv[0,:]*Pdivi
 *     PDiv[1,:] = PDiv[1,:]*Pdivi*0.6
 *     PDiv[2,:] = PDiv[2,:]*0.00             # <<<<<<<<<<<<<<
 * 
 *     PDeath = np.ones((3, gsize))
 */
  __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_PDiv), __pyx_tuple__4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_4, __pyx_float_0_00); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_PDiv), __pyx_tuple__4, __pyx_t_5) < 0)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "GBM.pyx":145
 *     PDiv[2,:] = PDiv[2,:]*0.00
 * 
 *     PDeath = np.ones((3, gsize))             # <<<<<<<<<<<<<<
 *     PDeath[0,:] = PDeath[0,:]*0.00 + np.asarray(np.concatenate(np.where(Ox_irr < O2_crit, 1., 0.)))
 *     PDeath[1,:] = PDeath[1,:]*Pdie + np.asarray(np.concatenate(np.where(Ox_irr < O2_crit, 1., 0.)))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_ones); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_gsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 145, __pyx_L1_error)
  __pyx_v_PDeath = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "GBM.pyx":146
 * 
 *     PDeath = np.ones((3, gsize))
 *     PDeath[0,:] = PDeath[0,:]*0.00 + np.asarray(np.concatenate(np.where(Ox_irr < O2_crit, 1., 0.)))             # <<<<<<<<<<<<<<
 *     PDeath[1,:] = PDeath[1,:]*Pdie + np.asarray(np.concatenate(np.where(Ox_irr < O2_crit, 1., 0.)))
 *     PDeath[2,:] = PDeath[2,:]*Pdie*3.0 + np.asarray(np.concatenate(np.where(Ox_irr < O2_crit, 1., 0.)))
 */
  __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_PDeath), __pyx_tuple__2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_5, __pyx_float_0_00); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_where); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_O2_crit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = PyObject_RichCompare(((PyObject *)__pyx_v_Ox_irr), __pyx_t_8, Py_LT); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_t_10, __pyx_float_1_, __pyx_float_0_};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_t_10, __pyx_float_1_, __pyx_float_0_};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else
  #endif
  {
    __pyx_t_12 = PyTuple_New(3+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_11, __pyx_t_10);
    __Pyx_INCREF(__pyx_float_1_);
    __Pyx_GIVEREF(__pyx_float_1_);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_11, __pyx_float_1_);
    __Pyx_INCREF(__pyx_float_0_);
    __Pyx_GIVEREF(__pyx_float_0_);
    PyTuple_SET_ITEM(__pyx_t_12, 2+__pyx_t_11, __pyx_float_0_);
    __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_12, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_2 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_9, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_PDeath), __pyx_tuple__2, __pyx_t_4) < 0)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "GBM.pyx":147
 *     PDeath = np.ones((3, gsize))
 *     PDeath[0,:] = PDeath[0,:]*0.00 + np.asarray(np.concatenate(np.where(Ox_irr < O2_crit, 1., 0.)))
 *     PDeath[1,:] = PDeath[1,:]*Pdie + np.asarray(np.concatenate(np.where(Ox_irr < O2_crit, 1., 0.)))             # <<<<<<<<<<<<<<
 *     PDeath[2,:] = PDeath[2,:]*Pdie*3.0 + np.asarray(np.concatenate(np.where(Ox_irr < O2_crit, 1., 0.)))
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_PDeath), __pyx_tuple__3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_Pdie); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_where); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_O2_crit); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyObject_RichCompare(((PyObject *)__pyx_v_Ox_irr), __pyx_t_9, Py_LT); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_12)) {
    PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_t_10, __pyx_float_1_, __pyx_float_0_};
    __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {
    PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_t_10, __pyx_float_1_, __pyx_float_0_};
    __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(3+__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_11, __pyx_t_10);
    __Pyx_INCREF(__pyx_float_1_);
    __Pyx_GIVEREF(__pyx_float_1_);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_11, __pyx_float_1_);
    __Pyx_INCREF(__pyx_float_0_);
    __Pyx_GIVEREF(__pyx_float_0_);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_11, __pyx_float_0_);
    __pyx_t_10 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_12, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_PDeath), __pyx_tuple__3, __pyx_t_2) < 0)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "GBM.pyx":148
 *     PDeath[0,:] = PDeath[0,:]*0.00 + np.asarray(np.concatenate(np.where(Ox_irr < O2_crit, 1., 0.)))
 *     PDeath[1,:] = PDeath[1,:]*Pdie + np.asarray(np.concatenate(np.where(Ox_irr < O2_crit, 1., 0.)))
 *     PDeath[2,:] = PDeath[2,:]*Pdie*3.0 + np.asarray(np.concatenate(np.where(Ox_irr < O2_crit, 1., 0.)))             # <<<<<<<<<<<<<<
 * 
 *     return Pmove, PDiv, PDeath
 */
  __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_PDeath), __pyx_tuple__4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_Pdie); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_3, __pyx_float_3_0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_where); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = PyFloat_FromDouble(__pyx_v_O2_crit); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_10 = PyObject_RichCompare(((PyObject *)__pyx_v_Ox_irr), __pyx_t_12, Py_LT); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[4] = {__pyx_t_12, __pyx_t_10, __pyx_float_1_, __pyx_float_0_};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[4] = {__pyx_t_12, __pyx_t_10, __pyx_float_1_, __pyx_float_0_};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(3+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_12) {
      __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_12); __pyx_t_12 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_11, __pyx_t_10);
    __Pyx_INCREF(__pyx_float_1_);
    __Pyx_GIVEREF(__pyx_float_1_);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_11, __pyx_float_1_);
    __Pyx_INCREF(__pyx_float_0_);
    __Pyx_GIVEREF(__pyx_float_0_);
    PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_11, __pyx_float_0_);
    __pyx_t_10 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_2 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_PDeath), __pyx_tuple__4, __pyx_t_4) < 0)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "GBM.pyx":150
 *     PDeath[2,:] = PDeath[2,:]*Pdie*3.0 + np.asarray(np.concatenate(np.where(Ox_irr < O2_crit, 1., 0.)))
 * 
 *     return Pmove, PDiv, PDeath             # <<<<<<<<<<<<<<
 * 
 * #=========================================
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(((PyObject *)__pyx_v_Pmove));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_Pmove));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_Pmove));
  __Pyx_INCREF(((PyObject *)__pyx_v_PDiv));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_PDiv));
  PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_v_PDiv));
  __Pyx_INCREF(((PyObject *)__pyx_v_PDeath));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_PDeath));
  PyTuple_SET_ITEM(__pyx_t_4, 2, ((PyObject *)__pyx_v_PDeath));
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "GBM.pyx":130
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def stocev(np.ndarray Ox_irr, double O2_crit, double Pdie, double Pprol, double Pdivi):             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t gsize = len(Ox_irr)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("GBM.stocev", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_Pmove);
  __Pyx_XDECREF((PyObject *)__pyx_v_PDiv);
  __Pyx_XDECREF((PyObject *)__pyx_v_PDeath);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "GBM.pyx":158
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def ext_grid(int gsize, np.ndarray points, np.ndarray Alive, np.ndarray index, np.ndarray Rim, tree, np.ndarray phs, list Discarded, np.ndarray Cell_pop, np.ndarray Dead, np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, double trapped):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i, newcomers
 */

/* Python wrapper */
static PyObject *__pyx_pw_3GBM_5ext_grid(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3GBM_5ext_grid = {"ext_grid", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3GBM_5ext_grid, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3GBM_5ext_grid(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_gsize;
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_Alive = 0;
  PyArrayObject *__pyx_v_index = 0;
  PyArrayObject *__pyx_v_Rim = 0;
  PyObject *__pyx_v_tree = 0;
  PyArrayObject *__pyx_v_phs = 0;
  PyObject *__pyx_v_Discarded = 0;
  PyArrayObject *__pyx_v_Cell_pop = 0;
  PyArrayObject *__pyx_v_Dead = 0;
  PyArrayObject *__pyx_v_GSC = 0;
  PyArrayObject *__pyx_v_GPP = 0;
  PyArrayObject *__pyx_v_GDS = 0;
  double __pyx_v_trapped;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ext_grid (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gsize,&__pyx_n_s_points,&__pyx_n_s_Alive,&__pyx_n_s_index,&__pyx_n_s_Rim,&__pyx_n_s_tree,&__pyx_n_s_phs,&__pyx_n_s_Discarded,&__pyx_n_s_Cell_pop,&__pyx_n_s_Dead,&__pyx_n_s_GSC,&__pyx_n_s_GPP,&__pyx_n_s_GDS,&__pyx_n_s_trapped,0};
    PyObject* values[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gsize)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ext_grid", 1, 14, 14, 1); __PYX_ERR(0, 158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Alive)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ext_grid", 1, 14, 14, 2); __PYX_ERR(0, 158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ext_grid", 1, 14, 14, 3); __PYX_ERR(0, 158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Rim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ext_grid", 1, 14, 14, 4); __PYX_ERR(0, 158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tree)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ext_grid", 1, 14, 14, 5); __PYX_ERR(0, 158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_phs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ext_grid", 1, 14, 14, 6); __PYX_ERR(0, 158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Discarded)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ext_grid", 1, 14, 14, 7); __PYX_ERR(0, 158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Cell_pop)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ext_grid", 1, 14, 14, 8); __PYX_ERR(0, 158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Dead)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ext_grid", 1, 14, 14, 9); __PYX_ERR(0, 158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_GSC)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ext_grid", 1, 14, 14, 10); __PYX_ERR(0, 158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_GPP)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ext_grid", 1, 14, 14, 11); __PYX_ERR(0, 158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_GDS)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ext_grid", 1, 14, 14, 12); __PYX_ERR(0, 158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trapped)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ext_grid", 1, 14, 14, 13); __PYX_ERR(0, 158, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ext_grid") < 0)) __PYX_ERR(0, 158, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 14) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
    }
    __pyx_v_gsize = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_gsize == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 158, __pyx_L3_error)
    __pyx_v_points = ((PyArrayObject *)values[1]);
    __pyx_v_Alive = ((PyArrayObject *)values[2]);
    __pyx_v_index = ((PyArrayObject *)values[3]);
    __pyx_v_Rim = ((PyArrayObject *)values[4]);
    __pyx_v_tree = values[5];
    __pyx_v_phs = ((PyArrayObject *)values[6]);
    __pyx_v_Discarded = ((PyObject*)values[7]);
    __pyx_v_Cell_pop = ((PyArrayObject *)values[8]);
    __pyx_v_Dead = ((PyArrayObject *)values[9]);
    __pyx_v_GSC = ((PyArrayObject *)values[10]);
    __pyx_v_GPP = ((PyArrayObject *)values[11]);
    __pyx_v_GDS = ((PyArrayObject *)values[12]);
    __pyx_v_trapped = __pyx_PyFloat_AsDouble(values[13]); if (unlikely((__pyx_v_trapped == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 158, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ext_grid", 1, 14, 14, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 158, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("GBM.ext_grid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 1, "points", 0))) __PYX_ERR(0, 158, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Alive), __pyx_ptype_5numpy_ndarray, 1, "Alive", 0))) __PYX_ERR(0, 158, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_index), __pyx_ptype_5numpy_ndarray, 1, "index", 0))) __PYX_ERR(0, 158, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Rim), __pyx_ptype_5numpy_ndarray, 1, "Rim", 0))) __PYX_ERR(0, 158, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phs), __pyx_ptype_5numpy_ndarray, 1, "phs", 0))) __PYX_ERR(0, 158, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Discarded), (&PyList_Type), 1, "Discarded", 1))) __PYX_ERR(0, 158, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cell_pop), __pyx_ptype_5numpy_ndarray, 1, "Cell_pop", 0))) __PYX_ERR(0, 158, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Dead), __pyx_ptype_5numpy_ndarray, 1, "Dead", 0))) __PYX_ERR(0, 158, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_GSC), __pyx_ptype_5numpy_ndarray, 1, "GSC", 0))) __PYX_ERR(0, 158, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_GPP), __pyx_ptype_5numpy_ndarray, 1, "GPP", 0))) __PYX_ERR(0, 158, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_GDS), __pyx_ptype_5numpy_ndarray, 1, "GDS", 0))) __PYX_ERR(0, 158, __pyx_L1_error)
  __pyx_r = __pyx_pf_3GBM_4ext_grid(__pyx_self, __pyx_v_gsize, __pyx_v_points, __pyx_v_Alive, __pyx_v_index, __pyx_v_Rim, __pyx_v_tree, __pyx_v_phs, __pyx_v_Discarded, __pyx_v_Cell_pop, __pyx_v_Dead, __pyx_v_GSC, __pyx_v_GPP, __pyx_v_GDS, __pyx_v_trapped);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_3GBM_8ext_grid_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "GBM.pyx":184
 *     # Select only unique points in newpoints
 * 
 *     uni = list(set(tuple(x) for x in newpoints))             # <<<<<<<<<<<<<<
 * 
 *     cdef usize = len(uni)
 */

static PyObject *__pyx_pf_3GBM_8ext_grid_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_3GBM___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_3GBM___pyx_scope_struct_1_genexpr *)__pyx_tp_new_3GBM___pyx_scope_struct_1_genexpr(__pyx_ptype_3GBM___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_3GBM___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 184, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_3GBM___pyx_scope_struct__ext_grid *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_3GBM_8ext_grid_2generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_ext_grid_locals_genexpr, __pyx_n_s_GBM); if (unlikely(!gen)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("GBM.ext_grid.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_3GBM_8ext_grid_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_3GBM___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_3GBM___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 184, __pyx_L1_error)
  __pyx_r = PySet_New(NULL); if (unlikely(!__pyx_r)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_newpoints)) { __Pyx_RaiseClosureNameError("newpoints"); __PYX_ERR(0, 184, __pyx_L1_error) }
  if (likely(PyList_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_newpoints))) || PyTuple_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_newpoints))) {
    __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_newpoints); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_newpoints)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 184, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 184, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 184, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 184, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 184, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 184, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_x);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_x, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_cur_scope->__pyx_v_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(PySet_Add(__pyx_r, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "GBM.pyx":158
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def ext_grid(int gsize, np.ndarray points, np.ndarray Alive, np.ndarray index, np.ndarray Rim, tree, np.ndarray phs, list Discarded, np.ndarray Cell_pop, np.ndarray Dead, np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, double trapped):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i, newcomers
 */

static PyObject *__pyx_pf_3GBM_4ext_grid(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_gsize, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_Alive, PyArrayObject *__pyx_v_index, PyArrayObject *__pyx_v_Rim, PyObject *__pyx_v_tree, PyArrayObject *__pyx_v_phs, PyObject *__pyx_v_Discarded, PyArrayObject *__pyx_v_Cell_pop, PyArrayObject *__pyx_v_Dead, PyArrayObject *__pyx_v_GSC, PyArrayObject *__pyx_v_GPP, PyArrayObject *__pyx_v_GDS, double __pyx_v_trapped) {
  struct __pyx_obj_3GBM___pyx_scope_struct__ext_grid *__pyx_cur_scope;
  int __pyx_v_i;
  int __pyx_v_newcomers;
  int __pyx_v_dsize;
  CYTHON_UNUSED int __pyx_v_nsize;
  PyArrayObject *__pyx_v_point = 0;
  PyArrayObject *__pyx_v_xx = 0;
  PyArrayObject *__pyx_v_Discarded_array = 0;
  int __pyx_v_conditions;
  PyObject *__pyx_v_x_new = 0;
  PyObject *__pyx_v_y_new = 0;
  PyObject *__pyx_v_uni = NULL;
  PyObject *__pyx_v_usize = 0;
  PyObject *__pyx_v_tri = NULL;
  PyObject *__pyx_v_indptr = NULL;
  PyObject *__pyx_v_indices = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  long __pyx_t_14;
  long __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  PyObject *(*__pyx_t_20)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ext_grid", 0);
  __pyx_cur_scope = (struct __pyx_obj_3GBM___pyx_scope_struct__ext_grid *)__pyx_tp_new_3GBM___pyx_scope_struct__ext_grid(__pyx_ptype_3GBM___pyx_scope_struct__ext_grid, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_3GBM___pyx_scope_struct__ext_grid *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 158, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __Pyx_INCREF((PyObject *)__pyx_v_points);
  __Pyx_INCREF((PyObject *)__pyx_v_Alive);
  __Pyx_INCREF((PyObject *)__pyx_v_index);
  __Pyx_INCREF((PyObject *)__pyx_v_Rim);
  __Pyx_INCREF((PyObject *)__pyx_v_Cell_pop);
  __Pyx_INCREF((PyObject *)__pyx_v_Dead);
  __Pyx_INCREF((PyObject *)__pyx_v_GSC);
  __Pyx_INCREF((PyObject *)__pyx_v_GPP);
  __Pyx_INCREF((PyObject *)__pyx_v_GDS);

  /* "GBM.pyx":168
 *     # NOTE: Only checks around single cells!
 * 
 *     newpoints = phs[np.concatenate(list(tree.query_ball_point(tuple(map(list, points[index[Alive==1]])), np.max([trapped/2.-1.,2]))))]             # <<<<<<<<<<<<<<
 *     nsize = len(newpoints)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_tree, __pyx_n_s_query_ball_point); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(((PyObject *)__pyx_v_Alive), __pyx_int_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 168, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_index), __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_points), __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(((PyObject *)(&PyList_Type)));
  __Pyx_GIVEREF(((PyObject *)(&PyList_Type)));
  PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)(&PyList_Type)));
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PySequence_Tuple(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_max); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_trapped / 2.) - 1.)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = PyList_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_9, 0, __pyx_t_7);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyList_SET_ITEM(__pyx_t_9, 1, __pyx_int_2);
  __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 168, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 168, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_10, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_10, __pyx_t_5);
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PySequence_List(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_phs), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_newpoints = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "GBM.pyx":169
 * 
 *     newpoints = phs[np.concatenate(list(tree.query_ball_point(tuple(map(list, points[index[Alive==1]])), np.max([trapped/2.-1.,2]))))]
 *     nsize = len(newpoints)             # <<<<<<<<<<<<<<
 * 
 *     # Create array to store new points based on old grid
 */
  __pyx_t_3 = ((PyObject *)__pyx_cur_scope->__pyx_v_newpoints);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_11 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_nsize = __pyx_t_11;

  /* "GBM.pyx":172
 * 
 *     # Create array to store new points based on old grid
 *     cdef list x_new = [1] * gsize # list(np.ones(gsize))             # <<<<<<<<<<<<<<
 *     cdef list y_new = [1] * gsize
 *     for i in range(gsize):
 */
  __pyx_t_3 = PyList_New(1 * ((__pyx_v_gsize<0) ? 0:__pyx_v_gsize)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_gsize; __pyx_temp++) {
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_int_1);
    }
  }
  __pyx_v_x_new = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "GBM.pyx":173
 *     # Create array to store new points based on old grid
 *     cdef list x_new = [1] * gsize # list(np.ones(gsize))
 *     cdef list y_new = [1] * gsize             # <<<<<<<<<<<<<<
 *     for i in range(gsize):
 *         point = points[i]
 */
  __pyx_t_3 = PyList_New(1 * ((__pyx_v_gsize<0) ? 0:__pyx_v_gsize)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_gsize; __pyx_temp++) {
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_int_1);
    }
  }
  __pyx_v_y_new = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "GBM.pyx":174
 *     cdef list x_new = [1] * gsize # list(np.ones(gsize))
 *     cdef list y_new = [1] * gsize
 *     for i in range(gsize):             # <<<<<<<<<<<<<<
 *         point = points[i]
 *         x_new[i] = [np.array(point[0])]
 */
  __pyx_t_10 = __pyx_v_gsize;
  __pyx_t_12 = __pyx_t_10;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_i = __pyx_t_13;

    /* "GBM.pyx":175
 *     cdef list y_new = [1] * gsize
 *     for i in range(gsize):
 *         point = points[i]             # <<<<<<<<<<<<<<
 *         x_new[i] = [np.array(point[0])]
 *         y_new[i] = [np.array(point[1])]
 */
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_points), __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_point, ((PyArrayObject *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "GBM.pyx":176
 *     for i in range(gsize):
 *         point = points[i]
 *         x_new[i] = [np.array(point[0])]             # <<<<<<<<<<<<<<
 *         y_new[i] = [np.array(point[1])]
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_point), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_x_new, __pyx_v_i, __pyx_t_4, int, 1, __Pyx_PyInt_From_int, 1, 0, 0) < 0)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "GBM.pyx":177
 *         point = points[i]
 *         x_new[i] = [np.array(point[0])]
 *         y_new[i] = [np.array(point[1])]             # <<<<<<<<<<<<<<
 * 
 *     dsize = len(Discarded)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_point), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_4);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_y_new, __pyx_v_i, __pyx_t_1, int, 1, __Pyx_PyInt_From_int, 1, 0, 0) < 0)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "GBM.pyx":179
 *         y_new[i] = [np.array(point[1])]
 * 
 *     dsize = len(Discarded)             # <<<<<<<<<<<<<<
 *     Discarded_array = np.asarray(Discarded)
 * 
 */
  if (unlikely(__pyx_v_Discarded == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 179, __pyx_L1_error)
  }
  __pyx_t_11 = PyList_GET_SIZE(__pyx_v_Discarded); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 179, __pyx_L1_error)
  __pyx_v_dsize = __pyx_t_11;

  /* "GBM.pyx":180
 * 
 *     dsize = len(Discarded)
 *     Discarded_array = np.asarray(Discarded)             # <<<<<<<<<<<<<<
 * 
 *     # Select only unique points in newpoints
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_Discarded) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_Discarded);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 180, __pyx_L1_error)
  __pyx_v_Discarded_array = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "GBM.pyx":184
 *     # Select only unique points in newpoints
 * 
 *     uni = list(set(tuple(x) for x in newpoints))             # <<<<<<<<<<<<<<
 * 
 *     cdef usize = len(uni)
 */
  __pyx_t_1 = __pyx_pf_3GBM_8ext_grid_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Generator_Next(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PySequence_List(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_uni = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "GBM.pyx":186
 *     uni = list(set(tuple(x) for x in newpoints))
 * 
 *     cdef usize = len(uni)             # <<<<<<<<<<<<<<
 * 
 *     newcomers = 0
 */
  __pyx_t_11 = PyList_GET_SIZE(__pyx_v_uni); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 186, __pyx_L1_error)
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_usize = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "GBM.pyx":188
 *     cdef usize = len(uni)
 * 
 *     newcomers = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(usize):
 */
  __pyx_v_newcomers = 0;

  /* "GBM.pyx":190
 *     newcomers = 0
 * 
 *     for i in range(usize):             # <<<<<<<<<<<<<<
 *         xx = np.asarray(uni[i])
 *         if dsize > 0:
 */
  __pyx_t_14 = __Pyx_PyInt_As_long(__pyx_v_usize); if (unlikely((__pyx_t_14 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 190, __pyx_L1_error)
  __pyx_t_15 = __pyx_t_14;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_15; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "GBM.pyx":191
 * 
 *     for i in range(usize):
 *         xx = np.asarray(uni[i])             # <<<<<<<<<<<<<<
 *         if dsize > 0:
 *             conditions = (xx not in points)  and (xx not in Discarded_array)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, PyList_GET_ITEM(__pyx_v_uni, __pyx_v_i)) : __Pyx_PyObject_CallOneArg(__pyx_t_4, PyList_GET_ITEM(__pyx_v_uni, __pyx_v_i));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_xx, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "GBM.pyx":192
 *     for i in range(usize):
 *         xx = np.asarray(uni[i])
 *         if dsize > 0:             # <<<<<<<<<<<<<<
 *             conditions = (xx not in points)  and (xx not in Discarded_array)
 *         else:
 */
    __pyx_t_16 = ((__pyx_v_dsize > 0) != 0);
    if (__pyx_t_16) {

      /* "GBM.pyx":193
 *         xx = np.asarray(uni[i])
 *         if dsize > 0:
 *             conditions = (xx not in points)  and (xx not in Discarded_array)             # <<<<<<<<<<<<<<
 *         else:
 *             conditions = (xx not in points)
 */
      __pyx_t_17 = (__Pyx_PySequence_ContainsTF(((PyObject *)__pyx_v_xx), ((PyObject *)__pyx_v_points), Py_NE)); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 193, __pyx_L1_error)
      __pyx_t_18 = (__pyx_t_17 != 0);
      if (__pyx_t_18) {
      } else {
        __pyx_t_16 = __pyx_t_18;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_18 = (__Pyx_PySequence_ContainsTF(((PyObject *)__pyx_v_xx), ((PyObject *)__pyx_v_Discarded_array), Py_NE)); if (unlikely(__pyx_t_18 < 0)) __PYX_ERR(0, 193, __pyx_L1_error)
      __pyx_t_17 = (__pyx_t_18 != 0);
      __pyx_t_16 = __pyx_t_17;
      __pyx_L8_bool_binop_done:;
      __pyx_v_conditions = __pyx_t_16;

      /* "GBM.pyx":192
 *     for i in range(usize):
 *         xx = np.asarray(uni[i])
 *         if dsize > 0:             # <<<<<<<<<<<<<<
 *             conditions = (xx not in points)  and (xx not in Discarded_array)
 *         else:
 */
      goto __pyx_L7;
    }

    /* "GBM.pyx":195
 *             conditions = (xx not in points)  and (xx not in Discarded_array)
 *         else:
 *             conditions = (xx not in points)             # <<<<<<<<<<<<<<
 *         if conditions:
 *             x_new.append([np.asarray(xx[0])])
 */
    /*else*/ {
      __pyx_t_16 = (__Pyx_PySequence_ContainsTF(((PyObject *)__pyx_v_xx), ((PyObject *)__pyx_v_points), Py_NE)); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 195, __pyx_L1_error)
      __pyx_v_conditions = __pyx_t_16;
    }
    __pyx_L7:;

    /* "GBM.pyx":196
 *         else:
 *             conditions = (xx not in points)
 *         if conditions:             # <<<<<<<<<<<<<<
 *             x_new.append([np.asarray(xx[0])])
 *             y_new.append([np.asarray(xx[1])])
 */
    __pyx_t_16 = (__pyx_v_conditions != 0);
    if (__pyx_t_16) {

      /* "GBM.pyx":197
 *             conditions = (xx not in points)
 *         if conditions:
 *             x_new.append([np.asarray(xx[0])])             # <<<<<<<<<<<<<<
 *             y_new.append([np.asarray(xx[1])])
 *             newcomers += 1 # How many new points were actually added?
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 197, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 197, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_xx), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 197, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 197, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_1);
      PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_x_new, __pyx_t_3); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 197, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "GBM.pyx":198
 *         if conditions:
 *             x_new.append([np.asarray(xx[0])])
 *             y_new.append([np.asarray(xx[1])])             # <<<<<<<<<<<<<<
 *             newcomers += 1 # How many new points were actually added?
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_xx), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3);
      PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_y_new, __pyx_t_4); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 198, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "GBM.pyx":199
 *             x_new.append([np.asarray(xx[0])])
 *             y_new.append([np.asarray(xx[1])])
 *             newcomers += 1 # How many new points were actually added?             # <<<<<<<<<<<<<<
 * 
 *     points = np.append(x_new,y_new,axis=1)
 */
      __pyx_v_newcomers = (__pyx_v_newcomers + 1);

      /* "GBM.pyx":196
 *         else:
 *             conditions = (xx not in points)
 *         if conditions:             # <<<<<<<<<<<<<<
 *             x_new.append([np.asarray(xx[0])])
 *             y_new.append([np.asarray(xx[1])])
 */
    }
  }

  /* "GBM.pyx":201
 *             newcomers += 1 # How many new points were actually added?
 * 
 *     points = np.append(x_new,y_new,axis=1)             # <<<<<<<<<<<<<<
 * 
 *     Rim = np.append(Rim, np.zeros(newcomers))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_append); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_x_new);
  __Pyx_GIVEREF(__pyx_v_x_new);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_x_new);
  __Pyx_INCREF(__pyx_v_y_new);
  __Pyx_GIVEREF(__pyx_v_y_new);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_y_new);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_axis, __pyx_int_1) < 0) __PYX_ERR(0, 201, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_points, ((PyArrayObject *)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "GBM.pyx":203
 *     points = np.append(x_new,y_new,axis=1)
 * 
 *     Rim = np.append(Rim, np.zeros(newcomers))             # <<<<<<<<<<<<<<
 *     Dead = np.append(Dead, np.zeros(newcomers))
 *     GSC = np.append(GSC, np.zeros(newcomers))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_append); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_newcomers); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, ((PyObject *)__pyx_v_Rim), __pyx_t_1};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, ((PyObject *)__pyx_v_Rim), __pyx_t_1};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_Rim));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_Rim));
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_10, ((PyObject *)__pyx_v_Rim));
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_10, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_Rim, ((PyArrayObject *)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "GBM.pyx":204
 * 
 *     Rim = np.append(Rim, np.zeros(newcomers))
 *     Dead = np.append(Dead, np.zeros(newcomers))             # <<<<<<<<<<<<<<
 *     GSC = np.append(GSC, np.zeros(newcomers))
 *     GPP = np.append(GPP, np.zeros(newcomers))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_append); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_newcomers); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, ((PyObject *)__pyx_v_Dead), __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, ((PyObject *)__pyx_v_Dead), __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_Dead));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_Dead));
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_10, ((PyObject *)__pyx_v_Dead));
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_10, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_Dead, ((PyArrayObject *)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "GBM.pyx":205
 *     Rim = np.append(Rim, np.zeros(newcomers))
 *     Dead = np.append(Dead, np.zeros(newcomers))
 *     GSC = np.append(GSC, np.zeros(newcomers))             # <<<<<<<<<<<<<<
 *     GPP = np.append(GPP, np.zeros(newcomers))
 *     GDS = np.append(GDS, np.zeros(newcomers))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_append); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_newcomers); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, ((PyObject *)__pyx_v_GSC), __pyx_t_3};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, ((PyObject *)__pyx_v_GSC), __pyx_t_3};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_GSC));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_GSC));
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_10, ((PyObject *)__pyx_v_GSC));
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_10, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_GSC, ((PyArrayObject *)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "GBM.pyx":206
 *     Dead = np.append(Dead, np.zeros(newcomers))
 *     GSC = np.append(GSC, np.zeros(newcomers))
 *     GPP = np.append(GPP, np.zeros(newcomers))             # <<<<<<<<<<<<<<
 *     GDS = np.append(GDS, np.zeros(newcomers))
 *     Alive = GSC + GPP + GDS
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_append); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_newcomers); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, ((PyObject *)__pyx_v_GPP), __pyx_t_1};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 206, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, ((PyObject *)__pyx_v_GPP), __pyx_t_1};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 206, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_GPP));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_GPP));
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_10, ((PyObject *)__pyx_v_GPP));
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_10, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_GPP, ((PyArrayObject *)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "GBM.pyx":207
 *     GSC = np.append(GSC, np.zeros(newcomers))
 *     GPP = np.append(GPP, np.zeros(newcomers))
 *     GDS = np.append(GDS, np.zeros(newcomers))             # <<<<<<<<<<<<<<
 *     Alive = GSC + GPP + GDS
 *     Cell_pop = Dead + Alive
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_append); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_newcomers); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, ((PyObject *)__pyx_v_GDS), __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, ((PyObject *)__pyx_v_GDS), __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_GDS));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_GDS));
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_10, ((PyObject *)__pyx_v_GDS));
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_10, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_GDS, ((PyArrayObject *)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "GBM.pyx":208
 *     GPP = np.append(GPP, np.zeros(newcomers))
 *     GDS = np.append(GDS, np.zeros(newcomers))
 *     Alive = GSC + GPP + GDS             # <<<<<<<<<<<<<<
 *     Cell_pop = Dead + Alive
 * 
 */
  __pyx_t_2 = PyNumber_Add(((PyObject *)__pyx_v_GSC), ((PyObject *)__pyx_v_GPP)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, ((PyObject *)__pyx_v_GDS)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_Alive, ((PyArrayObject *)__pyx_t_3));
  __pyx_t_3 = 0;

  /* "GBM.pyx":209
 *     GDS = np.append(GDS, np.zeros(newcomers))
 *     Alive = GSC + GPP + GDS
 *     Cell_pop = Dead + Alive             # <<<<<<<<<<<<<<
 * 
 *     # Delaunay trinangulation (Voronoi tesselation) to determine the neighbouring sites
 */
  __pyx_t_3 = PyNumber_Add(((PyObject *)__pyx_v_Dead), ((PyObject *)__pyx_v_Alive)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_Cell_pop, ((PyArrayObject *)__pyx_t_3));
  __pyx_t_3 = 0;

  /* "GBM.pyx":213
 *     # Delaunay trinangulation (Voronoi tesselation) to determine the neighbouring sites
 * 
 *     tri = Delaunay(points)             # <<<<<<<<<<<<<<
 * 
 *     # You can later add more points: scipy.spatial.Delaunay.add_points
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Delaunay); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, ((PyObject *)__pyx_v_points)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_points));
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_tri = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "GBM.pyx":218
 *     # Since the Delaunay triangulation is a numpy object, you can simply delete elements.
 * 
 *     (indptr, indices) = tri.vertex_neighbor_vertices             # <<<<<<<<<<<<<<
 * 
 *     gsize = len(points)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_tri, __pyx_n_s_vertex_neighbor_vertices); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 218, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_20 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_20(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L11_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_1 = __pyx_t_20(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L11_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_20(__pyx_t_4), 2) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
    __pyx_t_20 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L12_unpacking_done;
    __pyx_L11_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_20 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 218, __pyx_L1_error)
    __pyx_L12_unpacking_done:;
  }
  __pyx_v_indptr = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_indices = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "GBM.pyx":220
 *     (indptr, indices) = tri.vertex_neighbor_vertices
 * 
 *     gsize = len(points)             # <<<<<<<<<<<<<<
 *     index = np.asarray(range(gsize))
 * 
 */
  __pyx_t_11 = PyObject_Length(((PyObject *)__pyx_v_points)); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 220, __pyx_L1_error)
  __pyx_v_gsize = __pyx_t_11;

  /* "GBM.pyx":221
 * 
 *     gsize = len(points)
 *     index = np.asarray(range(gsize))             # <<<<<<<<<<<<<<
 * 
 *     return x_new, y_new, points, Alive, Rim, index, gsize, tri, indptr, indices, Dead, Cell_pop, GSC, GPP, GDS
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_gsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_index, ((PyArrayObject *)__pyx_t_3));
  __pyx_t_3 = 0;

  /* "GBM.pyx":223
 *     index = np.asarray(range(gsize))
 * 
 *     return x_new, y_new, points, Alive, Rim, index, gsize, tri, indptr, indices, Dead, Cell_pop, GSC, GPP, GDS             # <<<<<<<<<<<<<<
 * 
 * #=========================================
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_gsize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(15); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_x_new);
  __Pyx_GIVEREF(__pyx_v_x_new);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_x_new);
  __Pyx_INCREF(__pyx_v_y_new);
  __Pyx_GIVEREF(__pyx_v_y_new);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_y_new);
  __Pyx_INCREF(((PyObject *)__pyx_v_points));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_points));
  __Pyx_INCREF(((PyObject *)__pyx_v_Alive));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_Alive));
  PyTuple_SET_ITEM(__pyx_t_2, 3, ((PyObject *)__pyx_v_Alive));
  __Pyx_INCREF(((PyObject *)__pyx_v_Rim));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_Rim));
  PyTuple_SET_ITEM(__pyx_t_2, 4, ((PyObject *)__pyx_v_Rim));
  __Pyx_INCREF(((PyObject *)__pyx_v_index));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_index));
  PyTuple_SET_ITEM(__pyx_t_2, 5, ((PyObject *)__pyx_v_index));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 6, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_tri);
  __Pyx_GIVEREF(__pyx_v_tri);
  PyTuple_SET_ITEM(__pyx_t_2, 7, __pyx_v_tri);
  __Pyx_INCREF(__pyx_v_indptr);
  __Pyx_GIVEREF(__pyx_v_indptr);
  PyTuple_SET_ITEM(__pyx_t_2, 8, __pyx_v_indptr);
  __Pyx_INCREF(__pyx_v_indices);
  __Pyx_GIVEREF(__pyx_v_indices);
  PyTuple_SET_ITEM(__pyx_t_2, 9, __pyx_v_indices);
  __Pyx_INCREF(((PyObject *)__pyx_v_Dead));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_Dead));
  PyTuple_SET_ITEM(__pyx_t_2, 10, ((PyObject *)__pyx_v_Dead));
  __Pyx_INCREF(((PyObject *)__pyx_v_Cell_pop));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_Cell_pop));
  PyTuple_SET_ITEM(__pyx_t_2, 11, ((PyObject *)__pyx_v_Cell_pop));
  __Pyx_INCREF(((PyObject *)__pyx_v_GSC));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_GSC));
  PyTuple_SET_ITEM(__pyx_t_2, 12, ((PyObject *)__pyx_v_GSC));
  __Pyx_INCREF(((PyObject *)__pyx_v_GPP));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_GPP));
  PyTuple_SET_ITEM(__pyx_t_2, 13, ((PyObject *)__pyx_v_GPP));
  __Pyx_INCREF(((PyObject *)__pyx_v_GDS));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_GDS));
  PyTuple_SET_ITEM(__pyx_t_2, 14, ((PyObject *)__pyx_v_GDS));
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "GBM.pyx":158
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def ext_grid(int gsize, np.ndarray points, np.ndarray Alive, np.ndarray index, np.ndarray Rim, tree, np.ndarray phs, list Discarded, np.ndarray Cell_pop, np.ndarray Dead, np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, double trapped):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i, newcomers
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("GBM.ext_grid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_point);
  __Pyx_XDECREF((PyObject *)__pyx_v_xx);
  __Pyx_XDECREF((PyObject *)__pyx_v_Discarded_array);
  __Pyx_XDECREF(__pyx_v_x_new);
  __Pyx_XDECREF(__pyx_v_y_new);
  __Pyx_XDECREF(__pyx_v_uni);
  __Pyx_XDECREF(__pyx_v_usize);
  __Pyx_XDECREF(__pyx_v_tri);
  __Pyx_XDECREF(__pyx_v_indptr);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XDECREF((PyObject *)__pyx_v_points);
  __Pyx_XDECREF((PyObject *)__pyx_v_Alive);
  __Pyx_XDECREF((PyObject *)__pyx_v_index);
  __Pyx_XDECREF((PyObject *)__pyx_v_Rim);
  __Pyx_XDECREF((PyObject *)__pyx_v_Cell_pop);
  __Pyx_XDECREF((PyObject *)__pyx_v_Dead);
  __Pyx_XDECREF((PyObject *)__pyx_v_GSC);
  __Pyx_XDECREF((PyObject *)__pyx_v_GPP);
  __Pyx_XDECREF((PyObject *)__pyx_v_GDS);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "GBM.pyx":231
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * cpdef np.ndarray  interLN( points, np.ndarray values, newpoints):             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray nvL, nvN
 */

static PyObject *__pyx_pw_3GBM_7interLN(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyArrayObject *__pyx_f_3GBM_interLN(PyObject *__pyx_v_points, PyArrayObject *__pyx_v_values, PyObject *__pyx_v_newpoints, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyArrayObject *__pyx_v_nvL = 0;
  PyArrayObject *__pyx_v_nvN = 0;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("interLN", 0);

  /* "GBM.pyx":235
 *     cdef np.ndarray nvL, nvN
 * 
 *     nvL = LinearNDInterpolator(points,values)(newpoints)             # <<<<<<<<<<<<<<
 *     nvN = NearestNDInterpolator(points,values)(newpoints)
 *     nvL[np.isnan(nvL)] = nvN[np.isnan(nvL)]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_LinearNDInterpolator); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_points, ((PyObject *)__pyx_v_values)};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_points, ((PyObject *)__pyx_v_values)};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_points);
    __Pyx_INCREF(((PyObject *)__pyx_v_values));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_values));
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_values));
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_newpoints) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_newpoints);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 235, __pyx_L1_error)
  __pyx_v_nvL = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "GBM.pyx":236
 * 
 *     nvL = LinearNDInterpolator(points,values)(newpoints)
 *     nvN = NearestNDInterpolator(points,values)(newpoints)             # <<<<<<<<<<<<<<
 *     nvL[np.isnan(nvL)] = nvN[np.isnan(nvL)]
 *     return nvL
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_NearestNDInterpolator); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_points, ((PyObject *)__pyx_v_values)};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_points, ((PyObject *)__pyx_v_values)};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_GIVEREF(__pyx_v_points);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_v_points);
    __Pyx_INCREF(((PyObject *)__pyx_v_values));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_values));
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, ((PyObject *)__pyx_v_values));
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_newpoints) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_newpoints);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 236, __pyx_L1_error)
  __pyx_v_nvN = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "GBM.pyx":237
 *     nvL = LinearNDInterpolator(points,values)(newpoints)
 *     nvN = NearestNDInterpolator(points,values)(newpoints)
 *     nvL[np.isnan(nvL)] = nvN[np.isnan(nvL)]             # <<<<<<<<<<<<<<
 *     return nvL
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_isnan); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, ((PyObject *)__pyx_v_nvL)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_nvL));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_nvN), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_isnan); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, ((PyObject *)__pyx_v_nvL)) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_nvL));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_nvL), __pyx_t_1, __pyx_t_3) < 0)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "GBM.pyx":238
 *     nvN = NearestNDInterpolator(points,values)(newpoints)
 *     nvL[np.isnan(nvL)] = nvN[np.isnan(nvL)]
 *     return nvL             # <<<<<<<<<<<<<<
 * 
 * #=========================================
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_nvL));
  __pyx_r = __pyx_v_nvL;
  goto __pyx_L0;

  /* "GBM.pyx":231
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * cpdef np.ndarray  interLN( points, np.ndarray values, newpoints):             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray nvL, nvN
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("GBM.interLN", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_nvL);
  __Pyx_XDECREF((PyObject *)__pyx_v_nvN);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3GBM_7interLN(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3GBM_7interLN(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_values = 0;
  PyObject *__pyx_v_newpoints = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("interLN (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_values,&__pyx_n_s_newpoints,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_values)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("interLN", 1, 3, 3, 1); __PYX_ERR(0, 231, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_newpoints)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("interLN", 1, 3, 3, 2); __PYX_ERR(0, 231, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "interLN") < 0)) __PYX_ERR(0, 231, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_points = values[0];
    __pyx_v_values = ((PyArrayObject *)values[1]);
    __pyx_v_newpoints = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("interLN", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 231, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("GBM.interLN", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_values), __pyx_ptype_5numpy_ndarray, 1, "values", 0))) __PYX_ERR(0, 231, __pyx_L1_error)
  __pyx_r = __pyx_pf_3GBM_6interLN(__pyx_self, __pyx_v_points, __pyx_v_values, __pyx_v_newpoints);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3GBM_6interLN(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_points, PyArrayObject *__pyx_v_values, PyObject *__pyx_v_newpoints) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("interLN", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_3GBM_interLN(__pyx_v_points, __pyx_v_values, __pyx_v_newpoints, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("GBM.interLN", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "GBM.pyx":246
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def init_oxygen(str Restart, np.ndarray Ox_irr, mesh, int low, np.ndarray points):             # <<<<<<<<<<<<<<
 *     if Restart == "None":
 *         oxygen = CellVariable(mesh = mesh, value = float(low)**2)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3GBM_9init_oxygen(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3GBM_9init_oxygen = {"init_oxygen", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3GBM_9init_oxygen, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3GBM_9init_oxygen(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_Restart = 0;
  PyArrayObject *__pyx_v_Ox_irr = 0;
  PyObject *__pyx_v_mesh = 0;
  int __pyx_v_low;
  PyArrayObject *__pyx_v_points = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_oxygen (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Restart,&__pyx_n_s_Ox_irr,&__pyx_n_s_mesh,&__pyx_n_s_low,&__pyx_n_s_points,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Restart)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Ox_irr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_oxygen", 1, 5, 5, 1); __PYX_ERR(0, 246, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mesh)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_oxygen", 1, 5, 5, 2); __PYX_ERR(0, 246, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_low)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_oxygen", 1, 5, 5, 3); __PYX_ERR(0, 246, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_oxygen", 1, 5, 5, 4); __PYX_ERR(0, 246, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_oxygen") < 0)) __PYX_ERR(0, 246, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_Restart = ((PyObject*)values[0]);
    __pyx_v_Ox_irr = ((PyArrayObject *)values[1]);
    __pyx_v_mesh = values[2];
    __pyx_v_low = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_low == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 246, __pyx_L3_error)
    __pyx_v_points = ((PyArrayObject *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_oxygen", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 246, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("GBM.init_oxygen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Restart), (&PyUnicode_Type), 1, "Restart", 1))) __PYX_ERR(0, 246, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Ox_irr), __pyx_ptype_5numpy_ndarray, 1, "Ox_irr", 0))) __PYX_ERR(0, 246, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 1, "points", 0))) __PYX_ERR(0, 246, __pyx_L1_error)
  __pyx_r = __pyx_pf_3GBM_8init_oxygen(__pyx_self, __pyx_v_Restart, __pyx_v_Ox_irr, __pyx_v_mesh, __pyx_v_low, __pyx_v_points);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3GBM_8init_oxygen(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_Restart, PyArrayObject *__pyx_v_Ox_irr, PyObject *__pyx_v_mesh, int __pyx_v_low, PyArrayObject *__pyx_v_points) {
  PyObject *__pyx_v_oxygen = NULL;
  PyObject *__pyx_v_Blood_vessel = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init_oxygen", 0);

  /* "GBM.pyx":247
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def init_oxygen(str Restart, np.ndarray Ox_irr, mesh, int low, np.ndarray points):
 *     if Restart == "None":             # <<<<<<<<<<<<<<
 *         oxygen = CellVariable(mesh = mesh, value = float(low)**2)
 *     else:
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_Restart, __pyx_n_u_None, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 247, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "GBM.pyx":248
 * def init_oxygen(str Restart, np.ndarray Ox_irr, mesh, int low, np.ndarray points):
 *     if Restart == "None":
 *         oxygen = CellVariable(mesh = mesh, value = float(low)**2)             # <<<<<<<<<<<<<<
 *     else:
 *         oxygen = np.concatenate(interLN(points,Ox_irr,(mesh.x,mesh.y)))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_CellVariable); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_mesh, __pyx_v_mesh) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
    __pyx_t_5 = PyFloat_FromDouble(pow(((double)__pyx_v_low), 2.0)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_value, __pyx_t_5) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_oxygen = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "GBM.pyx":247
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def init_oxygen(str Restart, np.ndarray Ox_irr, mesh, int low, np.ndarray points):
 *     if Restart == "None":             # <<<<<<<<<<<<<<
 *         oxygen = CellVariable(mesh = mesh, value = float(low)**2)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "GBM.pyx":250
 *         oxygen = CellVariable(mesh = mesh, value = float(low)**2)
 *     else:
 *         oxygen = np.concatenate(interLN(points,Ox_irr,(mesh.x,mesh.y)))             # <<<<<<<<<<<<<<
 *         oxygen = CellVariable(mesh=mesh, value=oxygen)
 * 
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_mesh, __pyx_n_s_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_mesh, __pyx_n_s_y); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = ((PyObject *)__pyx_f_3GBM_interLN(((PyObject *)__pyx_v_points), __pyx_v_Ox_irr, __pyx_t_7, 0)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_oxygen = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "GBM.pyx":251
 *     else:
 *         oxygen = np.concatenate(interLN(points,Ox_irr,(mesh.x,mesh.y)))
 *         oxygen = CellVariable(mesh=mesh, value=oxygen)             # <<<<<<<<<<<<<<
 * 
 *     Blood_vessel = CellVariable(mesh=mesh)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_CellVariable); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_mesh, __pyx_v_mesh) < 0) __PYX_ERR(0, 251, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_value, __pyx_v_oxygen) < 0) __PYX_ERR(0, 251, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_oxygen, __pyx_t_6);
    __pyx_t_6 = 0;
  }
  __pyx_L3:;

  /* "GBM.pyx":253
 *         oxygen = CellVariable(mesh=mesh, value=oxygen)
 * 
 *     Blood_vessel = CellVariable(mesh=mesh)             # <<<<<<<<<<<<<<
 *     Blood_vessel.setValue(0.)
 *     Blood_vessel[0] = 500.
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_CellVariable); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_mesh, __pyx_v_mesh) < 0) __PYX_ERR(0, 253, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_Blood_vessel = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "GBM.pyx":254
 * 
 *     Blood_vessel = CellVariable(mesh=mesh)
 *     Blood_vessel.setValue(0.)             # <<<<<<<<<<<<<<
 *     Blood_vessel[0] = 500.
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_Blood_vessel, __pyx_n_s_setValue); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_6, __pyx_float_0_) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_float_0_);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "GBM.pyx":255
 *     Blood_vessel = CellVariable(mesh=mesh)
 *     Blood_vessel.setValue(0.)
 *     Blood_vessel[0] = 500.             # <<<<<<<<<<<<<<
 * 
 *     return Blood_vessel, oxygen
 */
  if (unlikely(__Pyx_SetItemInt(__pyx_v_Blood_vessel, 0, __pyx_float_500_, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0)) __PYX_ERR(0, 255, __pyx_L1_error)

  /* "GBM.pyx":257
 *     Blood_vessel[0] = 500.
 * 
 *     return Blood_vessel, oxygen             # <<<<<<<<<<<<<<
 * 
 * #=========================================
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_Blood_vessel);
  __Pyx_GIVEREF(__pyx_v_Blood_vessel);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_Blood_vessel);
  __Pyx_INCREF(__pyx_v_oxygen);
  __Pyx_GIVEREF(__pyx_v_oxygen);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_oxygen);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "GBM.pyx":246
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def init_oxygen(str Restart, np.ndarray Ox_irr, mesh, int low, np.ndarray points):             # <<<<<<<<<<<<<<
 *     if Restart == "None":
 *         oxygen = CellVariable(mesh = mesh, value = float(low)**2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("GBM.init_oxygen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_oxygen);
  __Pyx_XDECREF(__pyx_v_Blood_vessel);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "GBM.pyx":265
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def solve_oxygen(mesh, oxygen, voronoi_kdtree, np.ndarray pl, np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, Blood_vessel, double Dox, np.ndarray points, list Xs_r, list Ys_r, double timeStepDuration, double lambdaC):             # <<<<<<<<<<<<<<
 * 
 *     cdef int j, llen
 */

/* Python wrapper */
static PyObject *__pyx_pw_3GBM_11solve_oxygen(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3GBM_11solve_oxygen = {"solve_oxygen", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3GBM_11solve_oxygen, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3GBM_11solve_oxygen(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mesh = 0;
  PyObject *__pyx_v_oxygen = 0;
  PyObject *__pyx_v_voronoi_kdtree = 0;
  PyArrayObject *__pyx_v_pl = 0;
  PyArrayObject *__pyx_v_GSC = 0;
  PyArrayObject *__pyx_v_GPP = 0;
  PyArrayObject *__pyx_v_GDS = 0;
  PyObject *__pyx_v_Blood_vessel = 0;
  double __pyx_v_Dox;
  PyArrayObject *__pyx_v_points = 0;
  PyObject *__pyx_v_Xs_r = 0;
  PyObject *__pyx_v_Ys_r = 0;
  double __pyx_v_timeStepDuration;
  double __pyx_v_lambdaC;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve_oxygen (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mesh,&__pyx_n_s_oxygen,&__pyx_n_s_voronoi_kdtree,&__pyx_n_s_pl,&__pyx_n_s_GSC,&__pyx_n_s_GPP,&__pyx_n_s_GDS,&__pyx_n_s_Blood_vessel,&__pyx_n_s_Dox,&__pyx_n_s_points,&__pyx_n_s_Xs_r,&__pyx_n_s_Ys_r,&__pyx_n_s_timeStepDuration,&__pyx_n_s_lambdaC,0};
    PyObject* values[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mesh)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_oxygen)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solve_oxygen", 1, 14, 14, 1); __PYX_ERR(0, 265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_voronoi_kdtree)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solve_oxygen", 1, 14, 14, 2); __PYX_ERR(0, 265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solve_oxygen", 1, 14, 14, 3); __PYX_ERR(0, 265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_GSC)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solve_oxygen", 1, 14, 14, 4); __PYX_ERR(0, 265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_GPP)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solve_oxygen", 1, 14, 14, 5); __PYX_ERR(0, 265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_GDS)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solve_oxygen", 1, 14, 14, 6); __PYX_ERR(0, 265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Blood_vessel)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solve_oxygen", 1, 14, 14, 7); __PYX_ERR(0, 265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Dox)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solve_oxygen", 1, 14, 14, 8); __PYX_ERR(0, 265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solve_oxygen", 1, 14, 14, 9); __PYX_ERR(0, 265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Xs_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solve_oxygen", 1, 14, 14, 10); __PYX_ERR(0, 265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Ys_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solve_oxygen", 1, 14, 14, 11); __PYX_ERR(0, 265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timeStepDuration)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solve_oxygen", 1, 14, 14, 12); __PYX_ERR(0, 265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lambdaC)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solve_oxygen", 1, 14, 14, 13); __PYX_ERR(0, 265, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "solve_oxygen") < 0)) __PYX_ERR(0, 265, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 14) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
    }
    __pyx_v_mesh = values[0];
    __pyx_v_oxygen = values[1];
    __pyx_v_voronoi_kdtree = values[2];
    __pyx_v_pl = ((PyArrayObject *)values[3]);
    __pyx_v_GSC = ((PyArrayObject *)values[4]);
    __pyx_v_GPP = ((PyArrayObject *)values[5]);
    __pyx_v_GDS = ((PyArrayObject *)values[6]);
    __pyx_v_Blood_vessel = values[7];
    __pyx_v_Dox = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_Dox == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 265, __pyx_L3_error)
    __pyx_v_points = ((PyArrayObject *)values[9]);
    __pyx_v_Xs_r = ((PyObject*)values[10]);
    __pyx_v_Ys_r = ((PyObject*)values[11]);
    __pyx_v_timeStepDuration = __pyx_PyFloat_AsDouble(values[12]); if (unlikely((__pyx_v_timeStepDuration == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 265, __pyx_L3_error)
    __pyx_v_lambdaC = __pyx_PyFloat_AsDouble(values[13]); if (unlikely((__pyx_v_lambdaC == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 265, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("solve_oxygen", 1, 14, 14, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 265, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("GBM.solve_oxygen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pl), __pyx_ptype_5numpy_ndarray, 1, "pl", 0))) __PYX_ERR(0, 265, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_GSC), __pyx_ptype_5numpy_ndarray, 1, "GSC", 0))) __PYX_ERR(0, 265, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_GPP), __pyx_ptype_5numpy_ndarray, 1, "GPP", 0))) __PYX_ERR(0, 265, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_GDS), __pyx_ptype_5numpy_ndarray, 1, "GDS", 0))) __PYX_ERR(0, 265, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 1, "points", 0))) __PYX_ERR(0, 265, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Xs_r), (&PyList_Type), 1, "Xs_r", 1))) __PYX_ERR(0, 265, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Ys_r), (&PyList_Type), 1, "Ys_r", 1))) __PYX_ERR(0, 265, __pyx_L1_error)
  __pyx_r = __pyx_pf_3GBM_10solve_oxygen(__pyx_self, __pyx_v_mesh, __pyx_v_oxygen, __pyx_v_voronoi_kdtree, __pyx_v_pl, __pyx_v_GSC, __pyx_v_GPP, __pyx_v_GDS, __pyx_v_Blood_vessel, __pyx_v_Dox, __pyx_v_points, __pyx_v_Xs_r, __pyx_v_Ys_r, __pyx_v_timeStepDuration, __pyx_v_lambdaC);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3GBM_10solve_oxygen(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_mesh, PyObject *__pyx_v_oxygen, PyObject *__pyx_v_voronoi_kdtree, PyArrayObject *__pyx_v_pl, PyArrayObject *__pyx_v_GSC, PyArrayObject *__pyx_v_GPP, PyArrayObject *__pyx_v_GDS, PyObject *__pyx_v_Blood_vessel, double __pyx_v_Dox, PyArrayObject *__pyx_v_points, PyObject *__pyx_v_Xs_r, PyObject *__pyx_v_Ys_r, double __pyx_v_timeStepDuration, double __pyx_v_lambdaC) {
  int __pyx_v_j;
  int __pyx_v_llen;
  CYTHON_UNUSED PyObject *__pyx_v_dist_GSC = NULL;
  PyObject *__pyx_v_region_GSC = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_dist_GPP = NULL;
  PyObject *__pyx_v_region_GPP = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_dist_GDS = NULL;
  PyObject *__pyx_v_region_GDS = NULL;
  PyArrayObject *__pyx_v_Count_GSC = 0;
  PyArrayObject *__pyx_v_Count_GPP = 0;
  PyArrayObject *__pyx_v_Count_GDS = 0;
  PyObject *__pyx_v_GSC_PDE = NULL;
  PyObject *__pyx_v_GPP_PDE = NULL;
  PyObject *__pyx_v_GDS_PDE = NULL;
  PyObject *__pyx_v_eq = NULL;
  PyArrayObject *__pyx_v_Ox_irr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve_oxygen", 0);

  /* "GBM.pyx":269
 *     cdef int j, llen
 * 
 *     llen = len(pl)             # <<<<<<<<<<<<<<
 * 
 *     # Figure out how many cells placed in the dense grid lie around the grid points on the mesh on which the PDE is solved.
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_pl)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 269, __pyx_L1_error)
  __pyx_v_llen = __pyx_t_1;

  /* "GBM.pyx":273
 *     # Figure out how many cells placed in the dense grid lie around the grid points on the mesh on which the PDE is solved.
 * 
 *     if np.any(GSC >=1): dist_GSC, region_GSC = voronoi_kdtree.query(points[GSC>=1])             # <<<<<<<<<<<<<<
 *     if np.any(GPP >=1): dist_GPP, region_GPP = voronoi_kdtree.query(points[GPP>=1])
 *     if np.any(GDS >=1): dist_GDS, region_GDS = voronoi_kdtree.query(points[GDS>=1])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_any); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(((PyObject *)__pyx_v_GSC), __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 273, __pyx_L1_error)
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_voronoi_kdtree, __pyx_n_s_query); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(((PyObject *)__pyx_v_GSC), __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 273, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_points), __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 273, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 273, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 273, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext;
      index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_3); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_3); if (unlikely(!__pyx_t_5)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_3), 2) < 0) __PYX_ERR(0, 273, __pyx_L1_error)
      __pyx_t_7 = NULL;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 273, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __pyx_v_dist_GSC = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_v_region_GSC = __pyx_t_5;
    __pyx_t_5 = 0;
  }

  /* "GBM.pyx":274
 * 
 *     if np.any(GSC >=1): dist_GSC, region_GSC = voronoi_kdtree.query(points[GSC>=1])
 *     if np.any(GPP >=1): dist_GPP, region_GPP = voronoi_kdtree.query(points[GPP>=1])             # <<<<<<<<<<<<<<
 *     if np.any(GDS >=1): dist_GDS, region_GDS = voronoi_kdtree.query(points[GDS>=1])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_any); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(((PyObject *)__pyx_v_GPP), __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 274, __pyx_L1_error)
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_voronoi_kdtree, __pyx_n_s_query); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(((PyObject *)__pyx_v_GPP), __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 274, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_points), __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 274, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_3 = __pyx_t_7(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_5), 2) < 0) __PYX_ERR(0, 274, __pyx_L1_error)
      __pyx_t_7 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 274, __pyx_L1_error)
      __pyx_L8_unpacking_done:;
    }
    __pyx_v_dist_GPP = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_v_region_GPP = __pyx_t_3;
    __pyx_t_3 = 0;
  }

  /* "GBM.pyx":275
 *     if np.any(GSC >=1): dist_GSC, region_GSC = voronoi_kdtree.query(points[GSC>=1])
 *     if np.any(GPP >=1): dist_GPP, region_GPP = voronoi_kdtree.query(points[GPP>=1])
 *     if np.any(GDS >=1): dist_GDS, region_GDS = voronoi_kdtree.query(points[GDS>=1])             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray Count_GSC = GSC[GSC>=1]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_any); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(((PyObject *)__pyx_v_GDS), __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 275, __pyx_L1_error)
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_voronoi_kdtree, __pyx_n_s_query); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(((PyObject *)__pyx_v_GDS), __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 275, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_points), __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 275, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 275, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 275, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 275, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext;
      index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_3); if (unlikely(!__pyx_t_4)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_3); if (unlikely(!__pyx_t_5)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_3), 2) < 0) __PYX_ERR(0, 275, __pyx_L1_error)
      __pyx_t_7 = NULL;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L11_unpacking_done;
      __pyx_L10_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 275, __pyx_L1_error)
      __pyx_L11_unpacking_done:;
    }
    __pyx_v_dist_GDS = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_v_region_GDS = __pyx_t_5;
    __pyx_t_5 = 0;
  }

  /* "GBM.pyx":277
 *     if np.any(GDS >=1): dist_GDS, region_GDS = voronoi_kdtree.query(points[GDS>=1])
 * 
 *     cdef np.ndarray Count_GSC = GSC[GSC>=1]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray Count_GPP = GPP[GPP>=1]
 *     cdef np.ndarray Count_GDS = GDS[GDS>=1]
 */
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_GSC), __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 277, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_GSC), __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 277, __pyx_L1_error)
  __pyx_v_Count_GSC = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "GBM.pyx":278
 * 
 *     cdef np.ndarray Count_GSC = GSC[GSC>=1]
 *     cdef np.ndarray Count_GPP = GPP[GPP>=1]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray Count_GDS = GDS[GDS>=1]
 * 
 */
  __pyx_t_5 = PyObject_RichCompare(((PyObject *)__pyx_v_GPP), __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 278, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_GPP), __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 278, __pyx_L1_error)
  __pyx_v_Count_GPP = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "GBM.pyx":279
 *     cdef np.ndarray Count_GSC = GSC[GSC>=1]
 *     cdef np.ndarray Count_GPP = GPP[GPP>=1]
 *     cdef np.ndarray Count_GDS = GDS[GDS>=1]             # <<<<<<<<<<<<<<
 * 
 *     GSC_PDE = np.zeros(llen)
 */
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_GDS), __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 279, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_GDS), __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 279, __pyx_L1_error)
  __pyx_v_Count_GDS = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "GBM.pyx":281
 *     cdef np.ndarray Count_GDS = GDS[GDS>=1]
 * 
 *     GSC_PDE = np.zeros(llen)             # <<<<<<<<<<<<<<
 *     GPP_PDE = np.zeros(llen)
 *     GDS_PDE = np.zeros(llen)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_llen); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_GSC_PDE = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "GBM.pyx":282
 * 
 *     GSC_PDE = np.zeros(llen)
 *     GPP_PDE = np.zeros(llen)             # <<<<<<<<<<<<<<
 *     GDS_PDE = np.zeros(llen)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_llen); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_GPP_PDE = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "GBM.pyx":283
 *     GSC_PDE = np.zeros(llen)
 *     GPP_PDE = np.zeros(llen)
 *     GDS_PDE = np.zeros(llen)             # <<<<<<<<<<<<<<
 * 
 *     for j in range(llen):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_llen); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_GDS_PDE = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "GBM.pyx":285
 *     GDS_PDE = np.zeros(llen)
 * 
 *     for j in range(llen):             # <<<<<<<<<<<<<<
 *         if np.any(GSC >=1): GSC_PDE[j] = np.sum(Count_GSC[region_GSC == j])
 *         if np.any(GPP >=1): GPP_PDE[j] = np.sum(Count_GPP[region_GPP == j])
 */
  __pyx_t_8 = __pyx_v_llen;
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_j = __pyx_t_10;

    /* "GBM.pyx":286
 * 
 *     for j in range(llen):
 *         if np.any(GSC >=1): GSC_PDE[j] = np.sum(Count_GSC[region_GSC == j])             # <<<<<<<<<<<<<<
 *         if np.any(GPP >=1): GPP_PDE[j] = np.sum(Count_GPP[region_GPP == j])
 *         if np.any(GDS >=1): GDS_PDE[j] = np.sum(Count_GDS[region_GDS == j])
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_any); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_RichCompare(((PyObject *)__pyx_v_GSC), __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 286, __pyx_L1_error)
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_v_region_GSC)) { __Pyx_RaiseUnboundLocalError("region_GSC"); __PYX_ERR(0, 286, __pyx_L1_error) }
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_region_GSC, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Count_GSC), __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_v_GSC_PDE, __pyx_v_j, __pyx_t_5, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }

    /* "GBM.pyx":287
 *     for j in range(llen):
 *         if np.any(GSC >=1): GSC_PDE[j] = np.sum(Count_GSC[region_GSC == j])
 *         if np.any(GPP >=1): GPP_PDE[j] = np.sum(Count_GPP[region_GPP == j])             # <<<<<<<<<<<<<<
 *         if np.any(GDS >=1): GDS_PDE[j] = np.sum(Count_GDS[region_GDS == j])
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_any); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_RichCompare(((PyObject *)__pyx_v_GPP), __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 287, __pyx_L1_error)
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_v_region_GPP)) { __Pyx_RaiseUnboundLocalError("region_GPP"); __PYX_ERR(0, 287, __pyx_L1_error) }
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_region_GPP, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Count_GPP), __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_v_GPP_PDE, __pyx_v_j, __pyx_t_5, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }

    /* "GBM.pyx":288
 *         if np.any(GSC >=1): GSC_PDE[j] = np.sum(Count_GSC[region_GSC == j])
 *         if np.any(GPP >=1): GPP_PDE[j] = np.sum(Count_GPP[region_GPP == j])
 *         if np.any(GDS >=1): GDS_PDE[j] = np.sum(Count_GDS[region_GDS == j])             # <<<<<<<<<<<<<<
 * 
 *     GSC_PDE = CellVariable(mesh=mesh, value=GSC_PDE)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_any); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_RichCompare(((PyObject *)__pyx_v_GDS), __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 288, __pyx_L1_error)
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 288, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 288, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_v_region_GDS)) { __Pyx_RaiseUnboundLocalError("region_GDS"); __PYX_ERR(0, 288, __pyx_L1_error) }
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 288, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_region_GDS, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 288, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Count_GDS), __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 288, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 288, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_v_GDS_PDE, __pyx_v_j, __pyx_t_5, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 288, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }

  /* "GBM.pyx":290
 *         if np.any(GDS >=1): GDS_PDE[j] = np.sum(Count_GDS[region_GDS == j])
 * 
 *     GSC_PDE = CellVariable(mesh=mesh, value=GSC_PDE)             # <<<<<<<<<<<<<<
 *     GPP_PDE = CellVariable(mesh=mesh, value=GPP_PDE)
 *     GDS_PDE = CellVariable(mesh=mesh, value=GDS_PDE)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_CellVariable); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_mesh, __pyx_v_mesh) < 0) __PYX_ERR(0, 290, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_value, __pyx_v_GSC_PDE) < 0) __PYX_ERR(0, 290, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_GSC_PDE, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "GBM.pyx":291
 * 
 *     GSC_PDE = CellVariable(mesh=mesh, value=GSC_PDE)
 *     GPP_PDE = CellVariable(mesh=mesh, value=GPP_PDE)             # <<<<<<<<<<<<<<
 *     GDS_PDE = CellVariable(mesh=mesh, value=GDS_PDE)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_CellVariable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_mesh, __pyx_v_mesh) < 0) __PYX_ERR(0, 291, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_value, __pyx_v_GPP_PDE) < 0) __PYX_ERR(0, 291, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_GPP_PDE, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "GBM.pyx":292
 *     GSC_PDE = CellVariable(mesh=mesh, value=GSC_PDE)
 *     GPP_PDE = CellVariable(mesh=mesh, value=GPP_PDE)
 *     GDS_PDE = CellVariable(mesh=mesh, value=GDS_PDE)             # <<<<<<<<<<<<<<
 * 
 *     # Oxygen differential equation setup with FiPy.
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_CellVariable); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_mesh, __pyx_v_mesh) < 0) __PYX_ERR(0, 292, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_value, __pyx_v_GDS_PDE) < 0) __PYX_ERR(0, 292, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_GDS_PDE, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "GBM.pyx":297
 *     # Neumann conditions are automatically adopted as they are left unspecified here.
 * 
 *     eq = TransientTerm() == DiffusionTerm(coeff=Dox) - lambdaC*(GSC_PDE+GPP_PDE+GDS_PDE) + Blood_vessel             # <<<<<<<<<<<<<<
 *     eq.solve(var=oxygen, dt=timeStepDuration)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_TransientTerm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_DiffusionTerm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_Dox); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_coeff, __pyx_t_3) < 0) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_lambdaC); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyNumber_Add(__pyx_v_GSC_PDE, __pyx_v_GPP_PDE); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = PyNumber_Add(__pyx_t_4, __pyx_v_GDS_PDE); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_5, __pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = PyNumber_Subtract(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_11, __pyx_v_Blood_vessel); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_eq = __pyx_t_11;
  __pyx_t_11 = 0;

  /* "GBM.pyx":298
 * 
 *     eq = TransientTerm() == DiffusionTerm(coeff=Dox) - lambdaC*(GSC_PDE+GPP_PDE+GDS_PDE) + Blood_vessel
 *     eq.solve(var=oxygen, dt=timeStepDuration)             # <<<<<<<<<<<<<<
 * 
 *     # Interpolate to get oxygen concentration on irregular grid.
 */
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_eq, __pyx_n_s_solve); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_var, __pyx_v_oxygen) < 0) __PYX_ERR(0, 298, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_timeStepDuration); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dt, __pyx_t_2) < 0) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "GBM.pyx":303
 * 
 * #    Ox_irr = interLN2(mesh.x,mesh.y,np.asarray(oxygen),Xs_r,Ys_r)
 *     Ox_irr = interLN((mesh.x,mesh.y),np.asarray(oxygen),(Xs_r,Ys_r))             # <<<<<<<<<<<<<<
 * 
 *     return Ox_irr, oxygen
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mesh, __pyx_n_s_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_mesh, __pyx_n_s_y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_oxygen) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_oxygen);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 303, __pyx_L1_error)
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_Xs_r);
  __Pyx_GIVEREF(__pyx_v_Xs_r);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_Xs_r);
  __Pyx_INCREF(__pyx_v_Ys_r);
  __Pyx_GIVEREF(__pyx_v_Ys_r);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_Ys_r);
  __pyx_t_2 = ((PyObject *)__pyx_f_3GBM_interLN(__pyx_t_11, ((PyArrayObject *)__pyx_t_4), __pyx_t_3, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_Ox_irr = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "GBM.pyx":305
 *     Ox_irr = interLN((mesh.x,mesh.y),np.asarray(oxygen),(Xs_r,Ys_r))
 * 
 *     return Ox_irr, oxygen             # <<<<<<<<<<<<<<
 * 
 * #=========================================
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_Ox_irr));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_Ox_irr));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_Ox_irr));
  __Pyx_INCREF(__pyx_v_oxygen);
  __Pyx_GIVEREF(__pyx_v_oxygen);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_oxygen);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "GBM.pyx":265
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def solve_oxygen(mesh, oxygen, voronoi_kdtree, np.ndarray pl, np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, Blood_vessel, double Dox, np.ndarray points, list Xs_r, list Ys_r, double timeStepDuration, double lambdaC):             # <<<<<<<<<<<<<<
 * 
 *     cdef int j, llen
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("GBM.solve_oxygen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dist_GSC);
  __Pyx_XDECREF(__pyx_v_region_GSC);
  __Pyx_XDECREF(__pyx_v_dist_GPP);
  __Pyx_XDECREF(__pyx_v_region_GPP);
  __Pyx_XDECREF(__pyx_v_dist_GDS);
  __Pyx_XDECREF(__pyx_v_region_GDS);
  __Pyx_XDECREF((PyObject *)__pyx_v_Count_GSC);
  __Pyx_XDECREF((PyObject *)__pyx_v_Count_GPP);
  __Pyx_XDECREF((PyObject *)__pyx_v_Count_GDS);
  __Pyx_XDECREF(__pyx_v_GSC_PDE);
  __Pyx_XDECREF(__pyx_v_GPP_PDE);
  __Pyx_XDECREF(__pyx_v_GDS_PDE);
  __Pyx_XDECREF(__pyx_v_eq);
  __Pyx_XDECREF((PyObject *)__pyx_v_Ox_irr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "GBM.pyx":311
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def hierarchy(int iden, int daughter, np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, double epsilon):             # <<<<<<<<<<<<<<
 * 
 *     # Hierarchy for division of tumour cells according to Lan et al. (2017)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3GBM_13hierarchy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3GBM_13hierarchy = {"hierarchy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3GBM_13hierarchy, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3GBM_13hierarchy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_iden;
  int __pyx_v_daughter;
  PyArrayObject *__pyx_v_GSC = 0;
  PyArrayObject *__pyx_v_GPP = 0;
  PyArrayObject *__pyx_v_GDS = 0;
  double __pyx_v_epsilon;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hierarchy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iden,&__pyx_n_s_daughter,&__pyx_n_s_GSC,&__pyx_n_s_GPP,&__pyx_n_s_GDS,&__pyx_n_s_epsilon,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_iden)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_daughter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hierarchy", 1, 6, 6, 1); __PYX_ERR(0, 311, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_GSC)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hierarchy", 1, 6, 6, 2); __PYX_ERR(0, 311, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_GPP)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hierarchy", 1, 6, 6, 3); __PYX_ERR(0, 311, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_GDS)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hierarchy", 1, 6, 6, 4); __PYX_ERR(0, 311, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_epsilon)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hierarchy", 1, 6, 6, 5); __PYX_ERR(0, 311, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "hierarchy") < 0)) __PYX_ERR(0, 311, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_iden = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_iden == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 311, __pyx_L3_error)
    __pyx_v_daughter = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_daughter == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 311, __pyx_L3_error)
    __pyx_v_GSC = ((PyArrayObject *)values[2]);
    __pyx_v_GPP = ((PyArrayObject *)values[3]);
    __pyx_v_GDS = ((PyArrayObject *)values[4]);
    __pyx_v_epsilon = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_epsilon == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 311, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hierarchy", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 311, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("GBM.hierarchy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_GSC), __pyx_ptype_5numpy_ndarray, 1, "GSC", 0))) __PYX_ERR(0, 311, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_GPP), __pyx_ptype_5numpy_ndarray, 1, "GPP", 0))) __PYX_ERR(0, 311, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_GDS), __pyx_ptype_5numpy_ndarray, 1, "GDS", 0))) __PYX_ERR(0, 311, __pyx_L1_error)
  __pyx_r = __pyx_pf_3GBM_12hierarchy(__pyx_self, __pyx_v_iden, __pyx_v_daughter, __pyx_v_GSC, __pyx_v_GPP, __pyx_v_GDS, __pyx_v_epsilon);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3GBM_12hierarchy(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_iden, int __pyx_v_daughter, PyArrayObject *__pyx_v_GSC, PyArrayObject *__pyx_v_GPP, PyArrayObject *__pyx_v_GDS, double __pyx_v_epsilon) {
  double __pyx_v_progeny;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hierarchy", 0);

  /* "GBM.pyx":318
 *         double drand48()
 * 
 *     cdef double progeny = drand48()             # <<<<<<<<<<<<<<
 * 
 *     if iden == 0:
 */
  __pyx_v_progeny = drand48();

  /* "GBM.pyx":320
 *     cdef double progeny = drand48()
 * 
 *     if iden == 0:             # <<<<<<<<<<<<<<
 *         if progeny <= 1. - epsilon:
 *             GSC[daughter] += 1.
 */
  switch (__pyx_v_iden) {
    case 0:

    /* "GBM.pyx":321
 * 
 *     if iden == 0:
 *         if progeny <= 1. - epsilon:             # <<<<<<<<<<<<<<
 *             GSC[daughter] += 1.
 *         else:
 */
    __pyx_t_1 = ((__pyx_v_progeny <= (1. - __pyx_v_epsilon)) != 0);
    if (__pyx_t_1) {

      /* "GBM.pyx":322
 *     if iden == 0:
 *         if progeny <= 1. - epsilon:
 *             GSC[daughter] += 1.             # <<<<<<<<<<<<<<
 *         else:
 *             GPP[daughter] += 1.
 */
      __pyx_t_2 = __pyx_v_daughter;
      __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_GSC), __pyx_t_2, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 322, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyFloat_AddObjC(__pyx_t_3, __pyx_float_1_, 1., 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 322, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GSC), __pyx_t_2, __pyx_t_4, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 322, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "GBM.pyx":321
 * 
 *     if iden == 0:
 *         if progeny <= 1. - epsilon:             # <<<<<<<<<<<<<<
 *             GSC[daughter] += 1.
 *         else:
 */
      goto __pyx_L3;
    }

    /* "GBM.pyx":324
 *             GSC[daughter] += 1.
 *         else:
 *             GPP[daughter] += 1.             # <<<<<<<<<<<<<<
 *     elif iden == 1:
 *         if progeny <= 0.5:
 */
    /*else*/ {
      __pyx_t_2 = __pyx_v_daughter;
      __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_GPP), __pyx_t_2, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyFloat_AddObjC(__pyx_t_4, __pyx_float_1_, 1., 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GPP), __pyx_t_2, __pyx_t_3, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 324, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L3:;

    /* "GBM.pyx":320
 *     cdef double progeny = drand48()
 * 
 *     if iden == 0:             # <<<<<<<<<<<<<<
 *         if progeny <= 1. - epsilon:
 *             GSC[daughter] += 1.
 */
    break;
    case 1:

    /* "GBM.pyx":326
 *             GPP[daughter] += 1.
 *     elif iden == 1:
 *         if progeny <= 0.5:             # <<<<<<<<<<<<<<
 *             GPP[daughter] += 1.
 *         else:
 */
    __pyx_t_1 = ((__pyx_v_progeny <= 0.5) != 0);
    if (__pyx_t_1) {

      /* "GBM.pyx":327
 *     elif iden == 1:
 *         if progeny <= 0.5:
 *             GPP[daughter] += 1.             # <<<<<<<<<<<<<<
 *         else:
 *             GDS[daughter] += 1.
 */
      __pyx_t_2 = __pyx_v_daughter;
      __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_GPP), __pyx_t_2, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyFloat_AddObjC(__pyx_t_3, __pyx_float_1_, 1., 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GPP), __pyx_t_2, __pyx_t_4, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 327, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "GBM.pyx":326
 *             GPP[daughter] += 1.
 *     elif iden == 1:
 *         if progeny <= 0.5:             # <<<<<<<<<<<<<<
 *             GPP[daughter] += 1.
 *         else:
 */
      goto __pyx_L4;
    }

    /* "GBM.pyx":329
 *             GPP[daughter] += 1.
 *         else:
 *             GDS[daughter] += 1.             # <<<<<<<<<<<<<<
 * 
 *     return GSC, GPP, GDS
 */
    /*else*/ {
      __pyx_t_2 = __pyx_v_daughter;
      __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_GDS), __pyx_t_2, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 329, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyFloat_AddObjC(__pyx_t_4, __pyx_float_1_, 1., 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 329, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GDS), __pyx_t_2, __pyx_t_3, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 329, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L4:;

    /* "GBM.pyx":325
 *         else:
 *             GPP[daughter] += 1.
 *     elif iden == 1:             # <<<<<<<<<<<<<<
 *         if progeny <= 0.5:
 *             GPP[daughter] += 1.
 */
    break;
    default: break;
  }

  /* "GBM.pyx":331
 *             GDS[daughter] += 1.
 * 
 *     return GSC, GPP, GDS             # <<<<<<<<<<<<<<
 * 
 * #=========================================
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_GSC));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_GSC));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_GSC));
  __Pyx_INCREF(((PyObject *)__pyx_v_GPP));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_GPP));
  PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_GPP));
  __Pyx_INCREF(((PyObject *)__pyx_v_GDS));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_GDS));
  PyTuple_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_v_GDS));
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "GBM.pyx":311
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def hierarchy(int iden, int daughter, np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, double epsilon):             # <<<<<<<<<<<<<<
 * 
 *     # Hierarchy for division of tumour cells according to Lan et al. (2017)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("GBM.hierarchy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "GBM.pyx":339
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def write_snapshot(int tstart, str name, list Input, np.ndarray Ox_irr, np.ndarray points, np.ndarray pl, np.ndarray phs, np.ndarray Cell_pop, np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, np.ndarray Alive, np.ndarray Dead, np.ndarray Rim, list Discarded):             # <<<<<<<<<<<<<<
 * 
 *     hf = h5py.File(name,"w")
 */

/* Python wrapper */
static PyObject *__pyx_pw_3GBM_15write_snapshot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3GBM_15write_snapshot = {"write_snapshot", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3GBM_15write_snapshot, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3GBM_15write_snapshot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_tstart;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_Input = 0;
  PyArrayObject *__pyx_v_Ox_irr = 0;
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_pl = 0;
  PyArrayObject *__pyx_v_phs = 0;
  PyArrayObject *__pyx_v_Cell_pop = 0;
  PyArrayObject *__pyx_v_GSC = 0;
  PyArrayObject *__pyx_v_GPP = 0;
  PyArrayObject *__pyx_v_GDS = 0;
  PyArrayObject *__pyx_v_Alive = 0;
  PyArrayObject *__pyx_v_Dead = 0;
  PyArrayObject *__pyx_v_Rim = 0;
  PyObject *__pyx_v_Discarded = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_snapshot (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tstart,&__pyx_n_s_name,&__pyx_n_s_Input,&__pyx_n_s_Ox_irr,&__pyx_n_s_points,&__pyx_n_s_pl,&__pyx_n_s_phs,&__pyx_n_s_Cell_pop,&__pyx_n_s_GSC,&__pyx_n_s_GPP,&__pyx_n_s_GDS,&__pyx_n_s_Alive,&__pyx_n_s_Dead,&__pyx_n_s_Rim,&__pyx_n_s_Discarded,0};
    PyObject* values[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tstart)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_snapshot", 1, 15, 15, 1); __PYX_ERR(0, 339, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Input)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_snapshot", 1, 15, 15, 2); __PYX_ERR(0, 339, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Ox_irr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_snapshot", 1, 15, 15, 3); __PYX_ERR(0, 339, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_snapshot", 1, 15, 15, 4); __PYX_ERR(0, 339, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_snapshot", 1, 15, 15, 5); __PYX_ERR(0, 339, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_phs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_snapshot", 1, 15, 15, 6); __PYX_ERR(0, 339, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Cell_pop)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_snapshot", 1, 15, 15, 7); __PYX_ERR(0, 339, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_GSC)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_snapshot", 1, 15, 15, 8); __PYX_ERR(0, 339, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_GPP)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_snapshot", 1, 15, 15, 9); __PYX_ERR(0, 339, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_GDS)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_snapshot", 1, 15, 15, 10); __PYX_ERR(0, 339, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Alive)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_snapshot", 1, 15, 15, 11); __PYX_ERR(0, 339, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Dead)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_snapshot", 1, 15, 15, 12); __PYX_ERR(0, 339, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Rim)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_snapshot", 1, 15, 15, 13); __PYX_ERR(0, 339, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Discarded)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_snapshot", 1, 15, 15, 14); __PYX_ERR(0, 339, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "write_snapshot") < 0)) __PYX_ERR(0, 339, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 15) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
    }
    __pyx_v_tstart = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_tstart == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 339, __pyx_L3_error)
    __pyx_v_name = ((PyObject*)values[1]);
    __pyx_v_Input = ((PyObject*)values[2]);
    __pyx_v_Ox_irr = ((PyArrayObject *)values[3]);
    __pyx_v_points = ((PyArrayObject *)values[4]);
    __pyx_v_pl = ((PyArrayObject *)values[5]);
    __pyx_v_phs = ((PyArrayObject *)values[6]);
    __pyx_v_Cell_pop = ((PyArrayObject *)values[7]);
    __pyx_v_GSC = ((PyArrayObject *)values[8]);
    __pyx_v_GPP = ((PyArrayObject *)values[9]);
    __pyx_v_GDS = ((PyArrayObject *)values[10]);
    __pyx_v_Alive = ((PyArrayObject *)values[11]);
    __pyx_v_Dead = ((PyArrayObject *)values[12]);
    __pyx_v_Rim = ((PyArrayObject *)values[13]);
    __pyx_v_Discarded = ((PyObject*)values[14]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_snapshot", 1, 15, 15, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 339, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("GBM.write_snapshot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyUnicode_Type), 1, "name", 1))) __PYX_ERR(0, 339, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Input), (&PyList_Type), 1, "Input", 1))) __PYX_ERR(0, 339, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Ox_irr), __pyx_ptype_5numpy_ndarray, 1, "Ox_irr", 0))) __PYX_ERR(0, 339, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 1, "points", 0))) __PYX_ERR(0, 339, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pl), __pyx_ptype_5numpy_ndarray, 1, "pl", 0))) __PYX_ERR(0, 339, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_phs), __pyx_ptype_5numpy_ndarray, 1, "phs", 0))) __PYX_ERR(0, 339, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Cell_pop), __pyx_ptype_5numpy_ndarray, 1, "Cell_pop", 0))) __PYX_ERR(0, 339, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_GSC), __pyx_ptype_5numpy_ndarray, 1, "GSC", 0))) __PYX_ERR(0, 339, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_GPP), __pyx_ptype_5numpy_ndarray, 1, "GPP", 0))) __PYX_ERR(0, 339, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_GDS), __pyx_ptype_5numpy_ndarray, 1, "GDS", 0))) __PYX_ERR(0, 339, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Alive), __pyx_ptype_5numpy_ndarray, 1, "Alive", 0))) __PYX_ERR(0, 339, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Dead), __pyx_ptype_5numpy_ndarray, 1, "Dead", 0))) __PYX_ERR(0, 339, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Rim), __pyx_ptype_5numpy_ndarray, 1, "Rim", 0))) __PYX_ERR(0, 339, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Discarded), (&PyList_Type), 1, "Discarded", 1))) __PYX_ERR(0, 339, __pyx_L1_error)
  __pyx_r = __pyx_pf_3GBM_14write_snapshot(__pyx_self, __pyx_v_tstart, __pyx_v_name, __pyx_v_Input, __pyx_v_Ox_irr, __pyx_v_points, __pyx_v_pl, __pyx_v_phs, __pyx_v_Cell_pop, __pyx_v_GSC, __pyx_v_GPP, __pyx_v_GDS, __pyx_v_Alive, __pyx_v_Dead, __pyx_v_Rim, __pyx_v_Discarded);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3GBM_14write_snapshot(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_tstart, PyObject *__pyx_v_name, PyObject *__pyx_v_Input, PyArrayObject *__pyx_v_Ox_irr, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_pl, PyArrayObject *__pyx_v_phs, PyArrayObject *__pyx_v_Cell_pop, PyArrayObject *__pyx_v_GSC, PyArrayObject *__pyx_v_GPP, PyArrayObject *__pyx_v_GDS, PyArrayObject *__pyx_v_Alive, PyArrayObject *__pyx_v_Dead, PyArrayObject *__pyx_v_Rim, PyObject *__pyx_v_Discarded) {
  PyObject *__pyx_v_hf = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_snapshot", 0);

  /* "GBM.pyx":341
 * def write_snapshot(int tstart, str name, list Input, np.ndarray Ox_irr, np.ndarray points, np.ndarray pl, np.ndarray phs, np.ndarray Cell_pop, np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, np.ndarray Alive, np.ndarray Dead, np.ndarray Rim, list Discarded):
 * 
 *     hf = h5py.File(name,"w")             # <<<<<<<<<<<<<<
 *     hf.create_dataset("time_label", data=tstart)
 *     hf.create_dataset("Input", data=Input)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_h5py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_File); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_name, __pyx_n_u_w};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_name, __pyx_n_u_w};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_name);
    __Pyx_INCREF(__pyx_n_u_w);
    __Pyx_GIVEREF(__pyx_n_u_w);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_w);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_hf = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "GBM.pyx":342
 * 
 *     hf = h5py.File(name,"w")
 *     hf.create_dataset("time_label", data=tstart)             # <<<<<<<<<<<<<<
 *     hf.create_dataset("Input", data=Input)
 *     hf.create_dataset('Oxygen', data=Ox_irr)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_hf, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_tstart); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_data, __pyx_t_5) < 0) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__5, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "GBM.pyx":343
 *     hf = h5py.File(name,"w")
 *     hf.create_dataset("time_label", data=tstart)
 *     hf.create_dataset("Input", data=Input)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('Oxygen', data=Ox_irr)
 *     hf.create_dataset('Points', data=points)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_hf, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_data, __pyx_v_Input) < 0) __PYX_ERR(0, 343, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__6, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "GBM.pyx":344
 *     hf.create_dataset("time_label", data=tstart)
 *     hf.create_dataset("Input", data=Input)
 *     hf.create_dataset('Oxygen', data=Ox_irr)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('Points', data=points)
 *     hf.create_dataset('points_low', data=pl)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_hf, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_data, ((PyObject *)__pyx_v_Ox_irr)) < 0) __PYX_ERR(0, 344, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__7, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "GBM.pyx":345
 *     hf.create_dataset("Input", data=Input)
 *     hf.create_dataset('Oxygen', data=Ox_irr)
 *     hf.create_dataset('Points', data=points)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('points_low', data=pl)
 *     hf.create_dataset('points_high', data=phs)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_hf, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_data, ((PyObject *)__pyx_v_points)) < 0) __PYX_ERR(0, 345, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__8, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "GBM.pyx":346
 *     hf.create_dataset('Oxygen', data=Ox_irr)
 *     hf.create_dataset('Points', data=points)
 *     hf.create_dataset('points_low', data=pl)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('points_high', data=phs)
 *     hf.create_dataset('Cell_population', data=Cell_pop)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_hf, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_data, ((PyObject *)__pyx_v_pl)) < 0) __PYX_ERR(0, 346, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__9, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "GBM.pyx":347
 *     hf.create_dataset('Points', data=points)
 *     hf.create_dataset('points_low', data=pl)
 *     hf.create_dataset('points_high', data=phs)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('Cell_population', data=Cell_pop)
 *     hf.create_dataset('GSC_population', data=GSC)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_hf, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_data, ((PyObject *)__pyx_v_phs)) < 0) __PYX_ERR(0, 347, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__10, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "GBM.pyx":348
 *     hf.create_dataset('points_low', data=pl)
 *     hf.create_dataset('points_high', data=phs)
 *     hf.create_dataset('Cell_population', data=Cell_pop)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('GSC_population', data=GSC)
 *     hf.create_dataset('GPP_population', data=GPP)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_hf, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_data, ((PyObject *)__pyx_v_Cell_pop)) < 0) __PYX_ERR(0, 348, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__11, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "GBM.pyx":349
 *     hf.create_dataset('points_high', data=phs)
 *     hf.create_dataset('Cell_population', data=Cell_pop)
 *     hf.create_dataset('GSC_population', data=GSC)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('GPP_population', data=GPP)
 *     hf.create_dataset('GDS_population', data=GDS)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_hf, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_data, ((PyObject *)__pyx_v_GSC)) < 0) __PYX_ERR(0, 349, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__12, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "GBM.pyx":350
 *     hf.create_dataset('Cell_population', data=Cell_pop)
 *     hf.create_dataset('GSC_population', data=GSC)
 *     hf.create_dataset('GPP_population', data=GPP)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('GDS_population', data=GDS)
 *     hf.create_dataset('Alive_population', data=Alive)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_hf, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_data, ((PyObject *)__pyx_v_GPP)) < 0) __PYX_ERR(0, 350, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__13, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "GBM.pyx":351
 *     hf.create_dataset('GSC_population', data=GSC)
 *     hf.create_dataset('GPP_population', data=GPP)
 *     hf.create_dataset('GDS_population', data=GDS)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('Alive_population', data=Alive)
 *     hf.create_dataset('Dead_population', data=Dead)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_hf, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_data, ((PyObject *)__pyx_v_GDS)) < 0) __PYX_ERR(0, 351, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__14, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "GBM.pyx":352
 *     hf.create_dataset('GPP_population', data=GPP)
 *     hf.create_dataset('GDS_population', data=GDS)
 *     hf.create_dataset('Alive_population', data=Alive)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('Dead_population', data=Dead)
 *     hf.create_dataset('Distance_to_rim', data=Rim)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_hf, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_data, ((PyObject *)__pyx_v_Alive)) < 0) __PYX_ERR(0, 352, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__15, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "GBM.pyx":353
 *     hf.create_dataset('GDS_population', data=GDS)
 *     hf.create_dataset('Alive_population', data=Alive)
 *     hf.create_dataset('Dead_population', data=Dead)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('Distance_to_rim', data=Rim)
 *     hf.create_dataset('Discarded_points', data=Discarded)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_hf, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_data, ((PyObject *)__pyx_v_Dead)) < 0) __PYX_ERR(0, 353, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__16, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "GBM.pyx":354
 *     hf.create_dataset('Alive_population', data=Alive)
 *     hf.create_dataset('Dead_population', data=Dead)
 *     hf.create_dataset('Distance_to_rim', data=Rim)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('Discarded_points', data=Discarded)
 *     hf.close()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_hf, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_data, ((PyObject *)__pyx_v_Rim)) < 0) __PYX_ERR(0, 354, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__17, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "GBM.pyx":355
 *     hf.create_dataset('Dead_population', data=Dead)
 *     hf.create_dataset('Distance_to_rim', data=Rim)
 *     hf.create_dataset('Discarded_points', data=Discarded)             # <<<<<<<<<<<<<<
 *     hf.close()
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_hf, __pyx_n_s_create_dataset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_data, __pyx_v_Discarded) < 0) __PYX_ERR(0, 355, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__18, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "GBM.pyx":356
 *     hf.create_dataset('Distance_to_rim', data=Rim)
 *     hf.create_dataset('Discarded_points', data=Discarded)
 *     hf.close()             # <<<<<<<<<<<<<<
 * 
 * #=========================================
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_hf, __pyx_n_s_close); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "GBM.pyx":339
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def write_snapshot(int tstart, str name, list Input, np.ndarray Ox_irr, np.ndarray points, np.ndarray pl, np.ndarray phs, np.ndarray Cell_pop, np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, np.ndarray Alive, np.ndarray Dead, np.ndarray Rim, list Discarded):             # <<<<<<<<<<<<<<
 * 
 *     hf = h5py.File(name,"w")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("GBM.write_snapshot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_hf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "GBM.pyx":364
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def read_snapshot(name):             # <<<<<<<<<<<<<<
 * 
 *     f = h5py.File(name, 'r')
 */

/* Python wrapper */
static PyObject *__pyx_pw_3GBM_17read_snapshot(PyObject *__pyx_self, PyObject *__pyx_v_name); /*proto*/
static PyMethodDef __pyx_mdef_3GBM_17read_snapshot = {"read_snapshot", (PyCFunction)__pyx_pw_3GBM_17read_snapshot, METH_O, 0};
static PyObject *__pyx_pw_3GBM_17read_snapshot(PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_snapshot (wrapper)", 0);
  __pyx_r = __pyx_pf_3GBM_16read_snapshot(__pyx_self, ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3GBM_16read_snapshot(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_Input = NULL;
  PyObject *__pyx_v_Ox_irr = NULL;
  PyObject *__pyx_v_points = NULL;
  PyObject *__pyx_v_pl = NULL;
  PyObject *__pyx_v_phs = NULL;
  PyObject *__pyx_v_Cell_pop = NULL;
  PyObject *__pyx_v_GSC = NULL;
  PyObject *__pyx_v_GPP = NULL;
  PyObject *__pyx_v_GDS = NULL;
  PyObject *__pyx_v_Alive = NULL;
  PyObject *__pyx_v_Dead = NULL;
  PyObject *__pyx_v_Rim = NULL;
  PyObject *__pyx_v_Discarded = NULL;
  PyObject *__pyx_v_tstart = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_snapshot", 0);

  /* "GBM.pyx":366
 * def read_snapshot(name):
 * 
 *     f = h5py.File(name, 'r')             # <<<<<<<<<<<<<<
 *     Input = f['Input'][:]
 *     Ox_irr = f['Oxygen'][:]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_h5py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_File); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_name, __pyx_n_u_r};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_name, __pyx_n_u_r};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_name);
    __Pyx_INCREF(__pyx_n_u_r);
    __Pyx_GIVEREF(__pyx_n_u_r);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_u_r);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_f = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "GBM.pyx":367
 * 
 *     f = h5py.File(name, 'r')
 *     Input = f['Input'][:]             # <<<<<<<<<<<<<<
 *     Ox_irr = f['Oxygen'][:]
 *     points = f['Points'][:]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_f, __pyx_n_u_Input); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, 0, NULL, NULL, &__pyx_slice_, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_Input = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "GBM.pyx":368
 *     f = h5py.File(name, 'r')
 *     Input = f['Input'][:]
 *     Ox_irr = f['Oxygen'][:]             # <<<<<<<<<<<<<<
 *     points = f['Points'][:]
 *     pl = f['points_low'][:]
 */
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_f, __pyx_n_u_Oxygen); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_3, 0, 0, NULL, NULL, &__pyx_slice_, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_Ox_irr = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "GBM.pyx":369
 *     Input = f['Input'][:]
 *     Ox_irr = f['Oxygen'][:]
 *     points = f['Points'][:]             # <<<<<<<<<<<<<<
 *     pl = f['points_low'][:]
 *     phs = f['points_high'][:]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_f, __pyx_n_u_Points); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, 0, NULL, NULL, &__pyx_slice_, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_points = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "GBM.pyx":370
 *     Ox_irr = f['Oxygen'][:]
 *     points = f['Points'][:]
 *     pl = f['points_low'][:]             # <<<<<<<<<<<<<<
 *     phs = f['points_high'][:]
 *     Cell_pop = f['Cell_population'][:]
 */
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_f, __pyx_n_u_points_low); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_3, 0, 0, NULL, NULL, &__pyx_slice_, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_pl = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "GBM.pyx":371
 *     points = f['Points'][:]
 *     pl = f['points_low'][:]
 *     phs = f['points_high'][:]             # <<<<<<<<<<<<<<
 *     Cell_pop = f['Cell_population'][:]
 *     GSC = f['GSC_population'][:]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_f, __pyx_n_u_points_high); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, 0, NULL, NULL, &__pyx_slice_, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_phs = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "GBM.pyx":372
 *     pl = f['points_low'][:]
 *     phs = f['points_high'][:]
 *     Cell_pop = f['Cell_population'][:]             # <<<<<<<<<<<<<<
 *     GSC = f['GSC_population'][:]
 *     GPP = f['GPP_population'][:]
 */
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_f, __pyx_n_u_Cell_population); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_3, 0, 0, NULL, NULL, &__pyx_slice_, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_Cell_pop = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "GBM.pyx":373
 *     phs = f['points_high'][:]
 *     Cell_pop = f['Cell_population'][:]
 *     GSC = f['GSC_population'][:]             # <<<<<<<<<<<<<<
 *     GPP = f['GPP_population'][:]
 *     GDS = f['GDS_population'][:]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_f, __pyx_n_u_GSC_population); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, 0, NULL, NULL, &__pyx_slice_, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_GSC = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "GBM.pyx":374
 *     Cell_pop = f['Cell_population'][:]
 *     GSC = f['GSC_population'][:]
 *     GPP = f['GPP_population'][:]             # <<<<<<<<<<<<<<
 *     GDS = f['GDS_population'][:]
 *     Alive = f['Alive_population'][:]
 */
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_f, __pyx_n_u_GPP_population); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_3, 0, 0, NULL, NULL, &__pyx_slice_, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_GPP = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "GBM.pyx":375
 *     GSC = f['GSC_population'][:]
 *     GPP = f['GPP_population'][:]
 *     GDS = f['GDS_population'][:]             # <<<<<<<<<<<<<<
 *     Alive = f['Alive_population'][:]
 *     Dead = f['Dead_population'][:]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_f, __pyx_n_u_GDS_population); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, 0, NULL, NULL, &__pyx_slice_, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_GDS = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "GBM.pyx":376
 *     GPP = f['GPP_population'][:]
 *     GDS = f['GDS_population'][:]
 *     Alive = f['Alive_population'][:]             # <<<<<<<<<<<<<<
 *     Dead = f['Dead_population'][:]
 *     Rim = f['Distance_to_rim'][:]
 */
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_f, __pyx_n_u_Alive_population); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_3, 0, 0, NULL, NULL, &__pyx_slice_, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_Alive = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "GBM.pyx":377
 *     GDS = f['GDS_population'][:]
 *     Alive = f['Alive_population'][:]
 *     Dead = f['Dead_population'][:]             # <<<<<<<<<<<<<<
 *     Rim = f['Distance_to_rim'][:]
 *     Discarded = list(f['Discarded_points'][:])
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_f, __pyx_n_u_Dead_population); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, 0, NULL, NULL, &__pyx_slice_, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_Dead = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "GBM.pyx":378
 *     Alive = f['Alive_population'][:]
 *     Dead = f['Dead_population'][:]
 *     Rim = f['Distance_to_rim'][:]             # <<<<<<<<<<<<<<
 *     Discarded = list(f['Discarded_points'][:])
 *     tstart = f['time_label'][()]
 */
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_f, __pyx_n_u_Distance_to_rim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_3, 0, 0, NULL, NULL, &__pyx_slice_, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_Rim = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "GBM.pyx":379
 *     Dead = f['Dead_population'][:]
 *     Rim = f['Distance_to_rim'][:]
 *     Discarded = list(f['Discarded_points'][:])             # <<<<<<<<<<<<<<
 *     tstart = f['time_label'][()]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_f, __pyx_n_u_Discarded_points); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, 0, NULL, NULL, &__pyx_slice_, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PySequence_List(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_Discarded = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "GBM.pyx":380
 *     Rim = f['Distance_to_rim'][:]
 *     Discarded = list(f['Discarded_points'][:])
 *     tstart = f['time_label'][()]             # <<<<<<<<<<<<<<
 * 
 *     return Input, Ox_irr, points, pl, phs, Cell_pop, GSC, GPP, GDS, Alive, Dead, Rim, Discarded, tstart
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_f, __pyx_n_u_time_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_empty_tuple); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_tstart = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "GBM.pyx":382
 *     tstart = f['time_label'][()]
 * 
 *     return Input, Ox_irr, points, pl, phs, Cell_pop, GSC, GPP, GDS, Alive, Dead, Rim, Discarded, tstart             # <<<<<<<<<<<<<<
 * 
 * #=========================================
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_Input);
  __Pyx_GIVEREF(__pyx_v_Input);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_Input);
  __Pyx_INCREF(__pyx_v_Ox_irr);
  __Pyx_GIVEREF(__pyx_v_Ox_irr);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_Ox_irr);
  __Pyx_INCREF(__pyx_v_points);
  __Pyx_GIVEREF(__pyx_v_points);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_points);
  __Pyx_INCREF(__pyx_v_pl);
  __Pyx_GIVEREF(__pyx_v_pl);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_pl);
  __Pyx_INCREF(__pyx_v_phs);
  __Pyx_GIVEREF(__pyx_v_phs);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_v_phs);
  __Pyx_INCREF(__pyx_v_Cell_pop);
  __Pyx_GIVEREF(__pyx_v_Cell_pop);
  PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_v_Cell_pop);
  __Pyx_INCREF(__pyx_v_GSC);
  __Pyx_GIVEREF(__pyx_v_GSC);
  PyTuple_SET_ITEM(__pyx_t_3, 6, __pyx_v_GSC);
  __Pyx_INCREF(__pyx_v_GPP);
  __Pyx_GIVEREF(__pyx_v_GPP);
  PyTuple_SET_ITEM(__pyx_t_3, 7, __pyx_v_GPP);
  __Pyx_INCREF(__pyx_v_GDS);
  __Pyx_GIVEREF(__pyx_v_GDS);
  PyTuple_SET_ITEM(__pyx_t_3, 8, __pyx_v_GDS);
  __Pyx_INCREF(__pyx_v_Alive);
  __Pyx_GIVEREF(__pyx_v_Alive);
  PyTuple_SET_ITEM(__pyx_t_3, 9, __pyx_v_Alive);
  __Pyx_INCREF(__pyx_v_Dead);
  __Pyx_GIVEREF(__pyx_v_Dead);
  PyTuple_SET_ITEM(__pyx_t_3, 10, __pyx_v_Dead);
  __Pyx_INCREF(__pyx_v_Rim);
  __Pyx_GIVEREF(__pyx_v_Rim);
  PyTuple_SET_ITEM(__pyx_t_3, 11, __pyx_v_Rim);
  __Pyx_INCREF(__pyx_v_Discarded);
  __Pyx_GIVEREF(__pyx_v_Discarded);
  PyTuple_SET_ITEM(__pyx_t_3, 12, __pyx_v_Discarded);
  __Pyx_INCREF(__pyx_v_tstart);
  __Pyx_GIVEREF(__pyx_v_tstart);
  PyTuple_SET_ITEM(__pyx_t_3, 13, __pyx_v_tstart);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "GBM.pyx":364
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def read_snapshot(name):             # <<<<<<<<<<<<<<
 * 
 *     f = h5py.File(name, 'r')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("GBM.read_snapshot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_Input);
  __Pyx_XDECREF(__pyx_v_Ox_irr);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XDECREF(__pyx_v_pl);
  __Pyx_XDECREF(__pyx_v_phs);
  __Pyx_XDECREF(__pyx_v_Cell_pop);
  __Pyx_XDECREF(__pyx_v_GSC);
  __Pyx_XDECREF(__pyx_v_GPP);
  __Pyx_XDECREF(__pyx_v_GDS);
  __Pyx_XDECREF(__pyx_v_Alive);
  __Pyx_XDECREF(__pyx_v_Dead);
  __Pyx_XDECREF(__pyx_v_Rim);
  __Pyx_XDECREF(__pyx_v_Discarded);
  __Pyx_XDECREF(__pyx_v_tstart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "GBM.pyx":391
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def init_Cell_pop(str Restart, list Input):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i, tstart, iden, gsize, resx, resy, steps, SavN, low, Dup, Qup, dx, dy, lx
 */

/* Python wrapper */
static PyObject *__pyx_pw_3GBM_19init_Cell_pop(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3GBM_19init_Cell_pop = {"init_Cell_pop", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3GBM_19init_Cell_pop, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3GBM_19init_Cell_pop(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_Restart = 0;
  PyObject *__pyx_v_Input = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_Cell_pop (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Restart,&__pyx_n_s_Input,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Restart)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Input)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_Cell_pop", 1, 2, 2, 1); __PYX_ERR(0, 391, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_Cell_pop") < 0)) __PYX_ERR(0, 391, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_Restart = ((PyObject*)values[0]);
    __pyx_v_Input = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_Cell_pop", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 391, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("GBM.init_Cell_pop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Restart), (&PyUnicode_Type), 1, "Restart", 1))) __PYX_ERR(0, 391, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Input), (&PyList_Type), 1, "Input", 1))) __PYX_ERR(0, 391, __pyx_L1_error)
  __pyx_r = __pyx_pf_3GBM_18init_Cell_pop(__pyx_self, __pyx_v_Restart, __pyx_v_Input);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3GBM_18init_Cell_pop(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_Restart, PyObject *__pyx_v_Input) {
  int __pyx_v_i;
  int __pyx_v_tstart;
  int __pyx_v_gsize;
  int __pyx_v_resx;
  int __pyx_v_resy;
  CYTHON_UNUSED int __pyx_v_steps;
  CYTHON_UNUSED int __pyx_v_SavN;
  int __pyx_v_low;
  CYTHON_UNUSED int __pyx_v_Dup;
  CYTHON_UNUSED int __pyx_v_Qup;
  int __pyx_v_dx;
  int __pyx_v_dy;
  int __pyx_v_lx;
  CYTHON_UNUSED double __pyx_v_Dox;
  CYTHON_UNUSED double __pyx_v_lambdaC;
  CYTHON_UNUSED double __pyx_v_O2_crit;
  CYTHON_UNUSED double __pyx_v_trapped;
  CYTHON_UNUSED double __pyx_v_epsilon;
  double __pyx_v_xx;
  PyArrayObject *__pyx_v_index = 0;
  PyArrayObject *__pyx_v_Cell_pop = 0;
  PyArrayObject *__pyx_v_GSC = 0;
  PyArrayObject *__pyx_v_GPP = 0;
  PyArrayObject *__pyx_v_GDS = 0;
  PyArrayObject *__pyx_v_Alive = 0;
  PyArrayObject *__pyx_v_Dead = 0;
  PyArrayObject *__pyx_v_Rim = 0;
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_Ox_irr = 0;
  PyArrayObject *__pyx_v_Ys_rh = 0;
  PyArrayObject *__pyx_v_Xs_rh = 0;
  PyArrayObject *__pyx_v_x = 0;
  PyArrayObject *__pyx_v_y = 0;
  PyArrayObject *__pyx_v_Xs = 0;
  PyArrayObject *__pyx_v_Ys = 0;
  PyArrayObject *__pyx_v_sx = 0;
  PyArrayObject *__pyx_v_sy = 0;
  PyArrayObject *__pyx_v_X = 0;
  PyArrayObject *__pyx_v_Y = 0;
  PyObject *__pyx_v_Discarded = 0;
  CYTHON_UNUSED PyObject *__pyx_v_Pdie = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_Pprol = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_Pdivi = NULL;
  PyObject *__pyx_v_mesh = NULL;
  PyObject *__pyx_v_Xs_rl = NULL;
  PyObject *__pyx_v_Ys_rl = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_pl = NULL;
  PyObject *__pyx_v_phs = NULL;
  PyObject *__pyx_v_voronoi_kdtree = NULL;
  PyObject *__pyx_v_tree = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  int __pyx_t_25;
  double __pyx_t_26;
  double __pyx_t_27;
  double __pyx_t_28;
  int __pyx_t_29;
  int __pyx_t_30;
  double __pyx_t_31;
  int __pyx_t_32;
  double __pyx_t_33;
  PyObject *(*__pyx_t_34)(PyObject *);
  Py_ssize_t __pyx_t_35;
  int __pyx_t_36;
  long __pyx_t_37;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init_Cell_pop", 0);
  __Pyx_INCREF(__pyx_v_Input);

  /* "GBM.pyx":400
 *     cdef list Discarded, Xs_r, Ys_r
 * 
 *     if Restart == "None":             # <<<<<<<<<<<<<<
 * 
 *         resx, resy, dx, dy, steps, SavN, O2_crit, lambdaC, Dox, low, Dup, trapped, Qup, epsilon, Pdie, Pprol, Pdivi = Input
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_Restart, __pyx_n_u_None, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 400, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "GBM.pyx":402
 *     if Restart == "None":
 * 
 *         resx, resy, dx, dy, steps, SavN, O2_crit, lambdaC, Dox, low, Dup, trapped, Qup, epsilon, Pdie, Pprol, Pdivi = Input             # <<<<<<<<<<<<<<
 * 
 *         mesh = Grid2D(dx=dx, dy=dy, nx=resx, ny=resy)
 */
    if (likely(__pyx_v_Input != Py_None)) {
      PyObject* sequence = __pyx_v_Input;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 17)) {
        if (size > 17) __Pyx_RaiseTooManyValuesError(17);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 402, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 5); 
      __pyx_t_9 = PyList_GET_ITEM(sequence, 6); 
      __pyx_t_10 = PyList_GET_ITEM(sequence, 7); 
      __pyx_t_11 = PyList_GET_ITEM(sequence, 8); 
      __pyx_t_12 = PyList_GET_ITEM(sequence, 9); 
      __pyx_t_13 = PyList_GET_ITEM(sequence, 10); 
      __pyx_t_14 = PyList_GET_ITEM(sequence, 11); 
      __pyx_t_15 = PyList_GET_ITEM(sequence, 12); 
      __pyx_t_16 = PyList_GET_ITEM(sequence, 13); 
      __pyx_t_17 = PyList_GET_ITEM(sequence, 14); 
      __pyx_t_18 = PyList_GET_ITEM(sequence, 15); 
      __pyx_t_19 = PyList_GET_ITEM(sequence, 16); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(__pyx_t_17);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(__pyx_t_19);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[17] = {&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9,&__pyx_t_10,&__pyx_t_11,&__pyx_t_12,&__pyx_t_13,&__pyx_t_14,&__pyx_t_15,&__pyx_t_16,&__pyx_t_17,&__pyx_t_18,&__pyx_t_19};
        for (i=0; i < 17; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 402, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 402, __pyx_L1_error)
    }
    __pyx_t_20 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_20 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_21 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_21 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_22 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_22 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_23 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_23 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_24 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_24 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_25 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_25 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_26 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_26 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_27 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_27 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_28 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_28 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_29 = __Pyx_PyInt_As_int(__pyx_t_12); if (unlikely((__pyx_t_29 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_30 = __Pyx_PyInt_As_int(__pyx_t_13); if (unlikely((__pyx_t_30 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_31 = __pyx_PyFloat_AsDouble(__pyx_t_14); if (unlikely((__pyx_t_31 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_15); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_33 = __pyx_PyFloat_AsDouble(__pyx_t_16); if (unlikely((__pyx_t_33 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_v_resx = __pyx_t_20;
    __pyx_v_resy = __pyx_t_21;
    __pyx_v_dx = __pyx_t_22;
    __pyx_v_dy = __pyx_t_23;
    __pyx_v_steps = __pyx_t_24;
    __pyx_v_SavN = __pyx_t_25;
    __pyx_v_O2_crit = __pyx_t_26;
    __pyx_v_lambdaC = __pyx_t_27;
    __pyx_v_Dox = __pyx_t_28;
    __pyx_v_low = __pyx_t_29;
    __pyx_v_Dup = __pyx_t_30;
    __pyx_v_trapped = __pyx_t_31;
    __pyx_v_Qup = __pyx_t_32;
    __pyx_v_epsilon = __pyx_t_33;
    __pyx_v_Pdie = __pyx_t_17;
    __pyx_t_17 = 0;
    __pyx_v_Pprol = __pyx_t_18;
    __pyx_t_18 = 0;
    __pyx_v_Pdivi = __pyx_t_19;
    __pyx_t_19 = 0;

    /* "GBM.pyx":404
 *         resx, resy, dx, dy, steps, SavN, O2_crit, lambdaC, Dox, low, Dup, trapped, Qup, epsilon, Pdie, Pprol, Pdivi = Input
 * 
 *         mesh = Grid2D(dx=dx, dy=dy, nx=resx, ny=resy)             # <<<<<<<<<<<<<<
 *         x = np.arange(mesh.nx) * mesh.dx
 *         y = np.arange(mesh.ny) * mesh.dy
 */
    __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_Grid2D); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_18 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_17 = __Pyx_PyInt_From_int(__pyx_v_dx); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    if (PyDict_SetItem(__pyx_t_18, __pyx_n_s_dx, __pyx_t_17) < 0) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_17 = __Pyx_PyInt_From_int(__pyx_v_dy); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    if (PyDict_SetItem(__pyx_t_18, __pyx_n_s_dy, __pyx_t_17) < 0) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_17 = __Pyx_PyInt_From_int(__pyx_v_resx); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    if (PyDict_SetItem(__pyx_t_18, __pyx_n_s_nx, __pyx_t_17) < 0) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_17 = __Pyx_PyInt_From_int(__pyx_v_resy); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    if (PyDict_SetItem(__pyx_t_18, __pyx_n_s_ny, __pyx_t_17) < 0) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_empty_tuple, __pyx_t_18); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_v_mesh = __pyx_t_17;
    __pyx_t_17 = 0;

    /* "GBM.pyx":405
 * 
 *         mesh = Grid2D(dx=dx, dy=dy, nx=resx, ny=resy)
 *         x = np.arange(mesh.nx) * mesh.dx             # <<<<<<<<<<<<<<
 *         y = np.arange(mesh.ny) * mesh.dy
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_np); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_arange); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_v_mesh, __pyx_n_s_nx); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_16 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_19))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_19);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_19, function);
      }
    }
    __pyx_t_17 = (__pyx_t_16) ? __Pyx_PyObject_Call2Args(__pyx_t_19, __pyx_t_16, __pyx_t_18) : __Pyx_PyObject_CallOneArg(__pyx_t_19, __pyx_t_18);
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_v_mesh, __pyx_n_s_dx); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_18 = PyNumber_Multiply(__pyx_t_17, __pyx_t_19); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    if (!(likely(((__pyx_t_18) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_18, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 405, __pyx_L1_error)
    __pyx_v_x = ((PyArrayObject *)__pyx_t_18);
    __pyx_t_18 = 0;

    /* "GBM.pyx":406
 *         mesh = Grid2D(dx=dx, dy=dy, nx=resx, ny=resy)
 *         x = np.arange(mesh.nx) * mesh.dx
 *         y = np.arange(mesh.ny) * mesh.dy             # <<<<<<<<<<<<<<
 * 
 *         sx = np.random.uniform(0.1,0.9,(resx,resy))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_np); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_arange); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_v_mesh, __pyx_n_s_ny); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_16 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_17);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_17, function);
      }
    }
    __pyx_t_18 = (__pyx_t_16) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_16, __pyx_t_19) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_19);
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_mesh, __pyx_n_s_dy); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_19 = PyNumber_Multiply(__pyx_t_18, __pyx_t_17); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (!(likely(((__pyx_t_19) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_19, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 406, __pyx_L1_error)
    __pyx_v_y = ((PyArrayObject *)__pyx_t_19);
    __pyx_t_19 = 0;

    /* "GBM.pyx":408
 *         y = np.arange(mesh.ny) * mesh.dy
 * 
 *         sx = np.random.uniform(0.1,0.9,(resx,resy))             # <<<<<<<<<<<<<<
 *         sy = np.random.uniform(0.1,0.9,(resx,resy))
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_np); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_random); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_uniform); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_v_resx); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_16 = __Pyx_PyInt_From_int(__pyx_v_resy); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_18);
    PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_18);
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_16);
    __pyx_t_18 = 0;
    __pyx_t_16 = 0;
    __pyx_t_16 = NULL;
    __pyx_t_32 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_17);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_17, function);
        __pyx_t_32 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_float_0_1, __pyx_float_0_9, __pyx_t_15};
      __pyx_t_19 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_32, 3+__pyx_t_32); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 408, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_float_0_1, __pyx_float_0_9, __pyx_t_15};
      __pyx_t_19 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_32, 3+__pyx_t_32); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 408, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    } else
    #endif
    {
      __pyx_t_18 = PyTuple_New(3+__pyx_t_32); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 408, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      if (__pyx_t_16) {
        __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_16); __pyx_t_16 = NULL;
      }
      __Pyx_INCREF(__pyx_float_0_1);
      __Pyx_GIVEREF(__pyx_float_0_1);
      PyTuple_SET_ITEM(__pyx_t_18, 0+__pyx_t_32, __pyx_float_0_1);
      __Pyx_INCREF(__pyx_float_0_9);
      __Pyx_GIVEREF(__pyx_float_0_9);
      PyTuple_SET_ITEM(__pyx_t_18, 1+__pyx_t_32, __pyx_float_0_9);
      __Pyx_GIVEREF(__pyx_t_15);
      PyTuple_SET_ITEM(__pyx_t_18, 2+__pyx_t_32, __pyx_t_15);
      __pyx_t_15 = 0;
      __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_18, NULL); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 408, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    }
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (!(likely(((__pyx_t_19) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_19, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 408, __pyx_L1_error)
    __pyx_v_sx = ((PyArrayObject *)__pyx_t_19);
    __pyx_t_19 = 0;

    /* "GBM.pyx":409
 * 
 *         sx = np.random.uniform(0.1,0.9,(resx,resy))
 *         sy = np.random.uniform(0.1,0.9,(resx,resy))             # <<<<<<<<<<<<<<
 * 
 *         # Regular grid
 */
    __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_np); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_random); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_uniform); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_v_resx); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_v_resy); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_18);
    PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_18);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_15);
    __pyx_t_18 = 0;
    __pyx_t_15 = 0;
    __pyx_t_15 = NULL;
    __pyx_t_32 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_17);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_17, function);
        __pyx_t_32 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[4] = {__pyx_t_15, __pyx_float_0_1, __pyx_float_0_9, __pyx_t_16};
      __pyx_t_19 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_32, 3+__pyx_t_32); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 409, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
      PyObject *__pyx_temp[4] = {__pyx_t_15, __pyx_float_0_1, __pyx_float_0_9, __pyx_t_16};
      __pyx_t_19 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_32, 3+__pyx_t_32); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 409, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    } else
    #endif
    {
      __pyx_t_18 = PyTuple_New(3+__pyx_t_32); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 409, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      if (__pyx_t_15) {
        __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_15); __pyx_t_15 = NULL;
      }
      __Pyx_INCREF(__pyx_float_0_1);
      __Pyx_GIVEREF(__pyx_float_0_1);
      PyTuple_SET_ITEM(__pyx_t_18, 0+__pyx_t_32, __pyx_float_0_1);
      __Pyx_INCREF(__pyx_float_0_9);
      __Pyx_GIVEREF(__pyx_float_0_9);
      PyTuple_SET_ITEM(__pyx_t_18, 1+__pyx_t_32, __pyx_float_0_9);
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_18, 2+__pyx_t_32, __pyx_t_16);
      __pyx_t_16 = 0;
      __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_18, NULL); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 409, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    }
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (!(likely(((__pyx_t_19) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_19, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 409, __pyx_L1_error)
    __pyx_v_sy = ((PyArrayObject *)__pyx_t_19);
    __pyx_t_19 = 0;

    /* "GBM.pyx":412
 * 
 *         # Regular grid
 *         Y, X = np.meshgrid(y,x)             # <<<<<<<<<<<<<<
 * 
 *         # Irregular grid
 */
    __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_np); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_meshgrid); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_17 = NULL;
    __pyx_t_32 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_17)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_17);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
        __pyx_t_32 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[3] = {__pyx_t_17, ((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_x)};
      __pyx_t_19 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_32, 2+__pyx_t_32); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 412, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_GOTREF(__pyx_t_19);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[3] = {__pyx_t_17, ((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_x)};
      __pyx_t_19 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_32, 2+__pyx_t_32); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 412, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_GOTREF(__pyx_t_19);
    } else
    #endif
    {
      __pyx_t_16 = PyTuple_New(2+__pyx_t_32); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      if (__pyx_t_17) {
        __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_17); __pyx_t_17 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_y));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_y));
      PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_32, ((PyObject *)__pyx_v_y));
      __Pyx_INCREF(((PyObject *)__pyx_v_x));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_x));
      PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_32, ((PyObject *)__pyx_v_x));
      __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_16, NULL); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_19))) || (PyList_CheckExact(__pyx_t_19))) {
      PyObject* sequence = __pyx_t_19;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 412, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_18 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_16 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_18 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_16 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(__pyx_t_16);
      #else
      __pyx_t_18 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_16 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      #endif
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_17 = PyObject_GetIter(__pyx_t_19); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __pyx_t_34 = Py_TYPE(__pyx_t_17)->tp_iternext;
      index = 0; __pyx_t_18 = __pyx_t_34(__pyx_t_17); if (unlikely(!__pyx_t_18)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_18);
      index = 1; __pyx_t_16 = __pyx_t_34(__pyx_t_17); if (unlikely(!__pyx_t_16)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_16);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_34(__pyx_t_17), 2) < 0) __PYX_ERR(0, 412, __pyx_L1_error)
      __pyx_t_34 = NULL;
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_34 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 412, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    if (!(likely(((__pyx_t_18) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_18, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 412, __pyx_L1_error)
    if (!(likely(((__pyx_t_16) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_16, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 412, __pyx_L1_error)
    __pyx_v_Y = ((PyArrayObject *)__pyx_t_18);
    __pyx_t_18 = 0;
    __pyx_v_X = ((PyArrayObject *)__pyx_t_16);
    __pyx_t_16 = 0;

    /* "GBM.pyx":415
 * 
 *         # Irregular grid
 *         Xs = X[:resx-1,:resy-1] + sx[:resx-1,:resy-1]             # <<<<<<<<<<<<<<
 *         Ys = Y[:resx-1,:resy-1] + sy[:resx-1,:resy-1]
 *         Xs_rh = Xs.reshape(-1,1)
 */
    __pyx_t_19 = __Pyx_PyInt_From_long((__pyx_v_resx - 1)); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_16 = PySlice_New(Py_None, __pyx_t_19, Py_None); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = __Pyx_PyInt_From_long((__pyx_v_resy - 1)); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_18 = PySlice_New(Py_None, __pyx_t_19, Py_None); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = PyTuple_New(2); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_18);
    PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_t_18);
    __pyx_t_16 = 0;
    __pyx_t_18 = 0;
    __pyx_t_18 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_X), __pyx_t_19); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = __Pyx_PyInt_From_long((__pyx_v_resx - 1)); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_16 = PySlice_New(Py_None, __pyx_t_19, Py_None); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = __Pyx_PyInt_From_long((__pyx_v_resy - 1)); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_17 = PySlice_New(Py_None, __pyx_t_19, Py_None); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = PyTuple_New(2); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_t_17);
    __pyx_t_16 = 0;
    __pyx_t_17 = 0;
    __pyx_t_17 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_sx), __pyx_t_19); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = PyNumber_Add(__pyx_t_18, __pyx_t_17); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (!(likely(((__pyx_t_19) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_19, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 415, __pyx_L1_error)
    __pyx_v_Xs = ((PyArrayObject *)__pyx_t_19);
    __pyx_t_19 = 0;

    /* "GBM.pyx":416
 *         # Irregular grid
 *         Xs = X[:resx-1,:resy-1] + sx[:resx-1,:resy-1]
 *         Ys = Y[:resx-1,:resy-1] + sy[:resx-1,:resy-1]             # <<<<<<<<<<<<<<
 *         Xs_rh = Xs.reshape(-1,1)
 *         Ys_rh = Ys.reshape(-1,1)
 */
    __pyx_t_19 = __Pyx_PyInt_From_long((__pyx_v_resx - 1)); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_17 = PySlice_New(Py_None, __pyx_t_19, Py_None); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = __Pyx_PyInt_From_long((__pyx_v_resy - 1)); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_18 = PySlice_New(Py_None, __pyx_t_19, Py_None); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = PyTuple_New(2); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_18);
    PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_t_18);
    __pyx_t_17 = 0;
    __pyx_t_18 = 0;
    __pyx_t_18 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Y), __pyx_t_19); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = __Pyx_PyInt_From_long((__pyx_v_resx - 1)); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_17 = PySlice_New(Py_None, __pyx_t_19, Py_None); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = __Pyx_PyInt_From_long((__pyx_v_resy - 1)); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_16 = PySlice_New(Py_None, __pyx_t_19, Py_None); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = PyTuple_New(2); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_19, 1, __pyx_t_16);
    __pyx_t_17 = 0;
    __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_sy), __pyx_t_19); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = PyNumber_Add(__pyx_t_18, __pyx_t_16); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (!(likely(((__pyx_t_19) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_19, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 416, __pyx_L1_error)
    __pyx_v_Ys = ((PyArrayObject *)__pyx_t_19);
    __pyx_t_19 = 0;

    /* "GBM.pyx":417
 *         Xs = X[:resx-1,:resy-1] + sx[:resx-1,:resy-1]
 *         Ys = Y[:resx-1,:resy-1] + sy[:resx-1,:resy-1]
 *         Xs_rh = Xs.reshape(-1,1)             # <<<<<<<<<<<<<<
 *         Ys_rh = Ys.reshape(-1,1)
 * 
 */
    __pyx_t_19 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Xs), __pyx_n_s_reshape); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    if (!(likely(((__pyx_t_16) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_16, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 417, __pyx_L1_error)
    __pyx_v_Xs_rh = ((PyArrayObject *)__pyx_t_16);
    __pyx_t_16 = 0;

    /* "GBM.pyx":418
 *         Ys = Y[:resx-1,:resy-1] + sy[:resx-1,:resy-1]
 *         Xs_rh = Xs.reshape(-1,1)
 *         Ys_rh = Ys.reshape(-1,1)             # <<<<<<<<<<<<<<
 * 
 *         # new less resolved grid
 */
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Ys), __pyx_n_s_reshape); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (!(likely(((__pyx_t_19) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_19, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 418, __pyx_L1_error)
    __pyx_v_Ys_rh = ((PyArrayObject *)__pyx_t_19);
    __pyx_t_19 = 0;

    /* "GBM.pyx":421
 * 
 *         # new less resolved grid
 *         mesh = Grid2D(dx=dx*low, dy=dy*low, nx=resx/low, ny=resy/low)             # <<<<<<<<<<<<<<
 *         Xs_rl = []
 *         Ys_rl = []
 */
    __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_Grid2D); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_16 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_18 = __Pyx_PyInt_From_int((__pyx_v_dx * __pyx_v_low)); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_dx, __pyx_t_18) < 0) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_18 = __Pyx_PyInt_From_int((__pyx_v_dy * __pyx_v_low)); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_dy, __pyx_t_18) < 0) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(__pyx_v_low == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 421, __pyx_L1_error)
    }
    __pyx_t_18 = PyFloat_FromDouble((((double)__pyx_v_resx) / ((double)__pyx_v_low))); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_nx, __pyx_t_18) < 0) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(__pyx_v_low == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 421, __pyx_L1_error)
    }
    __pyx_t_18 = PyFloat_FromDouble((((double)__pyx_v_resy) / ((double)__pyx_v_low))); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_ny, __pyx_t_18) < 0) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_empty_tuple, __pyx_t_16); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF_SET(__pyx_v_mesh, __pyx_t_18);
    __pyx_t_18 = 0;

    /* "GBM.pyx":422
 *         # new less resolved grid
 *         mesh = Grid2D(dx=dx*low, dy=dy*low, nx=resx/low, ny=resy/low)
 *         Xs_rl = []             # <<<<<<<<<<<<<<
 *         Ys_rl = []
 *         lx = len(mesh.x)
 */
    __pyx_t_18 = PyList_New(0); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_v_Xs_rl = ((PyObject*)__pyx_t_18);
    __pyx_t_18 = 0;

    /* "GBM.pyx":423
 *         mesh = Grid2D(dx=dx*low, dy=dy*low, nx=resx/low, ny=resy/low)
 *         Xs_rl = []
 *         Ys_rl = []             # <<<<<<<<<<<<<<
 *         lx = len(mesh.x)
 *         for i in range(lx):
 */
    __pyx_t_18 = PyList_New(0); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_v_Ys_rl = ((PyObject*)__pyx_t_18);
    __pyx_t_18 = 0;

    /* "GBM.pyx":424
 *         Xs_rl = []
 *         Ys_rl = []
 *         lx = len(mesh.x)             # <<<<<<<<<<<<<<
 *         for i in range(lx):
 *             xx = mesh.x[i]
 */
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_v_mesh, __pyx_n_s_x); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_35 = PyObject_Length(__pyx_t_18); if (unlikely(__pyx_t_35 == ((Py_ssize_t)-1))) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_v_lx = __pyx_t_35;

    /* "GBM.pyx":425
 *         Ys_rl = []
 *         lx = len(mesh.x)
 *         for i in range(lx):             # <<<<<<<<<<<<<<
 *             xx = mesh.x[i]
 *             j = (abs(Xs_rh-xx)**2 + abs(Ys_rh-np.asarray(mesh.y[i]))**2).argmin()
 */
    __pyx_t_32 = __pyx_v_lx;
    __pyx_t_30 = __pyx_t_32;
    for (__pyx_t_29 = 0; __pyx_t_29 < __pyx_t_30; __pyx_t_29+=1) {
      __pyx_v_i = __pyx_t_29;

      /* "GBM.pyx":426
 *         lx = len(mesh.x)
 *         for i in range(lx):
 *             xx = mesh.x[i]             # <<<<<<<<<<<<<<
 *             j = (abs(Xs_rh-xx)**2 + abs(Ys_rh-np.asarray(mesh.y[i]))**2).argmin()
 *             Xs_rl.extend([Xs_rh[j]])
 */
      __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_v_mesh, __pyx_n_s_x); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 426, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_16 = __Pyx_GetItemInt(__pyx_t_18, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 426, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_33 = __pyx_PyFloat_AsDouble(__pyx_t_16); if (unlikely((__pyx_t_33 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 426, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_v_xx = __pyx_t_33;

      /* "GBM.pyx":427
 *         for i in range(lx):
 *             xx = mesh.x[i]
 *             j = (abs(Xs_rh-xx)**2 + abs(Ys_rh-np.asarray(mesh.y[i]))**2).argmin()             # <<<<<<<<<<<<<<
 *             Xs_rl.extend([Xs_rh[j]])
 *             Ys_rl.extend([Ys_rh[j]])
 */
      __pyx_t_18 = PyFloat_FromDouble(__pyx_v_xx); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_19 = PyNumber_Subtract(((PyObject *)__pyx_v_Xs_rh), __pyx_t_18); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_18 = __Pyx_PyNumber_Absolute(__pyx_t_19); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __pyx_t_19 = PyNumber_Power(__pyx_t_18, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_np); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_asarray); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_mesh, __pyx_n_s_y); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_14 = __Pyx_GetItemInt(__pyx_t_17, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_17 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_15);
        if (likely(__pyx_t_17)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_15, function);
        }
      }
      __pyx_t_18 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_17, __pyx_t_14) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_14);
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = PyNumber_Subtract(((PyObject *)__pyx_v_Ys_rh), __pyx_t_18); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_18 = __Pyx_PyNumber_Absolute(__pyx_t_15); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = PyNumber_Power(__pyx_t_18, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_18 = PyNumber_Add(__pyx_t_19, __pyx_t_15); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_argmin); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_18 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
        __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_15);
        if (likely(__pyx_t_18)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
          __Pyx_INCREF(__pyx_t_18);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_15, function);
        }
      }
      __pyx_t_16 = (__pyx_t_18) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_18) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
      __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
      if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_16);
      __pyx_t_16 = 0;

      /* "GBM.pyx":428
 *             xx = mesh.x[i]
 *             j = (abs(Xs_rh-xx)**2 + abs(Ys_rh-np.asarray(mesh.y[i]))**2).argmin()
 *             Xs_rl.extend([Xs_rh[j]])             # <<<<<<<<<<<<<<
 *             Ys_rl.extend([Ys_rh[j]])
 * 
 */
      __pyx_t_16 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Xs_rh), __pyx_v_j); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 428, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_36 = __Pyx_PyList_Append(__pyx_v_Xs_rl, __pyx_t_16); if (unlikely(__pyx_t_36 == ((int)-1))) __PYX_ERR(0, 428, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      (void)(__pyx_t_36);

      /* "GBM.pyx":429
 *             j = (abs(Xs_rh-xx)**2 + abs(Ys_rh-np.asarray(mesh.y[i]))**2).argmin()
 *             Xs_rl.extend([Xs_rh[j]])
 *             Ys_rl.extend([Ys_rh[j]])             # <<<<<<<<<<<<<<
 * 
 *         Ox_irr = np.asarray([])
 */
      __pyx_t_16 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Ys_rh), __pyx_v_j); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_36 = __Pyx_PyList_Append(__pyx_v_Ys_rl, __pyx_t_16); if (unlikely(__pyx_t_36 == ((int)-1))) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      (void)(__pyx_t_36);
    }

    /* "GBM.pyx":431
 *             Ys_rl.extend([Ys_rh[j]])
 * 
 *         Ox_irr = np.asarray([])             # <<<<<<<<<<<<<<
 * 
 *         points = np.append(Xs_rl,Ys_rl,axis=1)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_np); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_asarray); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = PyList_New(0); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_19 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_19)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_19);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
      }
    }
    __pyx_t_16 = (__pyx_t_19) ? __Pyx_PyObject_Call2Args(__pyx_t_18, __pyx_t_19, __pyx_t_15) : __Pyx_PyObject_CallOneArg(__pyx_t_18, __pyx_t_15);
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (!(likely(((__pyx_t_16) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_16, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 431, __pyx_L1_error)
    __pyx_v_Ox_irr = ((PyArrayObject *)__pyx_t_16);
    __pyx_t_16 = 0;

    /* "GBM.pyx":433
 *         Ox_irr = np.asarray([])
 * 
 *         points = np.append(Xs_rl,Ys_rl,axis=1)             # <<<<<<<<<<<<<<
 * 
 *         pl = points.copy()
 */
    __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_np); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_append); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_INCREF(__pyx_v_Xs_rl);
    __Pyx_GIVEREF(__pyx_v_Xs_rl);
    PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_v_Xs_rl);
    __Pyx_INCREF(__pyx_v_Ys_rl);
    __Pyx_GIVEREF(__pyx_v_Ys_rl);
    PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_v_Ys_rl);
    __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_axis, __pyx_int_1) < 0) __PYX_ERR(0, 433, __pyx_L1_error)
    __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_16, __pyx_t_15); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (!(likely(((__pyx_t_19) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_19, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 433, __pyx_L1_error)
    __pyx_v_points = ((PyArrayObject *)__pyx_t_19);
    __pyx_t_19 = 0;

    /* "GBM.pyx":435
 *         points = np.append(Xs_rl,Ys_rl,axis=1)
 * 
 *         pl = points.copy()             # <<<<<<<<<<<<<<
 * 
 *         phs =  np.c_[Xs.ravel(), Ys.ravel()]
 */
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_points), __pyx_n_s_copy); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_16 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
      }
    }
    __pyx_t_19 = (__pyx_t_16) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_16) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_v_pl = __pyx_t_19;
    __pyx_t_19 = 0;

    /* "GBM.pyx":437
 *         pl = points.copy()
 * 
 *         phs =  np.c_[Xs.ravel(), Ys.ravel()]             # <<<<<<<<<<<<<<
 * 
 *         Discarded = []
 */
    __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_np); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_c); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Xs), __pyx_n_s_ravel); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_18 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
      __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_16);
      if (likely(__pyx_t_18)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_18);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_16, function);
      }
    }
    __pyx_t_19 = (__pyx_t_18) ? __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_18) : __Pyx_PyObject_CallNoArg(__pyx_t_16);
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Ys), __pyx_n_s_ravel); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_14 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
      }
    }
    __pyx_t_16 = (__pyx_t_14) ? __Pyx_PyObject_CallOneArg(__pyx_t_18, __pyx_t_14) : __Pyx_PyObject_CallNoArg(__pyx_t_18);
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_18 = PyTuple_New(2); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_GIVEREF(__pyx_t_19);
    PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_19);
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_t_16);
    __pyx_t_19 = 0;
    __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyObject_GetItem(__pyx_t_15, __pyx_t_18); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_v_phs = __pyx_t_16;
    __pyx_t_16 = 0;

    /* "GBM.pyx":439
 *         phs =  np.c_[Xs.ravel(), Ys.ravel()]
 * 
 *         Discarded = []             # <<<<<<<<<<<<<<
 * 
 *         gsize = len(points)
 */
    __pyx_t_16 = PyList_New(0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_v_Discarded = ((PyObject*)__pyx_t_16);
    __pyx_t_16 = 0;

    /* "GBM.pyx":441
 *         Discarded = []
 * 
 *         gsize = len(points)             # <<<<<<<<<<<<<<
 *         index = np.asarray(range(gsize))
 * 
 */
    __pyx_t_35 = PyObject_Length(((PyObject *)__pyx_v_points)); if (unlikely(__pyx_t_35 == ((Py_ssize_t)-1))) __PYX_ERR(0, 441, __pyx_L1_error)
    __pyx_v_gsize = __pyx_t_35;

    /* "GBM.pyx":442
 * 
 *         gsize = len(points)
 *         index = np.asarray(range(gsize))             # <<<<<<<<<<<<<<
 * 
 *         # Spawn one cell (close to the centre of the grid)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_np); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_asarray); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_v_gsize); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_19 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_18); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_18 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_18)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_18);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
      }
    }
    __pyx_t_16 = (__pyx_t_18) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_18, __pyx_t_19) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_19);
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (!(likely(((__pyx_t_16) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_16, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 442, __pyx_L1_error)
    __pyx_v_index = ((PyArrayObject *)__pyx_t_16);
    __pyx_t_16 = 0;

    /* "GBM.pyx":445
 * 
 *         # Spawn one cell (close to the centre of the grid)
 *         Cell_pop = np.zeros(gsize) # All cells dead or alive             # <<<<<<<<<<<<<<
 *         Cell_pop[round(resx*resy/low**2*0.5-resy/2/low)] = 1
 *         GSC = Cell_pop.copy()   # Stem cells
 */
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_np); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_zeros); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_v_gsize); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_18 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_19))) {
      __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_19);
      if (likely(__pyx_t_18)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
        __Pyx_INCREF(__pyx_t_18);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_19, function);
      }
    }
    __pyx_t_16 = (__pyx_t_18) ? __Pyx_PyObject_Call2Args(__pyx_t_19, __pyx_t_18, __pyx_t_15) : __Pyx_PyObject_CallOneArg(__pyx_t_19, __pyx_t_15);
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    if (!(likely(((__pyx_t_16) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_16, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 445, __pyx_L1_error)
    __pyx_v_Cell_pop = ((PyArrayObject *)__pyx_t_16);
    __pyx_t_16 = 0;

    /* "GBM.pyx":446
 *         # Spawn one cell (close to the centre of the grid)
 *         Cell_pop = np.zeros(gsize) # All cells dead or alive
 *         Cell_pop[round(resx*resy/low**2*0.5-resy/2/low)] = 1             # <<<<<<<<<<<<<<
 *         GSC = Cell_pop.copy()   # Stem cells
 *         GPP = np.zeros(gsize)   # Proliferative progeny
 */
    __pyx_t_32 = (__pyx_v_resx * __pyx_v_resy);
    __pyx_t_37 = __Pyx_pow_long(((long)__pyx_v_low), 2);
    if (unlikely(__pyx_t_37 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 446, __pyx_L1_error)
    }
    __pyx_t_33 = (((double)__pyx_v_resy) / 2.0);
    if (unlikely(__pyx_v_low == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 446, __pyx_L1_error)
    }
    __pyx_t_16 = PyFloat_FromDouble((((((double)__pyx_t_32) / ((double)__pyx_t_37)) * 0.5) - (__pyx_t_33 / ((double)__pyx_v_low)))); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_19 = __Pyx_PyObject_CallOneArg(__pyx_builtin_round, __pyx_t_16); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_Cell_pop), __pyx_t_19, __pyx_int_1) < 0)) __PYX_ERR(0, 446, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

    /* "GBM.pyx":447
 *         Cell_pop = np.zeros(gsize) # All cells dead or alive
 *         Cell_pop[round(resx*resy/low**2*0.5-resy/2/low)] = 1
 *         GSC = Cell_pop.copy()   # Stem cells             # <<<<<<<<<<<<<<
 *         GPP = np.zeros(gsize)   # Proliferative progeny
 *         GDS = np.zeros(gsize)   # Differenting subpopulation
 */
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Cell_pop), __pyx_n_s_copy); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_15 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_16);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_16, function);
      }
    }
    __pyx_t_19 = (__pyx_t_15) ? __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_15) : __Pyx_PyObject_CallNoArg(__pyx_t_16);
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (!(likely(((__pyx_t_19) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_19, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 447, __pyx_L1_error)
    __pyx_v_GSC = ((PyArrayObject *)__pyx_t_19);
    __pyx_t_19 = 0;

    /* "GBM.pyx":448
 *         Cell_pop[round(resx*resy/low**2*0.5-resy/2/low)] = 1
 *         GSC = Cell_pop.copy()   # Stem cells
 *         GPP = np.zeros(gsize)   # Proliferative progeny             # <<<<<<<<<<<<<<
 *         GDS = np.zeros(gsize)   # Differenting subpopulation
 *         Alive = Cell_pop.copy() # Alive cells
 */
    __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_np); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_zeros); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyInt_From_int(__pyx_v_gsize); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_18 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_18)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_18);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
      }
    }
    __pyx_t_19 = (__pyx_t_18) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_18, __pyx_t_16) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_16);
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (!(likely(((__pyx_t_19) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_19, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 448, __pyx_L1_error)
    __pyx_v_GPP = ((PyArrayObject *)__pyx_t_19);
    __pyx_t_19 = 0;

    /* "GBM.pyx":449
 *         GSC = Cell_pop.copy()   # Stem cells
 *         GPP = np.zeros(gsize)   # Proliferative progeny
 *         GDS = np.zeros(gsize)   # Differenting subpopulation             # <<<<<<<<<<<<<<
 *         Alive = Cell_pop.copy() # Alive cells
 *         Dead = np.zeros(gsize)  # Dead cells
 */
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_np); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_zeros); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_v_gsize); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_18 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_16))) {
      __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_16);
      if (likely(__pyx_t_18)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_18);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_16, function);
      }
    }
    __pyx_t_19 = (__pyx_t_18) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_18, __pyx_t_15) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_15);
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (!(likely(((__pyx_t_19) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_19, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 449, __pyx_L1_error)
    __pyx_v_GDS = ((PyArrayObject *)__pyx_t_19);
    __pyx_t_19 = 0;

    /* "GBM.pyx":450
 *         GPP = np.zeros(gsize)   # Proliferative progeny
 *         GDS = np.zeros(gsize)   # Differenting subpopulation
 *         Alive = Cell_pop.copy() # Alive cells             # <<<<<<<<<<<<<<
 *         Dead = np.zeros(gsize)  # Dead cells
 *         Rim = np.zeros(gsize)   # Distance to rim
 */
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_Cell_pop), __pyx_n_s_copy); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_15 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_16);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_16, function);
      }
    }
    __pyx_t_19 = (__pyx_t_15) ? __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_15) : __Pyx_PyObject_CallNoArg(__pyx_t_16);
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (!(likely(((__pyx_t_19) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_19, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 450, __pyx_L1_error)
    __pyx_v_Alive = ((PyArrayObject *)__pyx_t_19);
    __pyx_t_19 = 0;

    /* "GBM.pyx":451
 *         GDS = np.zeros(gsize)   # Differenting subpopulation
 *         Alive = Cell_pop.copy() # Alive cells
 *         Dead = np.zeros(gsize)  # Dead cells             # <<<<<<<<<<<<<<
 *         Rim = np.zeros(gsize)   # Distance to rim
 *         tstart = -1
 */
    __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_np); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_zeros); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyInt_From_int(__pyx_v_gsize); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_18 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_18)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_18);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
      }
    }
    __pyx_t_19 = (__pyx_t_18) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_18, __pyx_t_16) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_16);
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (!(likely(((__pyx_t_19) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_19, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 451, __pyx_L1_error)
    __pyx_v_Dead = ((PyArrayObject *)__pyx_t_19);
    __pyx_t_19 = 0;

    /* "GBM.pyx":452
 *         Alive = Cell_pop.copy() # Alive cells
 *         Dead = np.zeros(gsize)  # Dead cells
 *         Rim = np.zeros(gsize)   # Distance to rim             # <<<<<<<<<<<<<<
 *         tstart = -1
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_np); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_zeros); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_v_gsize); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_18 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_16))) {
      __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_16);
      if (likely(__pyx_t_18)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_18);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_16, function);
      }
    }
    __pyx_t_19 = (__pyx_t_18) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_18, __pyx_t_15) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_15);
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (!(likely(((__pyx_t_19) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_19, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 452, __pyx_L1_error)
    __pyx_v_Rim = ((PyArrayObject *)__pyx_t_19);
    __pyx_t_19 = 0;

    /* "GBM.pyx":453
 *         Dead = np.zeros(gsize)  # Dead cells
 *         Rim = np.zeros(gsize)   # Distance to rim
 *         tstart = -1             # <<<<<<<<<<<<<<
 * 
 *     else:
 */
    __pyx_v_tstart = -1;

    /* "GBM.pyx":400
 *     cdef list Discarded, Xs_r, Ys_r
 * 
 *     if Restart == "None":             # <<<<<<<<<<<<<<
 * 
 *         resx, resy, dx, dy, steps, SavN, O2_crit, lambdaC, Dox, low, Dup, trapped, Qup, epsilon, Pdie, Pprol, Pdivi = Input
 */
    goto __pyx_L3;
  }

  /* "GBM.pyx":457
 *     else:
 * 
 *         Input, Ox_irr, points, pl, phs, Cell_pop, GSC, GPP, GDS, Alive, Dead, Rim, Discarded, tstart = read_snapshot(Restart)             # <<<<<<<<<<<<<<
 *         resx, resy, dx, dy, steps, SavN, O2_crit, lambdaC, Dox, low, Dup, trapped, Qup = Input
 *         mesh = Grid2D(dx=dx*low, dy=dy*low, nx=resx/low, ny=resy/low)
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_read_snapshot); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_15 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_16))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_16);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_16, function);
      }
    }
    __pyx_t_19 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_15, __pyx_v_Restart) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_v_Restart);
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_19))) || (PyList_CheckExact(__pyx_t_19))) {
      PyObject* sequence = __pyx_t_19;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 14)) {
        if (size > 14) __Pyx_RaiseTooManyValuesError(14);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 457, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_16 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_15 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_18 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_14 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_17 = PyTuple_GET_ITEM(sequence, 4); 
        __pyx_t_13 = PyTuple_GET_ITEM(sequence, 5); 
        __pyx_t_12 = PyTuple_GET_ITEM(sequence, 6); 
        __pyx_t_11 = PyTuple_GET_ITEM(sequence, 7); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 8); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 9); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 10); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 11); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 12); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 13); 
      } else {
        __pyx_t_16 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_15 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_18 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_14 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_17 = PyList_GET_ITEM(sequence, 4); 
        __pyx_t_13 = PyList_GET_ITEM(sequence, 5); 
        __pyx_t_12 = PyList_GET_ITEM(sequence, 6); 
        __pyx_t_11 = PyList_GET_ITEM(sequence, 7); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 8); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 9); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 10); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 11); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 12); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 13); 
      }
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_17);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[14] = {&__pyx_t_16,&__pyx_t_15,&__pyx_t_18,&__pyx_t_14,&__pyx_t_17,&__pyx_t_13,&__pyx_t_12,&__pyx_t_11,&__pyx_t_10,&__pyx_t_9,&__pyx_t_8,&__pyx_t_7,&__pyx_t_6,&__pyx_t_5};
        for (i=0; i < 14; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 457, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[14] = {&__pyx_t_16,&__pyx_t_15,&__pyx_t_18,&__pyx_t_14,&__pyx_t_17,&__pyx_t_13,&__pyx_t_12,&__pyx_t_11,&__pyx_t_10,&__pyx_t_9,&__pyx_t_8,&__pyx_t_7,&__pyx_t_6,&__pyx_t_5};
      __pyx_t_4 = PyObject_GetIter(__pyx_t_19); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 457, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __pyx_t_34 = Py_TYPE(__pyx_t_4)->tp_iternext;
      for (index=0; index < 14; index++) {
        PyObject* item = __pyx_t_34(__pyx_t_4); if (unlikely(!item)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_34(__pyx_t_4), 14) < 0) __PYX_ERR(0, 457, __pyx_L1_error)
      __pyx_t_34 = NULL;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L9_unpacking_done;
      __pyx_L8_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_34 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 457, __pyx_L1_error)
      __pyx_L9_unpacking_done:;
    }
    if (!(likely(PyList_CheckExact(__pyx_t_16))||((__pyx_t_16) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_16)->tp_name), 0))) __PYX_ERR(0, 457, __pyx_L1_error)
    if (!(likely(((__pyx_t_15) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_15, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 457, __pyx_L1_error)
    if (!(likely(((__pyx_t_18) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_18, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 457, __pyx_L1_error)
    if (!(likely(((__pyx_t_13) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_13, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 457, __pyx_L1_error)
    if (!(likely(((__pyx_t_12) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_12, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 457, __pyx_L1_error)
    if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 457, __pyx_L1_error)
    if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 457, __pyx_L1_error)
    if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 457, __pyx_L1_error)
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 457, __pyx_L1_error)
    if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 457, __pyx_L1_error)
    if (!(likely(PyList_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(0, 457, __pyx_L1_error)
    __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_Input, ((PyObject*)__pyx_t_16));
    __pyx_t_16 = 0;
    __pyx_v_Ox_irr = ((PyArrayObject *)__pyx_t_15);
    __pyx_t_15 = 0;
    __pyx_v_points = ((PyArrayObject *)__pyx_t_18);
    __pyx_t_18 = 0;
    __pyx_v_pl = __pyx_t_14;
    __pyx_t_14 = 0;
    __pyx_v_phs = __pyx_t_17;
    __pyx_t_17 = 0;
    __pyx_v_Cell_pop = ((PyArrayObject *)__pyx_t_13);
    __pyx_t_13 = 0;
    __pyx_v_GSC = ((PyArrayObject *)__pyx_t_12);
    __pyx_t_12 = 0;
    __pyx_v_GPP = ((PyArrayObject *)__pyx_t_11);
    __pyx_t_11 = 0;
    __pyx_v_GDS = ((PyArrayObject *)__pyx_t_10);
    __pyx_t_10 = 0;
    __pyx_v_Alive = ((PyArrayObject *)__pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_Dead = ((PyArrayObject *)__pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_v_Rim = ((PyArrayObject *)__pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_v_Discarded = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_v_tstart = __pyx_t_32;

    /* "GBM.pyx":458
 * 
 *         Input, Ox_irr, points, pl, phs, Cell_pop, GSC, GPP, GDS, Alive, Dead, Rim, Discarded, tstart = read_snapshot(Restart)
 *         resx, resy, dx, dy, steps, SavN, O2_crit, lambdaC, Dox, low, Dup, trapped, Qup = Input             # <<<<<<<<<<<<<<
 *         mesh = Grid2D(dx=dx*low, dy=dy*low, nx=resx/low, ny=resy/low)
 *         gsize = len(points)
 */
    if (likely(__pyx_v_Input != Py_None)) {
      PyObject* sequence = __pyx_v_Input;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 13)) {
        if (size > 13) __Pyx_RaiseTooManyValuesError(13);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 458, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_19 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_9 = PyList_GET_ITEM(sequence, 5); 
      __pyx_t_10 = PyList_GET_ITEM(sequence, 6); 
      __pyx_t_11 = PyList_GET_ITEM(sequence, 7); 
      __pyx_t_12 = PyList_GET_ITEM(sequence, 8); 
      __pyx_t_13 = PyList_GET_ITEM(sequence, 9); 
      __pyx_t_17 = PyList_GET_ITEM(sequence, 10); 
      __pyx_t_14 = PyList_GET_ITEM(sequence, 11); 
      __pyx_t_18 = PyList_GET_ITEM(sequence, 12); 
      __Pyx_INCREF(__pyx_t_19);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_17);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_18);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[13] = {&__pyx_t_19,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9,&__pyx_t_10,&__pyx_t_11,&__pyx_t_12,&__pyx_t_13,&__pyx_t_17,&__pyx_t_14,&__pyx_t_18};
        for (i=0; i < 13; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 458, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 458, __pyx_L1_error)
    }
    __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_19); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_30 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_30 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_29 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_29 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_25 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_25 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_24 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_24 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_23 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_23 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_33 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_33 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_31 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_31 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_28 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_28 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_22 = __Pyx_PyInt_As_int(__pyx_t_13); if (unlikely((__pyx_t_22 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_21 = __Pyx_PyInt_As_int(__pyx_t_17); if (unlikely((__pyx_t_21 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_27 = __pyx_PyFloat_AsDouble(__pyx_t_14); if (unlikely((__pyx_t_27 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_20 = __Pyx_PyInt_As_int(__pyx_t_18); if (unlikely((__pyx_t_20 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_v_resx = __pyx_t_32;
    __pyx_v_resy = __pyx_t_30;
    __pyx_v_dx = __pyx_t_29;
    __pyx_v_dy = __pyx_t_25;
    __pyx_v_steps = __pyx_t_24;
    __pyx_v_SavN = __pyx_t_23;
    __pyx_v_O2_crit = __pyx_t_33;
    __pyx_v_lambdaC = __pyx_t_31;
    __pyx_v_Dox = __pyx_t_28;
    __pyx_v_low = __pyx_t_22;
    __pyx_v_Dup = __pyx_t_21;
    __pyx_v_trapped = __pyx_t_27;
    __pyx_v_Qup = __pyx_t_20;

    /* "GBM.pyx":459
 *         Input, Ox_irr, points, pl, phs, Cell_pop, GSC, GPP, GDS, Alive, Dead, Rim, Discarded, tstart = read_snapshot(Restart)
 *         resx, resy, dx, dy, steps, SavN, O2_crit, lambdaC, Dox, low, Dup, trapped, Qup = Input
 *         mesh = Grid2D(dx=dx*low, dy=dy*low, nx=resx/low, ny=resy/low)             # <<<<<<<<<<<<<<
 *         gsize = len(points)
 *         index = np.asarray(range(gsize))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_Grid2D); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_14 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_17 = __Pyx_PyInt_From_int((__pyx_v_dx * __pyx_v_low)); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_dx, __pyx_t_17) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_17 = __Pyx_PyInt_From_int((__pyx_v_dy * __pyx_v_low)); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_dy, __pyx_t_17) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (unlikely(__pyx_v_low == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 459, __pyx_L1_error)
    }
    __pyx_t_17 = PyFloat_FromDouble((((double)__pyx_v_resx) / ((double)__pyx_v_low))); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_nx, __pyx_t_17) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (unlikely(__pyx_v_low == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 459, __pyx_L1_error)
    }
    __pyx_t_17 = PyFloat_FromDouble((((double)__pyx_v_resy) / ((double)__pyx_v_low))); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_ny, __pyx_t_17) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_empty_tuple, __pyx_t_14); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_v_mesh = __pyx_t_17;
    __pyx_t_17 = 0;

    /* "GBM.pyx":460
 *         resx, resy, dx, dy, steps, SavN, O2_crit, lambdaC, Dox, low, Dup, trapped, Qup = Input
 *         mesh = Grid2D(dx=dx*low, dy=dy*low, nx=resx/low, ny=resy/low)
 *         gsize = len(points)             # <<<<<<<<<<<<<<
 *         index = np.asarray(range(gsize))
 * 
 */
    __pyx_t_35 = PyObject_Length(((PyObject *)__pyx_v_points)); if (unlikely(__pyx_t_35 == ((Py_ssize_t)-1))) __PYX_ERR(0, 460, __pyx_L1_error)
    __pyx_v_gsize = __pyx_t_35;

    /* "GBM.pyx":461
 *         mesh = Grid2D(dx=dx*low, dy=dy*low, nx=resx/low, ny=resy/low)
 *         gsize = len(points)
 *         index = np.asarray(range(gsize))             # <<<<<<<<<<<<<<
 * 
 *     # Tree to find nearest neighbours in low-resolution grid
 */
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_asarray); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_gsize); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_14); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
      }
    }
    __pyx_t_17 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_18, __pyx_t_14, __pyx_t_13) : __Pyx_PyObject_CallOneArg(__pyx_t_18, __pyx_t_13);
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (!(likely(((__pyx_t_17) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_17, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 461, __pyx_L1_error)
    __pyx_v_index = ((PyArrayObject *)__pyx_t_17);
    __pyx_t_17 = 0;
  }
  __pyx_L3:;

  /* "GBM.pyx":464
 * 
 *     # Tree to find nearest neighbours in low-resolution grid
 *     voronoi_kdtree = cKDTree(pl)             # <<<<<<<<<<<<<<
 * 
 *     # Tree to find nearest neighbours in dense grid
 */
  __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_cKDTree); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_13 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_18);
    if (likely(__pyx_t_13)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_18, function);
    }
  }
  __pyx_t_17 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_18, __pyx_t_13, __pyx_v_pl) : __Pyx_PyObject_CallOneArg(__pyx_t_18, __pyx_v_pl);
  __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_v_voronoi_kdtree = __pyx_t_17;
  __pyx_t_17 = 0;

  /* "GBM.pyx":467
 * 
 *     # Tree to find nearest neighbours in dense grid
 *     tree = cKDTree(phs)             # <<<<<<<<<<<<<<
 * 
 *     return gsize, tstart, Input, mesh, Ox_irr, low, points, pl, phs, index, Cell_pop, GSC, GPP, GDS, Alive, Dead, Rim, Discarded, voronoi_kdtree, tree
 */
  __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_cKDTree); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_13 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_18);
    if (likely(__pyx_t_13)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_18, function);
    }
  }
  __pyx_t_17 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_18, __pyx_t_13, __pyx_v_phs) : __Pyx_PyObject_CallOneArg(__pyx_t_18, __pyx_v_phs);
  __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_v_tree = __pyx_t_17;
  __pyx_t_17 = 0;

  /* "GBM.pyx":469
 *     tree = cKDTree(phs)
 * 
 *     return gsize, tstart, Input, mesh, Ox_irr, low, points, pl, phs, index, Cell_pop, GSC, GPP, GDS, Alive, Dead, Rim, Discarded, voronoi_kdtree, tree             # <<<<<<<<<<<<<<
 * 
 * #=========================================
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_17 = __Pyx_PyInt_From_int(__pyx_v_gsize); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_v_tstart); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_low); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = PyTuple_New(20); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_17);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_18);
  PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_18);
  __Pyx_INCREF(__pyx_v_Input);
  __Pyx_GIVEREF(__pyx_v_Input);
  PyTuple_SET_ITEM(__pyx_t_14, 2, __pyx_v_Input);
  __Pyx_INCREF(__pyx_v_mesh);
  __Pyx_GIVEREF(__pyx_v_mesh);
  PyTuple_SET_ITEM(__pyx_t_14, 3, __pyx_v_mesh);
  __Pyx_INCREF(((PyObject *)__pyx_v_Ox_irr));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_Ox_irr));
  PyTuple_SET_ITEM(__pyx_t_14, 4, ((PyObject *)__pyx_v_Ox_irr));
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_14, 5, __pyx_t_13);
  __Pyx_INCREF(((PyObject *)__pyx_v_points));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
  PyTuple_SET_ITEM(__pyx_t_14, 6, ((PyObject *)__pyx_v_points));
  __Pyx_INCREF(__pyx_v_pl);
  __Pyx_GIVEREF(__pyx_v_pl);
  PyTuple_SET_ITEM(__pyx_t_14, 7, __pyx_v_pl);
  __Pyx_INCREF(__pyx_v_phs);
  __Pyx_GIVEREF(__pyx_v_phs);
  PyTuple_SET_ITEM(__pyx_t_14, 8, __pyx_v_phs);
  __Pyx_INCREF(((PyObject *)__pyx_v_index));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_index));
  PyTuple_SET_ITEM(__pyx_t_14, 9, ((PyObject *)__pyx_v_index));
  __Pyx_INCREF(((PyObject *)__pyx_v_Cell_pop));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_Cell_pop));
  PyTuple_SET_ITEM(__pyx_t_14, 10, ((PyObject *)__pyx_v_Cell_pop));
  __Pyx_INCREF(((PyObject *)__pyx_v_GSC));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_GSC));
  PyTuple_SET_ITEM(__pyx_t_14, 11, ((PyObject *)__pyx_v_GSC));
  __Pyx_INCREF(((PyObject *)__pyx_v_GPP));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_GPP));
  PyTuple_SET_ITEM(__pyx_t_14, 12, ((PyObject *)__pyx_v_GPP));
  __Pyx_INCREF(((PyObject *)__pyx_v_GDS));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_GDS));
  PyTuple_SET_ITEM(__pyx_t_14, 13, ((PyObject *)__pyx_v_GDS));
  __Pyx_INCREF(((PyObject *)__pyx_v_Alive));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_Alive));
  PyTuple_SET_ITEM(__pyx_t_14, 14, ((PyObject *)__pyx_v_Alive));
  __Pyx_INCREF(((PyObject *)__pyx_v_Dead));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_Dead));
  PyTuple_SET_ITEM(__pyx_t_14, 15, ((PyObject *)__pyx_v_Dead));
  __Pyx_INCREF(((PyObject *)__pyx_v_Rim));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_Rim));
  PyTuple_SET_ITEM(__pyx_t_14, 16, ((PyObject *)__pyx_v_Rim));
  __Pyx_INCREF(__pyx_v_Discarded);
  __Pyx_GIVEREF(__pyx_v_Discarded);
  PyTuple_SET_ITEM(__pyx_t_14, 17, __pyx_v_Discarded);
  __Pyx_INCREF(__pyx_v_voronoi_kdtree);
  __Pyx_GIVEREF(__pyx_v_voronoi_kdtree);
  PyTuple_SET_ITEM(__pyx_t_14, 18, __pyx_v_voronoi_kdtree);
  __Pyx_INCREF(__pyx_v_tree);
  __Pyx_GIVEREF(__pyx_v_tree);
  PyTuple_SET_ITEM(__pyx_t_14, 19, __pyx_v_tree);
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_t_13 = 0;
  __pyx_r = __pyx_t_14;
  __pyx_t_14 = 0;
  goto __pyx_L0;

  /* "GBM.pyx":391
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def init_Cell_pop(str Restart, list Input):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i, tstart, iden, gsize, resx, resy, steps, SavN, low, Dup, Qup, dx, dy, lx
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("GBM.init_Cell_pop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_index);
  __Pyx_XDECREF((PyObject *)__pyx_v_Cell_pop);
  __Pyx_XDECREF((PyObject *)__pyx_v_GSC);
  __Pyx_XDECREF((PyObject *)__pyx_v_GPP);
  __Pyx_XDECREF((PyObject *)__pyx_v_GDS);
  __Pyx_XDECREF((PyObject *)__pyx_v_Alive);
  __Pyx_XDECREF((PyObject *)__pyx_v_Dead);
  __Pyx_XDECREF((PyObject *)__pyx_v_Rim);
  __Pyx_XDECREF((PyObject *)__pyx_v_points);
  __Pyx_XDECREF((PyObject *)__pyx_v_Ox_irr);
  __Pyx_XDECREF((PyObject *)__pyx_v_Ys_rh);
  __Pyx_XDECREF((PyObject *)__pyx_v_Xs_rh);
  __Pyx_XDECREF((PyObject *)__pyx_v_x);
  __Pyx_XDECREF((PyObject *)__pyx_v_y);
  __Pyx_XDECREF((PyObject *)__pyx_v_Xs);
  __Pyx_XDECREF((PyObject *)__pyx_v_Ys);
  __Pyx_XDECREF((PyObject *)__pyx_v_sx);
  __Pyx_XDECREF((PyObject *)__pyx_v_sy);
  __Pyx_XDECREF((PyObject *)__pyx_v_X);
  __Pyx_XDECREF((PyObject *)__pyx_v_Y);
  __Pyx_XDECREF(__pyx_v_Discarded);
  __Pyx_XDECREF(__pyx_v_Pdie);
  __Pyx_XDECREF(__pyx_v_Pprol);
  __Pyx_XDECREF(__pyx_v_Pdivi);
  __Pyx_XDECREF(__pyx_v_mesh);
  __Pyx_XDECREF(__pyx_v_Xs_rl);
  __Pyx_XDECREF(__pyx_v_Ys_rl);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_pl);
  __Pyx_XDECREF(__pyx_v_phs);
  __Pyx_XDECREF(__pyx_v_voronoi_kdtree);
  __Pyx_XDECREF(__pyx_v_tree);
  __Pyx_XDECREF(__pyx_v_Input);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "GBM.pyx":475
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def run_ABM(str Restart, str store, int resx, int resy, int steps, int SavN, double Dox, double lambdaC, double O2_crit, int low, int Dup, double trapped, int Qup, double epsilon, double Pdie, double Pprol, double Pdivi,  double dx, double dy, bint myplots):             # <<<<<<<<<<<<<<
 * 
 *     cdef double start_time = time.time()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3GBM_21run_ABM(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3GBM_21run_ABM = {"run_ABM", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3GBM_21run_ABM, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3GBM_21run_ABM(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_Restart = 0;
  PyObject *__pyx_v_store = 0;
  int __pyx_v_resx;
  int __pyx_v_resy;
  int __pyx_v_steps;
  int __pyx_v_SavN;
  double __pyx_v_Dox;
  double __pyx_v_lambdaC;
  double __pyx_v_O2_crit;
  int __pyx_v_low;
  int __pyx_v_Dup;
  double __pyx_v_trapped;
  int __pyx_v_Qup;
  double __pyx_v_epsilon;
  double __pyx_v_Pdie;
  double __pyx_v_Pprol;
  double __pyx_v_Pdivi;
  double __pyx_v_dx;
  double __pyx_v_dy;
  int __pyx_v_myplots;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run_ABM (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Restart,&__pyx_n_s_store,&__pyx_n_s_resx,&__pyx_n_s_resy,&__pyx_n_s_steps,&__pyx_n_s_SavN,&__pyx_n_s_Dox,&__pyx_n_s_lambdaC,&__pyx_n_s_O2_crit,&__pyx_n_s_low,&__pyx_n_s_Dup,&__pyx_n_s_trapped,&__pyx_n_s_Qup,&__pyx_n_s_epsilon,&__pyx_n_s_Pdie,&__pyx_n_s_Pprol,&__pyx_n_s_Pdivi,&__pyx_n_s_dx,&__pyx_n_s_dy,&__pyx_n_s_myplots,0};
    PyObject* values[20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        CYTHON_FALLTHROUGH;
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        CYTHON_FALLTHROUGH;
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        CYTHON_FALLTHROUGH;
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Restart)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_store)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_ABM", 1, 20, 20, 1); __PYX_ERR(0, 475, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_resx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_ABM", 1, 20, 20, 2); __PYX_ERR(0, 475, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_resy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_ABM", 1, 20, 20, 3); __PYX_ERR(0, 475, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_steps)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_ABM", 1, 20, 20, 4); __PYX_ERR(0, 475, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_SavN)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_ABM", 1, 20, 20, 5); __PYX_ERR(0, 475, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Dox)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_ABM", 1, 20, 20, 6); __PYX_ERR(0, 475, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lambdaC)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_ABM", 1, 20, 20, 7); __PYX_ERR(0, 475, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_O2_crit)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_ABM", 1, 20, 20, 8); __PYX_ERR(0, 475, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_low)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_ABM", 1, 20, 20, 9); __PYX_ERR(0, 475, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Dup)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_ABM", 1, 20, 20, 10); __PYX_ERR(0, 475, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_trapped)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_ABM", 1, 20, 20, 11); __PYX_ERR(0, 475, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Qup)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_ABM", 1, 20, 20, 12); __PYX_ERR(0, 475, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_epsilon)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_ABM", 1, 20, 20, 13); __PYX_ERR(0, 475, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Pdie)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_ABM", 1, 20, 20, 14); __PYX_ERR(0, 475, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Pprol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_ABM", 1, 20, 20, 15); __PYX_ERR(0, 475, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (likely((values[16] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Pdivi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_ABM", 1, 20, 20, 16); __PYX_ERR(0, 475, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 17:
        if (likely((values[17] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_ABM", 1, 20, 20, 17); __PYX_ERR(0, 475, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 18:
        if (likely((values[18] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_ABM", 1, 20, 20, 18); __PYX_ERR(0, 475, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 19:
        if (likely((values[19] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_myplots)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_ABM", 1, 20, 20, 19); __PYX_ERR(0, 475, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "run_ABM") < 0)) __PYX_ERR(0, 475, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 20) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
      values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
      values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
    }
    __pyx_v_Restart = ((PyObject*)values[0]);
    __pyx_v_store = ((PyObject*)values[1]);
    __pyx_v_resx = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_resx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
    __pyx_v_resy = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_resy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
    __pyx_v_steps = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_steps == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
    __pyx_v_SavN = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_SavN == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
    __pyx_v_Dox = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_Dox == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
    __pyx_v_lambdaC = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_lambdaC == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
    __pyx_v_O2_crit = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_O2_crit == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
    __pyx_v_low = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_low == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
    __pyx_v_Dup = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_Dup == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
    __pyx_v_trapped = __pyx_PyFloat_AsDouble(values[11]); if (unlikely((__pyx_v_trapped == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
    __pyx_v_Qup = __Pyx_PyInt_As_int(values[12]); if (unlikely((__pyx_v_Qup == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
    __pyx_v_epsilon = __pyx_PyFloat_AsDouble(values[13]); if (unlikely((__pyx_v_epsilon == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
    __pyx_v_Pdie = __pyx_PyFloat_AsDouble(values[14]); if (unlikely((__pyx_v_Pdie == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
    __pyx_v_Pprol = __pyx_PyFloat_AsDouble(values[15]); if (unlikely((__pyx_v_Pprol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
    __pyx_v_Pdivi = __pyx_PyFloat_AsDouble(values[16]); if (unlikely((__pyx_v_Pdivi == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
    __pyx_v_dx = __pyx_PyFloat_AsDouble(values[17]); if (unlikely((__pyx_v_dx == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
    __pyx_v_dy = __pyx_PyFloat_AsDouble(values[18]); if (unlikely((__pyx_v_dy == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
    __pyx_v_myplots = __Pyx_PyObject_IsTrue(values[19]); if (unlikely((__pyx_v_myplots == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("run_ABM", 1, 20, 20, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 475, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("GBM.run_ABM", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Restart), (&PyUnicode_Type), 1, "Restart", 1))) __PYX_ERR(0, 475, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_store), (&PyUnicode_Type), 1, "store", 1))) __PYX_ERR(0, 475, __pyx_L1_error)
  __pyx_r = __pyx_pf_3GBM_20run_ABM(__pyx_self, __pyx_v_Restart, __pyx_v_store, __pyx_v_resx, __pyx_v_resy, __pyx_v_steps, __pyx_v_SavN, __pyx_v_Dox, __pyx_v_lambdaC, __pyx_v_O2_crit, __pyx_v_low, __pyx_v_Dup, __pyx_v_trapped, __pyx_v_Qup, __pyx_v_epsilon, __pyx_v_Pdie, __pyx_v_Pprol, __pyx_v_Pdivi, __pyx_v_dx, __pyx_v_dy, __pyx_v_myplots);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "GBM.pyx":559
 *         # 4) Consider all single cells
 *         # Go through the cells in random order
 *         Proliferating = sorted(index[Alive==1], key=lambda k: random.random())             # <<<<<<<<<<<<<<
 * 
 *         for k in Proliferating:
 */

/* Python wrapper */
static PyObject *__pyx_pw_3GBM_7run_ABM_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_k); /*proto*/
static PyMethodDef __pyx_mdef_3GBM_7run_ABM_lambda1 = {"lambda1", (PyCFunction)__pyx_pw_3GBM_7run_ABM_lambda1, METH_O, 0};
static PyObject *__pyx_pw_3GBM_7run_ABM_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_k) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda1(__pyx_self, ((PyObject *)__pyx_v_k));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda1(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda1", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_random); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_random); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("GBM.run_ABM.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "GBM.pyx":647
 * 
 *         # 5) Consider all clusters with cells that are alive.
 *         Quiescent = sorted(index[Alive>1], key=lambda k: random.random())             # <<<<<<<<<<<<<<
 * 
 *         for k in Quiescent:
 */

/* Python wrapper */
static PyObject *__pyx_pw_3GBM_7run_ABM_1lambda2(PyObject *__pyx_self, PyObject *__pyx_v_k); /*proto*/
static PyMethodDef __pyx_mdef_3GBM_7run_ABM_1lambda2 = {"lambda2", (PyCFunction)__pyx_pw_3GBM_7run_ABM_1lambda2, METH_O, 0};
static PyObject *__pyx_pw_3GBM_7run_ABM_1lambda2(PyObject *__pyx_self, PyObject *__pyx_v_k) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda2 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda2(__pyx_self, ((PyObject *)__pyx_v_k));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda2(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda2", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_random); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_random); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("GBM.run_ABM.lambda2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "GBM.pyx":475
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def run_ABM(str Restart, str store, int resx, int resy, int steps, int SavN, double Dox, double lambdaC, double O2_crit, int low, int Dup, double trapped, int Qup, double epsilon, double Pdie, double Pprol, double Pdivi,  double dx, double dy, bint myplots):             # <<<<<<<<<<<<<<
 * 
 *     cdef double start_time = time.time()
 */

static PyObject *__pyx_pf_3GBM_20run_ABM(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_Restart, PyObject *__pyx_v_store, int __pyx_v_resx, int __pyx_v_resy, int __pyx_v_steps, int __pyx_v_SavN, double __pyx_v_Dox, double __pyx_v_lambdaC, double __pyx_v_O2_crit, int __pyx_v_low, int __pyx_v_Dup, double __pyx_v_trapped, int __pyx_v_Qup, double __pyx_v_epsilon, double __pyx_v_Pdie, double __pyx_v_Pprol, double __pyx_v_Pdivi, double __pyx_v_dx, double __pyx_v_dy, int __pyx_v_myplots) {
  double __pyx_v_start_time;
  PyObject *__pyx_v_cwd = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_logfile = 0;
  PyObject *__pyx_v_paramsfile = 0;
  int __pyx_v_i;
  int __pyx_v_k;
  CYTHON_UNUSED int __pyx_v_Cell;
  int __pyx_v_tstart;
  int __pyx_v_new;
  int __pyx_v_daughter;
  int __pyx_v_gsize;
  int __pyx_v_upper;
  int __pyx_v_idummy1;
  int __pyx_v_idummy2;
  int __pyx_v_idummy3;
  int __pyx_v_idummy4;
  int __pyx_v_idummy5;
  int __pyx_v_asize;
  int __pyx_v_a_tot;
  float __pyx_v_Reaper;
  float __pyx_v_move;
  float __pyx_v_divide;
  float __pyx_v_Pup;
  float __pyx_v_fdummy1;
  float __pyx_v_fdummy2;
  PyArrayObject *__pyx_v_neigh = 0;
  PyArrayObject *__pyx_v_index = 0;
  PyArrayObject *__pyx_v_Cell_pop = 0;
  PyArrayObject *__pyx_v_GSC = 0;
  PyArrayObject *__pyx_v_GPP = 0;
  PyArrayObject *__pyx_v_GDS = 0;
  PyArrayObject *__pyx_v_Alive = 0;
  PyArrayObject *__pyx_v_Dead = 0;
  PyArrayObject *__pyx_v_Rim = 0;
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_Ox_irr = 0;
  PyArrayObject *__pyx_v_Pmove = 0;
  PyArrayObject *__pyx_v_PDiv = 0;
  PyArrayObject *__pyx_v_PDeath = 0;
  PyArrayObject *__pyx_v_free = 0;
  PyArrayObject *__pyx_v_mask = 0;
  PyObject *__pyx_v_Discarded = 0;
  PyObject *__pyx_v_Proliferating = 0;
  PyObject *__pyx_v_Quiescent = 0;
  PyObject *__pyx_v_Xs_r = 0;
  PyObject *__pyx_v_Ys_r = 0;
  int __pyx_v_DIV;
  int __pyx_v_iden;
  PyObject *__pyx_v_Input = 0;
  PyObject *__pyx_v_mesh = NULL;
  PyObject *__pyx_v_pl = NULL;
  PyObject *__pyx_v_phs = NULL;
  PyObject *__pyx_v_voronoi_kdtree = NULL;
  PyObject *__pyx_v_tree = NULL;
  PyObject *__pyx_v_Blood_vessel = NULL;
  PyObject *__pyx_v_oxygen = NULL;
  float __pyx_v_timeStepDuration;
  PyObject *__pyx_v_GSC_tot = NULL;
  PyObject *__pyx_v_GPP_tot = NULL;
  PyObject *__pyx_v_GDS_tot = NULL;
  PyObject *__pyx_v_Dead_tot = NULL;
  PyObject *__pyx_v_Alive_single = NULL;
  PyObject *__pyx_v_ff = NULL;
  PyObject *__pyx_v_tri = NULL;
  PyObject *__pyx_v_indptr = NULL;
  PyObject *__pyx_v_indices = NULL;
  PyObject *__pyx_v_kdtree = NULL;
  PyObject *__pyx_v_res = NULL;
  PyObject *__pyx_v_daughters = NULL;
  PyObject *__pyx_v_exten = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *(*__pyx_t_25)(PyObject *);
  int __pyx_t_26;
  int __pyx_t_27;
  int __pyx_t_28;
  int __pyx_t_29;
  int __pyx_t_30;
  Py_ssize_t __pyx_t_31;
  int __pyx_t_32;
  float __pyx_t_33;
  long __pyx_t_34;
  Py_ssize_t __pyx_t_35;
  int __pyx_t_36;
  int __pyx_t_37;
  int __pyx_t_38;
  int __pyx_t_39;
  PyObject *(*__pyx_t_40)(PyObject *);
  Py_UCS4 __pyx_t_41;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run_ABM", 0);

  /* "GBM.pyx":477
 * def run_ABM(str Restart, str store, int resx, int resy, int steps, int SavN, double Dox, double lambdaC, double O2_crit, int low, int Dup, double trapped, int Qup, double epsilon, double Pdie, double Pprol, double Pdivi,  double dx, double dy, bint myplots):
 * 
 *     cdef double start_time = time.time()             # <<<<<<<<<<<<<<
 *     cdef str cwd = os.getcwd()
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_start_time = __pyx_t_4;

  /* "GBM.pyx":478
 * 
 *     cdef double start_time = time.time()
 *     cdef str cwd = os.getcwd()             # <<<<<<<<<<<<<<
 * 
 *     # Cython definitions
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_getcwd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 478, __pyx_L1_error)
  __pyx_v_cwd = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "GBM.pyx":488
 *     cdef list Discarded, Proliferating, Quiescent, Xs_r, Ys_r
 *     cdef bint DIV
 *     cdef int iden = 0             # <<<<<<<<<<<<<<
 * 
 *     cdef extern from "stdlib.h":
 */
  __pyx_v_iden = 0;

  /* "GBM.pyx":493
 *         double drand48()
 * 
 *     cdef list Input = [resx, resy, dx, dy, steps, SavN, O2_crit, lambdaC, Dox, low, Dup, trapped, Qup, epsilon, Pdie, Pprol, Pdivi]             # <<<<<<<<<<<<<<
 * 
 *     gsize, tstart, Input, mesh, Ox_irr, low, points, pl, phs, index, Cell_pop, GSC, GPP, GDS, Alive, Dead, Rim, Discarded, voronoi_kdtree, tree = init_Cell_pop(Restart, Input)
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_resx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_resy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_dx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_dy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_steps); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_SavN); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_O2_crit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_lambdaC); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyFloat_FromDouble(__pyx_v_Dox); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_low); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_Dup); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyFloat_FromDouble(__pyx_v_trapped); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_Qup); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_15 = PyFloat_FromDouble(__pyx_v_epsilon); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_16 = PyFloat_FromDouble(__pyx_v_Pdie); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_17 = PyFloat_FromDouble(__pyx_v_Pprol); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_18 = PyFloat_FromDouble(__pyx_v_Pdivi); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_19 = PyList_New(17); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_19, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_19, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_19, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_19, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_19, 4, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_19, 5, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_19, 6, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_19, 7, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_19, 8, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyList_SET_ITEM(__pyx_t_19, 9, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyList_SET_ITEM(__pyx_t_19, 10, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_13);
  PyList_SET_ITEM(__pyx_t_19, 11, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_14);
  PyList_SET_ITEM(__pyx_t_19, 12, __pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_15);
  PyList_SET_ITEM(__pyx_t_19, 13, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_16);
  PyList_SET_ITEM(__pyx_t_19, 14, __pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_17);
  PyList_SET_ITEM(__pyx_t_19, 15, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_18);
  PyList_SET_ITEM(__pyx_t_19, 16, __pyx_t_18);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_v_Input = ((PyObject*)__pyx_t_19);
  __pyx_t_19 = 0;

  /* "GBM.pyx":495
 *     cdef list Input = [resx, resy, dx, dy, steps, SavN, O2_crit, lambdaC, Dox, low, Dup, trapped, Qup, epsilon, Pdie, Pprol, Pdivi]
 * 
 *     gsize, tstart, Input, mesh, Ox_irr, low, points, pl, phs, index, Cell_pop, GSC, GPP, GDS, Alive, Dead, Rim, Discarded, voronoi_kdtree, tree = init_Cell_pop(Restart, Input)             # <<<<<<<<<<<<<<
 * 
 *     Blood_vessel, oxygen = init_oxygen(Restart, Ox_irr, mesh, low, points)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_init_Cell_pop); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_17 = NULL;
  __pyx_t_20 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
    __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_18);
    if (likely(__pyx_t_17)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
      __Pyx_INCREF(__pyx_t_17);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_18, function);
      __pyx_t_20 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_18)) {
    PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_v_Restart, __pyx_v_Input};
    __pyx_t_19 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_20, 2+__pyx_t_20); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_GOTREF(__pyx_t_19);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
    PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_v_Restart, __pyx_v_Input};
    __pyx_t_19 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_20, 2+__pyx_t_20); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_GOTREF(__pyx_t_19);
  } else
  #endif
  {
    __pyx_t_16 = PyTuple_New(2+__pyx_t_20); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    if (__pyx_t_17) {
      __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_17); __pyx_t_17 = NULL;
    }
    __Pyx_INCREF(__pyx_v_Restart);
    __Pyx_GIVEREF(__pyx_v_Restart);
    PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_20, __pyx_v_Restart);
    __Pyx_INCREF(__pyx_v_Input);
    __Pyx_GIVEREF(__pyx_v_Input);
    PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_20, __pyx_v_Input);
    __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_16, NULL); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  }
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_19))) || (PyList_CheckExact(__pyx_t_19))) {
    PyObject* sequence = __pyx_t_19;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 20)) {
      if (size > 20) __Pyx_RaiseTooManyValuesError(20);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 495, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_18 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_16 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_17 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_15 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_14 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_13 = PyTuple_GET_ITEM(sequence, 5); 
      __pyx_t_12 = PyTuple_GET_ITEM(sequence, 6); 
      __pyx_t_11 = PyTuple_GET_ITEM(sequence, 7); 
      __pyx_t_10 = PyTuple_GET_ITEM(sequence, 8); 
      __pyx_t_9 = PyTuple_GET_ITEM(sequence, 9); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 10); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 11); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 12); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 13); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 14); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 15); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 16); 
      __pyx_t_21 = PyTuple_GET_ITEM(sequence, 17); 
      __pyx_t_22 = PyTuple_GET_ITEM(sequence, 18); 
      __pyx_t_23 = PyTuple_GET_ITEM(sequence, 19); 
    } else {
      __pyx_t_18 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_16 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_17 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_15 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_14 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_13 = PyList_GET_ITEM(sequence, 5); 
      __pyx_t_12 = PyList_GET_ITEM(sequence, 6); 
      __pyx_t_11 = PyList_GET_ITEM(sequence, 7); 
      __pyx_t_10 = PyList_GET_ITEM(sequence, 8); 
      __pyx_t_9 = PyList_GET_ITEM(sequence, 9); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 10); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 11); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 12); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 13); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 14); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 15); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 16); 
      __pyx_t_21 = PyList_GET_ITEM(sequence, 17); 
      __pyx_t_22 = PyList_GET_ITEM(sequence, 18); 
      __pyx_t_23 = PyList_GET_ITEM(sequence, 19); 
    }
    __Pyx_INCREF(__pyx_t_18);
    __Pyx_INCREF(__pyx_t_16);
    __Pyx_INCREF(__pyx_t_17);
    __Pyx_INCREF(__pyx_t_15);
    __Pyx_INCREF(__pyx_t_14);
    __Pyx_INCREF(__pyx_t_13);
    __Pyx_INCREF(__pyx_t_12);
    __Pyx_INCREF(__pyx_t_11);
    __Pyx_INCREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_21);
    __Pyx_INCREF(__pyx_t_22);
    __Pyx_INCREF(__pyx_t_23);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[20] = {&__pyx_t_18,&__pyx_t_16,&__pyx_t_17,&__pyx_t_15,&__pyx_t_14,&__pyx_t_13,&__pyx_t_12,&__pyx_t_11,&__pyx_t_10,&__pyx_t_9,&__pyx_t_8,&__pyx_t_7,&__pyx_t_6,&__pyx_t_5,&__pyx_t_3,&__pyx_t_2,&__pyx_t_1,&__pyx_t_21,&__pyx_t_22,&__pyx_t_23};
      for (i=0; i < 20; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 495, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[20] = {&__pyx_t_18,&__pyx_t_16,&__pyx_t_17,&__pyx_t_15,&__pyx_t_14,&__pyx_t_13,&__pyx_t_12,&__pyx_t_11,&__pyx_t_10,&__pyx_t_9,&__pyx_t_8,&__pyx_t_7,&__pyx_t_6,&__pyx_t_5,&__pyx_t_3,&__pyx_t_2,&__pyx_t_1,&__pyx_t_21,&__pyx_t_22,&__pyx_t_23};
    __pyx_t_24 = PyObject_GetIter(__pyx_t_19); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_24);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_25 = Py_TYPE(__pyx_t_24)->tp_iternext;
    for (index=0; index < 20; index++) {
      PyObject* item = __pyx_t_25(__pyx_t_24); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_25(__pyx_t_24), 20) < 0) __PYX_ERR(0, 495, __pyx_L1_error)
    __pyx_t_25 = NULL;
    __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
    __pyx_t_25 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 495, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_20 = __Pyx_PyInt_As_int(__pyx_t_18); if (unlikely((__pyx_t_20 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_26 = __Pyx_PyInt_As_int(__pyx_t_16); if (unlikely((__pyx_t_26 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_17))||((__pyx_t_17) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_17)->tp_name), 0))) __PYX_ERR(0, 495, __pyx_L1_error)
  if (!(likely(((__pyx_t_14) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_14, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 495, __pyx_L1_error)
  __pyx_t_27 = __Pyx_PyInt_As_int(__pyx_t_13); if (unlikely((__pyx_t_27 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (!(likely(((__pyx_t_12) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_12, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 495, __pyx_L1_error)
  if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 495, __pyx_L1_error)
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 495, __pyx_L1_error)
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 495, __pyx_L1_error)
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 495, __pyx_L1_error)
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 495, __pyx_L1_error)
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 495, __pyx_L1_error)
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 495, __pyx_L1_error)
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 495, __pyx_L1_error)
  if (!(likely(PyList_CheckExact(__pyx_t_21))||((__pyx_t_21) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_21)->tp_name), 0))) __PYX_ERR(0, 495, __pyx_L1_error)
  __pyx_v_gsize = __pyx_t_20;
  __pyx_v_tstart = __pyx_t_26;
  __Pyx_DECREF_SET(__pyx_v_Input, ((PyObject*)__pyx_t_17));
  __pyx_t_17 = 0;
  __pyx_v_mesh = __pyx_t_15;
  __pyx_t_15 = 0;
  __pyx_v_Ox_irr = ((PyArrayObject *)__pyx_t_14);
  __pyx_t_14 = 0;
  __pyx_v_low = __pyx_t_27;
  __pyx_v_points = ((PyArrayObject *)__pyx_t_12);
  __pyx_t_12 = 0;
  __pyx_v_pl = __pyx_t_11;
  __pyx_t_11 = 0;
  __pyx_v_phs = __pyx_t_10;
  __pyx_t_10 = 0;
  __pyx_v_index = ((PyArrayObject *)__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_v_Cell_pop = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_v_GSC = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_v_GPP = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_v_GDS = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_v_Alive = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_v_Dead = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_Rim = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_Discarded = ((PyObject*)__pyx_t_21);
  __pyx_t_21 = 0;
  __pyx_v_voronoi_kdtree = __pyx_t_22;
  __pyx_t_22 = 0;
  __pyx_v_tree = __pyx_t_23;
  __pyx_t_23 = 0;

  /* "GBM.pyx":497
 *     gsize, tstart, Input, mesh, Ox_irr, low, points, pl, phs, index, Cell_pop, GSC, GPP, GDS, Alive, Dead, Rim, Discarded, voronoi_kdtree, tree = init_Cell_pop(Restart, Input)
 * 
 *     Blood_vessel, oxygen = init_oxygen(Restart, Ox_irr, mesh, low, points)             # <<<<<<<<<<<<<<
 * 
 *     # Time-step, to be defined. For reaction-diffusion equations
 */
  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_init_oxygen); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_22 = __Pyx_PyInt_From_int(__pyx_v_low); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __pyx_t_21 = NULL;
  __pyx_t_27 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_23))) {
    __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_23);
    if (likely(__pyx_t_21)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_23);
      __Pyx_INCREF(__pyx_t_21);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_23, function);
      __pyx_t_27 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_23)) {
    PyObject *__pyx_temp[6] = {__pyx_t_21, __pyx_v_Restart, ((PyObject *)__pyx_v_Ox_irr), __pyx_v_mesh, __pyx_t_22, ((PyObject *)__pyx_v_points)};
    __pyx_t_19 = __Pyx_PyFunction_FastCall(__pyx_t_23, __pyx_temp+1-__pyx_t_27, 5+__pyx_t_27); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 497, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_23)) {
    PyObject *__pyx_temp[6] = {__pyx_t_21, __pyx_v_Restart, ((PyObject *)__pyx_v_Ox_irr), __pyx_v_mesh, __pyx_t_22, ((PyObject *)__pyx_v_points)};
    __pyx_t_19 = __Pyx_PyCFunction_FastCall(__pyx_t_23, __pyx_temp+1-__pyx_t_27, 5+__pyx_t_27); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 497, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(5+__pyx_t_27); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_21) {
      __Pyx_GIVEREF(__pyx_t_21); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_21); __pyx_t_21 = NULL;
    }
    __Pyx_INCREF(__pyx_v_Restart);
    __Pyx_GIVEREF(__pyx_v_Restart);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_27, __pyx_v_Restart);
    __Pyx_INCREF(((PyObject *)__pyx_v_Ox_irr));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_Ox_irr));
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_27, ((PyObject *)__pyx_v_Ox_irr));
    __Pyx_INCREF(__pyx_v_mesh);
    __Pyx_GIVEREF(__pyx_v_mesh);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_27, __pyx_v_mesh);
    __Pyx_GIVEREF(__pyx_t_22);
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_27, __pyx_t_22);
    __Pyx_INCREF(((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
    PyTuple_SET_ITEM(__pyx_t_1, 4+__pyx_t_27, ((PyObject *)__pyx_v_points));
    __pyx_t_22 = 0;
    __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_t_1, NULL); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_19))) || (PyList_CheckExact(__pyx_t_19))) {
    PyObject* sequence = __pyx_t_19;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 497, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_23 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_23 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_23);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_23 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_22 = PyObject_GetIter(__pyx_t_19); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_25 = Py_TYPE(__pyx_t_22)->tp_iternext;
    index = 0; __pyx_t_23 = __pyx_t_25(__pyx_t_22); if (unlikely(!__pyx_t_23)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_23);
    index = 1; __pyx_t_1 = __pyx_t_25(__pyx_t_22); if (unlikely(!__pyx_t_1)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_25(__pyx_t_22), 2) < 0) __PYX_ERR(0, 497, __pyx_L1_error)
    __pyx_t_25 = NULL;
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __pyx_t_25 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 497, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_v_Blood_vessel = __pyx_t_23;
  __pyx_t_23 = 0;
  __pyx_v_oxygen = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "GBM.pyx":501
 *     # Time-step, to be defined. For reaction-diffusion equations
 *     # timeStepDuration = 10 * 0.9 * dx**2 / (2 * Dox)
 *     cdef float timeStepDuration = 4.5             # <<<<<<<<<<<<<<
 * 
 *     if myplots:
 */
  __pyx_v_timeStepDuration = 4.5;

  /* "GBM.pyx":503
 *     cdef float timeStepDuration = 4.5
 * 
 *     if myplots:             # <<<<<<<<<<<<<<
 *         plt.figure(1,figsize=(8,8))
 *         plt.figure(2,figsize=(8,8))
 */
  __pyx_t_28 = (__pyx_v_myplots != 0);
  if (__pyx_t_28) {

    /* "GBM.pyx":504
 * 
 *     if myplots:
 *         plt.figure(1,figsize=(8,8))             # <<<<<<<<<<<<<<
 *         plt.figure(2,figsize=(8,8))
 *         GSC_tot = []
 */
    __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_plt); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 504, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_figure); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 504, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    if (PyDict_SetItem(__pyx_t_19, __pyx_n_s_figsize, __pyx_tuple__21) < 0) __PYX_ERR(0, 504, __pyx_L1_error)
    __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__20, __pyx_t_19); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 504, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

    /* "GBM.pyx":505
 *     if myplots:
 *         plt.figure(1,figsize=(8,8))
 *         plt.figure(2,figsize=(8,8))             # <<<<<<<<<<<<<<
 *         GSC_tot = []
 *         GPP_tot = []
 */
    __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_plt); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_figure); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __pyx_t_23 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    if (PyDict_SetItem(__pyx_t_23, __pyx_n_s_figsize, __pyx_tuple__21) < 0) __PYX_ERR(0, 505, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_tuple__22, __pyx_t_23); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "GBM.pyx":506
 *         plt.figure(1,figsize=(8,8))
 *         plt.figure(2,figsize=(8,8))
 *         GSC_tot = []             # <<<<<<<<<<<<<<
 *         GPP_tot = []
 *         GDS_tot = []
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_GSC_tot = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "GBM.pyx":507
 *         plt.figure(2,figsize=(8,8))
 *         GSC_tot = []
 *         GPP_tot = []             # <<<<<<<<<<<<<<
 *         GDS_tot = []
 *         Dead_tot = []
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_GPP_tot = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "GBM.pyx":508
 *         GSC_tot = []
 *         GPP_tot = []
 *         GDS_tot = []             # <<<<<<<<<<<<<<
 *         Dead_tot = []
 *         Alive_single = []
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_GDS_tot = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "GBM.pyx":509
 *         GPP_tot = []
 *         GDS_tot = []
 *         Dead_tot = []             # <<<<<<<<<<<<<<
 *         Alive_single = []
 * 
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_Dead_tot = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "GBM.pyx":510
 *         GDS_tot = []
 *         Dead_tot = []
 *         Alive_single = []             # <<<<<<<<<<<<<<
 * 
 *     # Save summary of history
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_Alive_single = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "GBM.pyx":503
 *     cdef float timeStepDuration = 4.5
 * 
 *     if myplots:             # <<<<<<<<<<<<<<
 *         plt.figure(1,figsize=(8,8))
 *         plt.figure(2,figsize=(8,8))
 */
  }

  /* "GBM.pyx":513
 * 
 *     # Save summary of history
 *     logfile = cwd + "/" + store + "/history.log"             # <<<<<<<<<<<<<<
 *     if not os.path.isfile(logfile) or tstart == -1:
 *         ff = open(logfile, "w")
 */
  __pyx_t_1 = __Pyx_PyUnicode_ConcatSafe(__pyx_v_cwd, __pyx_kp_u__23); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_23 = __Pyx_PyUnicode_ConcatSafe(__pyx_t_1, __pyx_v_store); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_t_23, __pyx_kp_u_history_log); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_v_logfile = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "GBM.pyx":514
 *     # Save summary of history
 *     logfile = cwd + "/" + store + "/history.log"
 *     if not os.path.isfile(logfile) or tstart == -1:             # <<<<<<<<<<<<<<
 *         ff = open(logfile, "w")
 *         ff.write("# Summary file for ABM. \n")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_os); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_path); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_isfile); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_t_19 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_23))) {
    __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_23);
    if (likely(__pyx_t_19)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_23);
      __Pyx_INCREF(__pyx_t_19);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_23, function);
    }
  }
  __pyx_t_1 = (__pyx_t_19) ? __Pyx_PyObject_Call2Args(__pyx_t_23, __pyx_t_19, __pyx_v_logfile) : __Pyx_PyObject_CallOneArg(__pyx_t_23, __pyx_v_logfile);
  __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_29 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_29 < 0)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_30 = ((!__pyx_t_29) != 0);
  if (!__pyx_t_30) {
  } else {
    __pyx_t_28 = __pyx_t_30;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_30 = ((__pyx_v_tstart == -1L) != 0);
  __pyx_t_28 = __pyx_t_30;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_28) {

    /* "GBM.pyx":515
 *     logfile = cwd + "/" + store + "/history.log"
 *     if not os.path.isfile(logfile) or tstart == -1:
 *         ff = open(logfile, "w")             # <<<<<<<<<<<<<<
 *         ff.write("# Summary file for ABM. \n")
 *         ff.write("# Time-step, runtime, GSC, GPP, GDS, Dead, Single cells \n")
 */
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_logfile);
    __Pyx_GIVEREF(__pyx_v_logfile);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_logfile);
    __Pyx_INCREF(__pyx_n_u_w);
    __Pyx_GIVEREF(__pyx_n_u_w);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_w);
    __pyx_t_23 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_ff = __pyx_t_23;
    __pyx_t_23 = 0;

    /* "GBM.pyx":516
 *     if not os.path.isfile(logfile) or tstart == -1:
 *         ff = open(logfile, "w")
 *         ff.write("# Summary file for ABM. \n")             # <<<<<<<<<<<<<<
 *         ff.write("# Time-step, runtime, GSC, GPP, GDS, Dead, Single cells \n")
 *         ff.close()
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ff, __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_19 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_19)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_19);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_23 = (__pyx_t_19) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_19, __pyx_kp_u_Summary_file_for_ABM) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u_Summary_file_for_ABM);
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

    /* "GBM.pyx":517
 *         ff = open(logfile, "w")
 *         ff.write("# Summary file for ABM. \n")
 *         ff.write("# Time-step, runtime, GSC, GPP, GDS, Dead, Single cells \n")             # <<<<<<<<<<<<<<
 *         ff.close()
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ff, __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_19 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_19)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_19);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_23 = (__pyx_t_19) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_19, __pyx_kp_u_Time_step_runtime_GSC_GPP_GDS_D) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u_Time_step_runtime_GSC_GPP_GDS_D);
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

    /* "GBM.pyx":518
 *         ff.write("# Summary file for ABM. \n")
 *         ff.write("# Time-step, runtime, GSC, GPP, GDS, Dead, Single cells \n")
 *         ff.close()             # <<<<<<<<<<<<<<
 * 
 *     # Save model parameters for run
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ff, __pyx_n_s_close); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_19 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_19)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_19);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_23 = (__pyx_t_19) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_19) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

    /* "GBM.pyx":514
 *     # Save summary of history
 *     logfile = cwd + "/" + store + "/history.log"
 *     if not os.path.isfile(logfile) or tstart == -1:             # <<<<<<<<<<<<<<
 *         ff = open(logfile, "w")
 *         ff.write("# Summary file for ABM. \n")
 */
  }

  /* "GBM.pyx":521
 * 
 *     # Save model parameters for run
 *     paramsfile = cwd + "/" + store + "/params.log"             # <<<<<<<<<<<<<<
 *     if not os.path.isfile(paramsfile) or tstart == -1:
 *         ff = open(paramsfile, "w")
 */
  __pyx_t_23 = __Pyx_PyUnicode_ConcatSafe(__pyx_v_cwd, __pyx_kp_u__23); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_1 = __Pyx_PyUnicode_ConcatSafe(__pyx_t_23, __pyx_v_store); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_kp_u_params_log); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_paramsfile = ((PyObject*)__pyx_t_23);
  __pyx_t_23 = 0;

  /* "GBM.pyx":522
 *     # Save model parameters for run
 *     paramsfile = cwd + "/" + store + "/params.log"
 *     if not os.path.isfile(paramsfile) or tstart == -1:             # <<<<<<<<<<<<<<
 *         ff = open(paramsfile, "w")
 *         ff.write("# resx, resy, steps, SavN, Dox, lambdaC, O2_crit, low, Dup, trapped, Qup, epsilon, Pdie, Pprol, Pdivi, dx, dy \n")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_os); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_path); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_isfile); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_t_19 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_19)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_19);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_23 = (__pyx_t_19) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_19, __pyx_v_paramsfile) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_paramsfile);
  __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
  if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_30 = __Pyx_PyObject_IsTrue(__pyx_t_23); if (unlikely(__pyx_t_30 < 0)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_29 = ((!__pyx_t_30) != 0);
  if (!__pyx_t_29) {
  } else {
    __pyx_t_28 = __pyx_t_29;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_29 = ((__pyx_v_tstart == -1L) != 0);
  __pyx_t_28 = __pyx_t_29;
  __pyx_L12_bool_binop_done:;
  if (__pyx_t_28) {

    /* "GBM.pyx":523
 *     paramsfile = cwd + "/" + store + "/params.log"
 *     if not os.path.isfile(paramsfile) or tstart == -1:
 *         ff = open(paramsfile, "w")             # <<<<<<<<<<<<<<
 *         ff.write("# resx, resy, steps, SavN, Dox, lambdaC, O2_crit, low, Dup, trapped, Qup, epsilon, Pdie, Pprol, Pdivi, dx, dy \n")
 *         ff.write("%i %i %i %i %.9E %.9E %.9E %i %i %.9E %i %.9E %.9E %.9E %.9E %.2E %.2E \n" % (resx, resy, steps, SavN, Dox, lambdaC, O2_crit, low, Dup, trapped, Qup, epsilon, Pdie, Pprol, Pdivi, dx, dy))
 */
    __pyx_t_23 = PyTuple_New(2); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 523, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_INCREF(__pyx_v_paramsfile);
    __Pyx_GIVEREF(__pyx_v_paramsfile);
    PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_v_paramsfile);
    __Pyx_INCREF(__pyx_n_u_w);
    __Pyx_GIVEREF(__pyx_n_u_w);
    PyTuple_SET_ITEM(__pyx_t_23, 1, __pyx_n_u_w);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ff, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "GBM.pyx":524
 *     if not os.path.isfile(paramsfile) or tstart == -1:
 *         ff = open(paramsfile, "w")
 *         ff.write("# resx, resy, steps, SavN, Dox, lambdaC, O2_crit, low, Dup, trapped, Qup, epsilon, Pdie, Pprol, Pdivi, dx, dy \n")             # <<<<<<<<<<<<<<
 *         ff.write("%i %i %i %i %.9E %.9E %.9E %i %i %.9E %i %.9E %.9E %.9E %.9E %.2E %.2E \n" % (resx, resy, steps, SavN, Dox, lambdaC, O2_crit, low, Dup, trapped, Qup, epsilon, Pdie, Pprol, Pdivi, dx, dy))
 *         ff.close()
 */
    __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_v_ff, __pyx_n_s_write); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __pyx_t_19 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_23))) {
      __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_23);
      if (likely(__pyx_t_19)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_23);
        __Pyx_INCREF(__pyx_t_19);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_23, function);
      }
    }
    __pyx_t_1 = (__pyx_t_19) ? __Pyx_PyObject_Call2Args(__pyx_t_23, __pyx_t_19, __pyx_kp_u_resx_resy_steps_SavN_Dox_lambda) : __Pyx_PyObject_CallOneArg(__pyx_t_23, __pyx_kp_u_resx_resy_steps_SavN_Dox_lambda);
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "GBM.pyx":525
 *         ff = open(paramsfile, "w")
 *         ff.write("# resx, resy, steps, SavN, Dox, lambdaC, O2_crit, low, Dup, trapped, Qup, epsilon, Pdie, Pprol, Pdivi, dx, dy \n")
 *         ff.write("%i %i %i %i %.9E %.9E %.9E %i %i %.9E %i %.9E %.9E %.9E %.9E %.2E %.2E \n" % (resx, resy, steps, SavN, Dox, lambdaC, O2_crit, low, Dup, trapped, Qup, epsilon, Pdie, Pprol, Pdivi, dx, dy))             # <<<<<<<<<<<<<<
 *         ff.close()
 * 
 */
    __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_v_ff, __pyx_n_s_write); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __pyx_t_19 = __Pyx_PyInt_From_int(__pyx_v_resx); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_22 = __Pyx_PyInt_From_int(__pyx_v_resy); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __pyx_t_21 = __Pyx_PyInt_From_int(__pyx_v_steps); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_SavN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_Dox); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_lambdaC); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_O2_crit); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_low); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_Dup); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_trapped); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_Qup); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = PyFloat_FromDouble(__pyx_v_epsilon); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = PyFloat_FromDouble(__pyx_v_Pdie); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = PyFloat_FromDouble(__pyx_v_Pprol); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_14 = PyFloat_FromDouble(__pyx_v_Pdivi); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 = PyFloat_FromDouble(__pyx_v_dx); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_17 = PyFloat_FromDouble(__pyx_v_dy); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_16 = PyTuple_New(17); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_19);
    PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_19);
    __Pyx_GIVEREF(__pyx_t_22);
    PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_22);
    __Pyx_GIVEREF(__pyx_t_21);
    PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_t_21);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_16, 3, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_16, 4, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_16, 5, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_16, 6, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_16, 7, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_16, 8, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_16, 9, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_16, 10, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_16, 11, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_16, 12, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_16, 13, __pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_16, 14, __pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_16, 15, __pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_16, 16, __pyx_t_17);
    __pyx_t_19 = 0;
    __pyx_t_22 = 0;
    __pyx_t_21 = 0;
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_10 = 0;
    __pyx_t_11 = 0;
    __pyx_t_12 = 0;
    __pyx_t_13 = 0;
    __pyx_t_14 = 0;
    __pyx_t_15 = 0;
    __pyx_t_17 = 0;
    __pyx_t_17 = PyUnicode_Format(__pyx_kp_u_i_i_i_i_9E_9E_9E_i_i_9E_i_9E_9E, __pyx_t_16); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_23))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_23);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_23);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_23, function);
      }
    }
    __pyx_t_1 = (__pyx_t_16) ? __Pyx_PyObject_Call2Args(__pyx_t_23, __pyx_t_16, __pyx_t_17) : __Pyx_PyObject_CallOneArg(__pyx_t_23, __pyx_t_17);
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "GBM.pyx":526
 *         ff.write("# resx, resy, steps, SavN, Dox, lambdaC, O2_crit, low, Dup, trapped, Qup, epsilon, Pdie, Pprol, Pdivi, dx, dy \n")
 *         ff.write("%i %i %i %i %.9E %.9E %.9E %i %i %.9E %i %.9E %.9E %.9E %.9E %.2E %.2E \n" % (resx, resy, steps, SavN, Dox, lambdaC, O2_crit, low, Dup, trapped, Qup, epsilon, Pdie, Pprol, Pdivi, dx, dy))
 *         ff.close()             # <<<<<<<<<<<<<<
 * 
 *     print("Grid creation: --- %s seconds ---" % (time.time() - start_time))
 */
    __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_v_ff, __pyx_n_s_close); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __pyx_t_17 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_23))) {
      __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_23);
      if (likely(__pyx_t_17)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_23);
        __Pyx_INCREF(__pyx_t_17);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_23, function);
      }
    }
    __pyx_t_1 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_23, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_23);
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "GBM.pyx":522
 *     # Save model parameters for run
 *     paramsfile = cwd + "/" + store + "/params.log"
 *     if not os.path.isfile(paramsfile) or tstart == -1:             # <<<<<<<<<<<<<<
 *         ff = open(paramsfile, "w")
 *         ff.write("# resx, resy, steps, SavN, Dox, lambdaC, O2_crit, low, Dup, trapped, Qup, epsilon, Pdie, Pprol, Pdivi, dx, dy \n")
 */
  }

  /* "GBM.pyx":528
 *         ff.close()
 * 
 *     print("Grid creation: --- %s seconds ---" % (time.time() - start_time))             # <<<<<<<<<<<<<<
 * 
 *     for i in range(tstart+1,steps):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_time); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_time); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
    __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_17);
    if (likely(__pyx_t_23)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
      __Pyx_INCREF(__pyx_t_23);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_17, function);
    }
  }
  __pyx_t_1 = (__pyx_t_23) ? __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_23) : __Pyx_PyObject_CallNoArg(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_t_17 = PyFloat_FromDouble(__pyx_v_start_time); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_23 = PyNumber_Subtract(__pyx_t_1, __pyx_t_17); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_t_17 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Grid_creation_s_seconds, __pyx_t_23); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_17); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

  /* "GBM.pyx":530
 *     print("Grid creation: --- %s seconds ---" % (time.time() - start_time))
 * 
 *     for i in range(tstart+1,steps):             # <<<<<<<<<<<<<<
 * 
 *         # 1) Extend grid for cells based on the positions of the current cell population
 */
  __pyx_t_27 = __pyx_v_steps;
  __pyx_t_26 = __pyx_t_27;
  for (__pyx_t_20 = (__pyx_v_tstart + 1); __pyx_t_20 < __pyx_t_26; __pyx_t_20+=1) {
    __pyx_v_i = __pyx_t_20;

    /* "GBM.pyx":536
 * #        t1 = time.time()
 * 
 *         asize = len(Alive[Alive==1])             # <<<<<<<<<<<<<<
 * 
 *         if asize > 0:
 */
    __pyx_t_23 = PyObject_RichCompare(((PyObject *)__pyx_v_Alive), __pyx_int_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_23); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 536, __pyx_L1_error)
    __pyx_t_17 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Alive), __pyx_t_23); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __pyx_t_31 = PyObject_Length(__pyx_t_17); if (unlikely(__pyx_t_31 == ((Py_ssize_t)-1))) __PYX_ERR(0, 536, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_v_asize = __pyx_t_31;

    /* "GBM.pyx":538
 *         asize = len(Alive[Alive==1])
 * 
 *         if asize > 0:             # <<<<<<<<<<<<<<
 *             Xs_r, Ys_r, points, Alive, Rim, index, gsize, tri, indptr, indices, Dead, Cell_pop, GSC, GPP, GDS = ext_grid(gsize, points, Alive, index, Rim, tree, phs, Discarded, Cell_pop, Dead, GSC, GPP, GDS, trapped)
 * 
 */
    __pyx_t_28 = ((__pyx_v_asize > 0) != 0);
    if (__pyx_t_28) {

      /* "GBM.pyx":539
 * 
 *         if asize > 0:
 *             Xs_r, Ys_r, points, Alive, Rim, index, gsize, tri, indptr, indices, Dead, Cell_pop, GSC, GPP, GDS = ext_grid(gsize, points, Alive, index, Rim, tree, phs, Discarded, Cell_pop, Dead, GSC, GPP, GDS, trapped)             # <<<<<<<<<<<<<<
 * 
 * #        print("Extending grid: %s seconds" % (time.time() - t1))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_ext_grid); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 539, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_23);
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_gsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 539, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_16 = PyFloat_FromDouble(__pyx_v_trapped); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 539, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_15 = NULL;
      __pyx_t_32 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_23))) {
        __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_23);
        if (likely(__pyx_t_15)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_23);
          __Pyx_INCREF(__pyx_t_15);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_23, function);
          __pyx_t_32 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_23)) {
        PyObject *__pyx_temp[15] = {__pyx_t_15, __pyx_t_1, ((PyObject *)__pyx_v_points), ((PyObject *)__pyx_v_Alive), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_Rim), __pyx_v_tree, __pyx_v_phs, __pyx_v_Discarded, ((PyObject *)__pyx_v_Cell_pop), ((PyObject *)__pyx_v_Dead), ((PyObject *)__pyx_v_GSC), ((PyObject *)__pyx_v_GPP), ((PyObject *)__pyx_v_GDS), __pyx_t_16};
        __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_23, __pyx_temp+1-__pyx_t_32, 14+__pyx_t_32); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 539, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_23)) {
        PyObject *__pyx_temp[15] = {__pyx_t_15, __pyx_t_1, ((PyObject *)__pyx_v_points), ((PyObject *)__pyx_v_Alive), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_Rim), __pyx_v_tree, __pyx_v_phs, __pyx_v_Discarded, ((PyObject *)__pyx_v_Cell_pop), ((PyObject *)__pyx_v_Dead), ((PyObject *)__pyx_v_GSC), ((PyObject *)__pyx_v_GPP), ((PyObject *)__pyx_v_GDS), __pyx_t_16};
        __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_23, __pyx_temp+1-__pyx_t_32, 14+__pyx_t_32); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 539, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      } else
      #endif
      {
        __pyx_t_14 = PyTuple_New(14+__pyx_t_32); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 539, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        if (__pyx_t_15) {
          __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_15); __pyx_t_15 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_32, __pyx_t_1);
        __Pyx_INCREF(((PyObject *)__pyx_v_points));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
        PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_32, ((PyObject *)__pyx_v_points));
        __Pyx_INCREF(((PyObject *)__pyx_v_Alive));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_Alive));
        PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_32, ((PyObject *)__pyx_v_Alive));
        __Pyx_INCREF(((PyObject *)__pyx_v_index));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_index));
        PyTuple_SET_ITEM(__pyx_t_14, 3+__pyx_t_32, ((PyObject *)__pyx_v_index));
        __Pyx_INCREF(((PyObject *)__pyx_v_Rim));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_Rim));
        PyTuple_SET_ITEM(__pyx_t_14, 4+__pyx_t_32, ((PyObject *)__pyx_v_Rim));
        __Pyx_INCREF(__pyx_v_tree);
        __Pyx_GIVEREF(__pyx_v_tree);
        PyTuple_SET_ITEM(__pyx_t_14, 5+__pyx_t_32, __pyx_v_tree);
        __Pyx_INCREF(__pyx_v_phs);
        __Pyx_GIVEREF(__pyx_v_phs);
        PyTuple_SET_ITEM(__pyx_t_14, 6+__pyx_t_32, __pyx_v_phs);
        __Pyx_INCREF(__pyx_v_Discarded);
        __Pyx_GIVEREF(__pyx_v_Discarded);
        PyTuple_SET_ITEM(__pyx_t_14, 7+__pyx_t_32, __pyx_v_Discarded);
        __Pyx_INCREF(((PyObject *)__pyx_v_Cell_pop));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_Cell_pop));
        PyTuple_SET_ITEM(__pyx_t_14, 8+__pyx_t_32, ((PyObject *)__pyx_v_Cell_pop));
        __Pyx_INCREF(((PyObject *)__pyx_v_Dead));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_Dead));
        PyTuple_SET_ITEM(__pyx_t_14, 9+__pyx_t_32, ((PyObject *)__pyx_v_Dead));
        __Pyx_INCREF(((PyObject *)__pyx_v_GSC));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_GSC));
        PyTuple_SET_ITEM(__pyx_t_14, 10+__pyx_t_32, ((PyObject *)__pyx_v_GSC));
        __Pyx_INCREF(((PyObject *)__pyx_v_GPP));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_GPP));
        PyTuple_SET_ITEM(__pyx_t_14, 11+__pyx_t_32, ((PyObject *)__pyx_v_GPP));
        __Pyx_INCREF(((PyObject *)__pyx_v_GDS));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_GDS));
        PyTuple_SET_ITEM(__pyx_t_14, 12+__pyx_t_32, ((PyObject *)__pyx_v_GDS));
        __Pyx_GIVEREF(__pyx_t_16);
        PyTuple_SET_ITEM(__pyx_t_14, 13+__pyx_t_32, __pyx_t_16);
        __pyx_t_1 = 0;
        __pyx_t_16 = 0;
        __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_t_14, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 539, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_17))) || (PyList_CheckExact(__pyx_t_17))) {
        PyObject* sequence = __pyx_t_17;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 15)) {
          if (size > 15) __Pyx_RaiseTooManyValuesError(15);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 539, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_23 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_14 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_16 = PyTuple_GET_ITEM(sequence, 2); 
          __pyx_t_1 = PyTuple_GET_ITEM(sequence, 3); 
          __pyx_t_15 = PyTuple_GET_ITEM(sequence, 4); 
          __pyx_t_13 = PyTuple_GET_ITEM(sequence, 5); 
          __pyx_t_12 = PyTuple_GET_ITEM(sequence, 6); 
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 7); 
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 8); 
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 9); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 10); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 11); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 12); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 13); 
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 14); 
        } else {
          __pyx_t_23 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_14 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_16 = PyList_GET_ITEM(sequence, 2); 
          __pyx_t_1 = PyList_GET_ITEM(sequence, 3); 
          __pyx_t_15 = PyList_GET_ITEM(sequence, 4); 
          __pyx_t_13 = PyList_GET_ITEM(sequence, 5); 
          __pyx_t_12 = PyList_GET_ITEM(sequence, 6); 
          __pyx_t_11 = PyList_GET_ITEM(sequence, 7); 
          __pyx_t_10 = PyList_GET_ITEM(sequence, 8); 
          __pyx_t_9 = PyList_GET_ITEM(sequence, 9); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 10); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 11); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 12); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 13); 
          __pyx_t_3 = PyList_GET_ITEM(sequence, 14); 
        }
        __Pyx_INCREF(__pyx_t_23);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        #else
        {
          Py_ssize_t i;
          PyObject** temps[15] = {&__pyx_t_23,&__pyx_t_14,&__pyx_t_16,&__pyx_t_1,&__pyx_t_15,&__pyx_t_13,&__pyx_t_12,&__pyx_t_11,&__pyx_t_10,&__pyx_t_9,&__pyx_t_8,&__pyx_t_7,&__pyx_t_6,&__pyx_t_5,&__pyx_t_3};
          for (i=0; i < 15; i++) {
            PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 539, __pyx_L1_error)
            __Pyx_GOTREF(item);
            *(temps[i]) = item;
          }
        }
        #endif
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      } else {
        Py_ssize_t index = -1;
        PyObject** temps[15] = {&__pyx_t_23,&__pyx_t_14,&__pyx_t_16,&__pyx_t_1,&__pyx_t_15,&__pyx_t_13,&__pyx_t_12,&__pyx_t_11,&__pyx_t_10,&__pyx_t_9,&__pyx_t_8,&__pyx_t_7,&__pyx_t_6,&__pyx_t_5,&__pyx_t_3};
        __pyx_t_2 = PyObject_GetIter(__pyx_t_17); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 539, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_25 = Py_TYPE(__pyx_t_2)->tp_iternext;
        for (index=0; index < 15; index++) {
          PyObject* item = __pyx_t_25(__pyx_t_2); if (unlikely(!item)) goto __pyx_L17_unpacking_failed;
          __Pyx_GOTREF(item);
          *(temps[index]) = item;
        }
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_25(__pyx_t_2), 15) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
        __pyx_t_25 = NULL;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        goto __pyx_L18_unpacking_done;
        __pyx_L17_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_25 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 539, __pyx_L1_error)
        __pyx_L18_unpacking_done:;
      }
      if (!(likely(PyList_CheckExact(__pyx_t_23))||((__pyx_t_23) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_23)->tp_name), 0))) __PYX_ERR(0, 539, __pyx_L1_error)
      if (!(likely(PyList_CheckExact(__pyx_t_14))||((__pyx_t_14) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_14)->tp_name), 0))) __PYX_ERR(0, 539, __pyx_L1_error)
      if (!(likely(((__pyx_t_16) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_16, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 539, __pyx_L1_error)
      if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 539, __pyx_L1_error)
      if (!(likely(((__pyx_t_15) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_15, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 539, __pyx_L1_error)
      if (!(likely(((__pyx_t_13) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_13, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 539, __pyx_L1_error)
      __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_12); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 539, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 539, __pyx_L1_error)
      if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 539, __pyx_L1_error)
      if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 539, __pyx_L1_error)
      if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 539, __pyx_L1_error)
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 539, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_Xs_r, ((PyObject*)__pyx_t_23));
      __pyx_t_23 = 0;
      __Pyx_XDECREF_SET(__pyx_v_Ys_r, ((PyObject*)__pyx_t_14));
      __pyx_t_14 = 0;
      __Pyx_DECREF_SET(__pyx_v_points, ((PyArrayObject *)__pyx_t_16));
      __pyx_t_16 = 0;
      __Pyx_DECREF_SET(__pyx_v_Alive, ((PyArrayObject *)__pyx_t_1));
      __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_Rim, ((PyArrayObject *)__pyx_t_15));
      __pyx_t_15 = 0;
      __Pyx_DECREF_SET(__pyx_v_index, ((PyArrayObject *)__pyx_t_13));
      __pyx_t_13 = 0;
      __pyx_v_gsize = __pyx_t_32;
      __Pyx_XDECREF_SET(__pyx_v_tri, __pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_XDECREF_SET(__pyx_v_indptr, __pyx_t_10);
      __pyx_t_10 = 0;
      __Pyx_XDECREF_SET(__pyx_v_indices, __pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_DECREF_SET(__pyx_v_Dead, ((PyArrayObject *)__pyx_t_8));
      __pyx_t_8 = 0;
      __Pyx_DECREF_SET(__pyx_v_Cell_pop, ((PyArrayObject *)__pyx_t_7));
      __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_GSC, ((PyArrayObject *)__pyx_t_6));
      __pyx_t_6 = 0;
      __Pyx_DECREF_SET(__pyx_v_GPP, ((PyArrayObject *)__pyx_t_5));
      __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_GDS, ((PyArrayObject *)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "GBM.pyx":538
 *         asize = len(Alive[Alive==1])
 * 
 *         if asize > 0:             # <<<<<<<<<<<<<<
 *             Xs_r, Ys_r, points, Alive, Rim, index, gsize, tri, indptr, indices, Dead, Cell_pop, GSC, GPP, GDS = ext_grid(gsize, points, Alive, index, Rim, tree, phs, Discarded, Cell_pop, Dead, GSC, GPP, GDS, trapped)
 * 
 */
    }

    /* "GBM.pyx":547
 *         # 2) Solve PDE for oxygen
 * 
 *         Ox_irr, oxygen = solve_oxygen(mesh, oxygen, voronoi_kdtree, pl, GSC, GPP, GDS, Blood_vessel, Dox, points, Xs_r, Ys_r, timeStepDuration, lambdaC)             # <<<<<<<<<<<<<<
 * 
 *         # 3) Evaluate propabilities at each mesh point
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_solve_oxygen); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_Dox); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(!__pyx_v_Xs_r)) { __Pyx_RaiseUnboundLocalError("Xs_r"); __PYX_ERR(0, 547, __pyx_L1_error) }
    if (unlikely(!__pyx_v_Ys_r)) { __Pyx_RaiseUnboundLocalError("Ys_r"); __PYX_ERR(0, 547, __pyx_L1_error) }
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_timeStepDuration); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_lambdaC); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    __pyx_t_32 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_32 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[15] = {__pyx_t_8, __pyx_v_mesh, __pyx_v_oxygen, __pyx_v_voronoi_kdtree, __pyx_v_pl, ((PyObject *)__pyx_v_GSC), ((PyObject *)__pyx_v_GPP), ((PyObject *)__pyx_v_GDS), __pyx_v_Blood_vessel, __pyx_t_5, ((PyObject *)__pyx_v_points), __pyx_v_Xs_r, __pyx_v_Ys_r, __pyx_t_6, __pyx_t_7};
      __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_32, 14+__pyx_t_32); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 547, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[15] = {__pyx_t_8, __pyx_v_mesh, __pyx_v_oxygen, __pyx_v_voronoi_kdtree, __pyx_v_pl, ((PyObject *)__pyx_v_GSC), ((PyObject *)__pyx_v_GPP), ((PyObject *)__pyx_v_GDS), __pyx_v_Blood_vessel, __pyx_t_5, ((PyObject *)__pyx_v_points), __pyx_v_Xs_r, __pyx_v_Ys_r, __pyx_t_6, __pyx_t_7};
      __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_32, 14+__pyx_t_32); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 547, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(14+__pyx_t_32); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(__pyx_v_mesh);
      __Pyx_GIVEREF(__pyx_v_mesh);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_32, __pyx_v_mesh);
      __Pyx_INCREF(__pyx_v_oxygen);
      __Pyx_GIVEREF(__pyx_v_oxygen);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_32, __pyx_v_oxygen);
      __Pyx_INCREF(__pyx_v_voronoi_kdtree);
      __Pyx_GIVEREF(__pyx_v_voronoi_kdtree);
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_32, __pyx_v_voronoi_kdtree);
      __Pyx_INCREF(__pyx_v_pl);
      __Pyx_GIVEREF(__pyx_v_pl);
      PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_32, __pyx_v_pl);
      __Pyx_INCREF(((PyObject *)__pyx_v_GSC));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_GSC));
      PyTuple_SET_ITEM(__pyx_t_9, 4+__pyx_t_32, ((PyObject *)__pyx_v_GSC));
      __Pyx_INCREF(((PyObject *)__pyx_v_GPP));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_GPP));
      PyTuple_SET_ITEM(__pyx_t_9, 5+__pyx_t_32, ((PyObject *)__pyx_v_GPP));
      __Pyx_INCREF(((PyObject *)__pyx_v_GDS));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_GDS));
      PyTuple_SET_ITEM(__pyx_t_9, 6+__pyx_t_32, ((PyObject *)__pyx_v_GDS));
      __Pyx_INCREF(__pyx_v_Blood_vessel);
      __Pyx_GIVEREF(__pyx_v_Blood_vessel);
      PyTuple_SET_ITEM(__pyx_t_9, 7+__pyx_t_32, __pyx_v_Blood_vessel);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 8+__pyx_t_32, __pyx_t_5);
      __Pyx_INCREF(((PyObject *)__pyx_v_points));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
      PyTuple_SET_ITEM(__pyx_t_9, 9+__pyx_t_32, ((PyObject *)__pyx_v_points));
      __Pyx_INCREF(__pyx_v_Xs_r);
      __Pyx_GIVEREF(__pyx_v_Xs_r);
      PyTuple_SET_ITEM(__pyx_t_9, 10+__pyx_t_32, __pyx_v_Xs_r);
      __Pyx_INCREF(__pyx_v_Ys_r);
      __Pyx_GIVEREF(__pyx_v_Ys_r);
      PyTuple_SET_ITEM(__pyx_t_9, 11+__pyx_t_32, __pyx_v_Ys_r);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_9, 12+__pyx_t_32, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_9, 13+__pyx_t_32, __pyx_t_7);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_7 = 0;
      __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_17))) || (PyList_CheckExact(__pyx_t_17))) {
      PyObject* sequence = __pyx_t_17;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 547, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_9);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_17); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_25 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_25(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L19_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_9 = __pyx_t_25(__pyx_t_7); if (unlikely(!__pyx_t_9)) goto __pyx_L19_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_25(__pyx_t_7), 2) < 0) __PYX_ERR(0, 547, __pyx_L1_error)
      __pyx_t_25 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L20_unpacking_done;
      __pyx_L19_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_25 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 547, __pyx_L1_error)
      __pyx_L20_unpacking_done:;
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_Ox_irr, ((PyArrayObject *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_oxygen, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "GBM.pyx":551
 *         # 3) Evaluate propabilities at each mesh point
 * 
 *         Pmove, PDiv, PDeath = stocev(Ox_irr, O2_crit, Pdie, Pprol, Pdivi)             # <<<<<<<<<<<<<<
 * 
 * #        print("Oxygen: %s seconds" % (time.time() - t1))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_stocev); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_O2_crit); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_Pdie); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_Pprol); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_Pdivi); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = NULL;
    __pyx_t_32 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_32 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[6] = {__pyx_t_8, ((PyObject *)__pyx_v_Ox_irr), __pyx_t_3, __pyx_t_7, __pyx_t_6, __pyx_t_5};
      __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_32, 5+__pyx_t_32); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 551, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[6] = {__pyx_t_8, ((PyObject *)__pyx_v_Ox_irr), __pyx_t_3, __pyx_t_7, __pyx_t_6, __pyx_t_5};
      __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_32, 5+__pyx_t_32); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 551, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(5+__pyx_t_32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 551, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_Ox_irr));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_Ox_irr));
      PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_32, ((PyObject *)__pyx_v_Ox_irr));
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_32, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_32, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 3+__pyx_t_32, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 4+__pyx_t_32, __pyx_t_5);
      __pyx_t_3 = 0;
      __pyx_t_7 = 0;
      __pyx_t_6 = 0;
      __pyx_t_5 = 0;
      __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_10, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 551, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_17))) || (PyList_CheckExact(__pyx_t_17))) {
      PyObject* sequence = __pyx_t_17;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 551, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 551, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 551, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_5 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 551, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_6 = PyObject_GetIter(__pyx_t_17); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 551, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_25 = Py_TYPE(__pyx_t_6)->tp_iternext;
      index = 0; __pyx_t_9 = __pyx_t_25(__pyx_t_6); if (unlikely(!__pyx_t_9)) goto __pyx_L21_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_10 = __pyx_t_25(__pyx_t_6); if (unlikely(!__pyx_t_10)) goto __pyx_L21_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_10);
      index = 2; __pyx_t_5 = __pyx_t_25(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L21_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_25(__pyx_t_6), 3) < 0) __PYX_ERR(0, 551, __pyx_L1_error)
      __pyx_t_25 = NULL;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L22_unpacking_done;
      __pyx_L21_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_25 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 551, __pyx_L1_error)
      __pyx_L22_unpacking_done:;
    }
    if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 551, __pyx_L1_error)
    if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 551, __pyx_L1_error)
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_Pmove, ((PyArrayObject *)__pyx_t_9));
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_PDiv, ((PyArrayObject *)__pyx_t_10));
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_PDeath, ((PyArrayObject *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "GBM.pyx":559
 *         # 4) Consider all single cells
 *         # Go through the cells in random order
 *         Proliferating = sorted(index[Alive==1], key=lambda k: random.random())             # <<<<<<<<<<<<<<
 * 
 *         for k in Proliferating:
 */
    __pyx_t_17 = PyObject_RichCompare(((PyObject *)__pyx_v_Alive), __pyx_int_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_17); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 559, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_index), __pyx_t_17); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_17 = PyTuple_New(1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_10 = __Pyx_CyFunction_New(&__pyx_mdef_3GBM_7run_ABM_lambda1, 0, __pyx_n_s_run_ABM_locals_lambda, NULL, __pyx_n_s_GBM, __pyx_d, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_key, __pyx_t_10) < 0) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_17, __pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(PyList_CheckExact(__pyx_t_10))||((__pyx_t_10) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_10)->tp_name), 0))) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_Proliferating, ((PyObject*)__pyx_t_10));
    __pyx_t_10 = 0;

    /* "GBM.pyx":561
 *         Proliferating = sorted(index[Alive==1], key=lambda k: random.random())
 * 
 *         for k in Proliferating:             # <<<<<<<<<<<<<<
 * 
 *             if GSC[k] == 1.: iden = 0
 */
    if (unlikely(__pyx_v_Proliferating == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 561, __pyx_L1_error)
    }
    __pyx_t_10 = __pyx_v_Proliferating; __Pyx_INCREF(__pyx_t_10); __pyx_t_31 = 0;
    for (;;) {
      if (__pyx_t_31 >= PyList_GET_SIZE(__pyx_t_10)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_31); __Pyx_INCREF(__pyx_t_5); __pyx_t_31++; if (unlikely(0 < 0)) __PYX_ERR(0, 561, __pyx_L1_error)
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_10, __pyx_t_31); __pyx_t_31++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 561, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 561, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_k = __pyx_t_32;

      /* "GBM.pyx":563
 *         for k in Proliferating:
 * 
 *             if GSC[k] == 1.: iden = 0             # <<<<<<<<<<<<<<
 *             if GPP[k] == 1.: iden = 1
 *             if GDS[k] == 1.: iden = 2
 */
      __pyx_t_5 = __Pyx_GetItemInt(((PyObject *)__pyx_v_GSC), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 563, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_17 = __Pyx_PyFloat_EqObjC(__pyx_t_5, __pyx_float_1_, 1., 0, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 563, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_28 = __Pyx_PyObject_IsTrue(__pyx_t_17); if (unlikely(__pyx_t_28 < 0)) __PYX_ERR(0, 563, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      if (__pyx_t_28) {
        __pyx_v_iden = 0;
      }

      /* "GBM.pyx":564
 * 
 *             if GSC[k] == 1.: iden = 0
 *             if GPP[k] == 1.: iden = 1             # <<<<<<<<<<<<<<
 *             if GDS[k] == 1.: iden = 2
 * 
 */
      __pyx_t_17 = __Pyx_GetItemInt(((PyObject *)__pyx_v_GPP), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 564, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_5 = __Pyx_PyFloat_EqObjC(__pyx_t_17, __pyx_float_1_, 1., 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 564, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_28 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_28 < 0)) __PYX_ERR(0, 564, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_28) {
        __pyx_v_iden = 1;
      }

      /* "GBM.pyx":565
 *             if GSC[k] == 1.: iden = 0
 *             if GPP[k] == 1.: iden = 1
 *             if GDS[k] == 1.: iden = 2             # <<<<<<<<<<<<<<
 * 
 *             # Apoptosis?
 */
      __pyx_t_5 = __Pyx_GetItemInt(((PyObject *)__pyx_v_GDS), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 565, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_17 = __Pyx_PyFloat_EqObjC(__pyx_t_5, __pyx_float_1_, 1., 0, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 565, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_28 = __Pyx_PyObject_IsTrue(__pyx_t_17); if (unlikely(__pyx_t_28 < 0)) __PYX_ERR(0, 565, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      if (__pyx_t_28) {
        __pyx_v_iden = 2;
      }

      /* "GBM.pyx":568
 * 
 *             # Apoptosis?
 *             Reaper = drand48()             # <<<<<<<<<<<<<<
 *             Pup = PDeath[iden, k]
 *             if Reaper <= Pup:
 */
      __pyx_v_Reaper = drand48();

      /* "GBM.pyx":569
 *             # Apoptosis?
 *             Reaper = drand48()
 *             Pup = PDeath[iden, k]             # <<<<<<<<<<<<<<
 *             if Reaper <= Pup:
 *                 Alive[k] = 0.
 */
      __pyx_t_17 = __Pyx_PyInt_From_int(__pyx_v_iden); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_k); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_17);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_17);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);
      __pyx_t_17 = 0;
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_PDeath), __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_33 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_33 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 569, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_Pup = __pyx_t_33;

      /* "GBM.pyx":570
 *             Reaper = drand48()
 *             Pup = PDeath[iden, k]
 *             if Reaper <= Pup:             # <<<<<<<<<<<<<<
 *                 Alive[k] = 0.
 *                 GSC[k] = 0.
 */
      __pyx_t_28 = ((__pyx_v_Reaper <= __pyx_v_Pup) != 0);
      if (__pyx_t_28) {

        /* "GBM.pyx":571
 *             Pup = PDeath[iden, k]
 *             if Reaper <= Pup:
 *                 Alive[k] = 0.             # <<<<<<<<<<<<<<
 *                 GSC[k] = 0.
 *                 GPP[k] = 0.
 */
        if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Alive), __pyx_v_k, __pyx_float_0_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 571, __pyx_L1_error)

        /* "GBM.pyx":572
 *             if Reaper <= Pup:
 *                 Alive[k] = 0.
 *                 GSC[k] = 0.             # <<<<<<<<<<<<<<
 *                 GPP[k] = 0.
 *                 GDS[k] = 0.
 */
        if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GSC), __pyx_v_k, __pyx_float_0_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 572, __pyx_L1_error)

        /* "GBM.pyx":573
 *                 Alive[k] = 0.
 *                 GSC[k] = 0.
 *                 GPP[k] = 0.             # <<<<<<<<<<<<<<
 *                 GDS[k] = 0.
 *                 Dead[k] += 1.
 */
        if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GPP), __pyx_v_k, __pyx_float_0_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 573, __pyx_L1_error)

        /* "GBM.pyx":574
 *                 GSC[k] = 0.
 *                 GPP[k] = 0.
 *                 GDS[k] = 0.             # <<<<<<<<<<<<<<
 *                 Dead[k] += 1.
 *                 Rim[k] = 2*trapped
 */
        if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GDS), __pyx_v_k, __pyx_float_0_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 574, __pyx_L1_error)

        /* "GBM.pyx":575
 *                 GPP[k] = 0.
 *                 GDS[k] = 0.
 *                 Dead[k] += 1.             # <<<<<<<<<<<<<<
 *                 Rim[k] = 2*trapped
 *             # Is the cell proliferative or trapped?
 */
        __pyx_t_32 = __pyx_v_k;
        __pyx_t_5 = __Pyx_GetItemInt(((PyObject *)__pyx_v_Dead), __pyx_t_32, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 575, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_9 = __Pyx_PyFloat_AddObjC(__pyx_t_5, __pyx_float_1_, 1., 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 575, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Dead), __pyx_t_32, __pyx_t_9, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 575, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "GBM.pyx":576
 *                 GDS[k] = 0.
 *                 Dead[k] += 1.
 *                 Rim[k] = 2*trapped             # <<<<<<<<<<<<<<
 *             # Is the cell proliferative or trapped?
 * 
 */
        __pyx_t_9 = PyFloat_FromDouble((2.0 * __pyx_v_trapped)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 576, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Rim), __pyx_v_k, __pyx_t_9, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 576, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "GBM.pyx":570
 *             Reaper = drand48()
 *             Pup = PDeath[iden, k]
 *             if Reaper <= Pup:             # <<<<<<<<<<<<<<
 *                 Alive[k] = 0.
 *                 GSC[k] = 0.
 */
        goto __pyx_L28;
      }

      /* "GBM.pyx":579
 *             # Is the cell proliferative or trapped?
 * 
 *             elif Rim[k] < trapped:             # <<<<<<<<<<<<<<
 * 
 *                 DIV = False
 */
      __pyx_t_9 = __Pyx_GetItemInt(((PyObject *)__pyx_v_Rim), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 579, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_trapped); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 579, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_17 = PyObject_RichCompare(__pyx_t_9, __pyx_t_5, Py_LT); __Pyx_XGOTREF(__pyx_t_17); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 579, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_28 = __Pyx_PyObject_IsTrue(__pyx_t_17); if (unlikely(__pyx_t_28 < 0)) __PYX_ERR(0, 579, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      if (__pyx_t_28) {

        /* "GBM.pyx":581
 *             elif Rim[k] < trapped:
 * 
 *                 DIV = False             # <<<<<<<<<<<<<<
 *                 neigh = indices[indptr[k]:indptr[k+1]]
 *                 neigh = neigh[Cell_pop[neigh] == 0]
 */
        __pyx_v_DIV = 0;

        /* "GBM.pyx":582
 * 
 *                 DIV = False
 *                 neigh = indices[indptr[k]:indptr[k+1]]             # <<<<<<<<<<<<<<
 *                 neigh = neigh[Cell_pop[neigh] == 0]
 * 
 */
        if (unlikely(!__pyx_v_indices)) { __Pyx_RaiseUnboundLocalError("indices"); __PYX_ERR(0, 582, __pyx_L1_error) }
        if (unlikely(!__pyx_v_indptr)) { __Pyx_RaiseUnboundLocalError("indptr"); __PYX_ERR(0, 582, __pyx_L1_error) }
        __pyx_t_17 = __Pyx_GetItemInt(__pyx_v_indptr, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 582, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        if (unlikely(!__pyx_v_indptr)) { __Pyx_RaiseUnboundLocalError("indptr"); __PYX_ERR(0, 582, __pyx_L1_error) }
        __pyx_t_34 = (__pyx_v_k + 1);
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_indptr, __pyx_t_34, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 582, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_9 = __Pyx_PyObject_GetSlice(__pyx_v_indices, 0, 0, &__pyx_t_17, &__pyx_t_5, NULL, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 582, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 582, __pyx_L1_error)
        __Pyx_XDECREF_SET(__pyx_v_neigh, ((PyArrayObject *)__pyx_t_9));
        __pyx_t_9 = 0;

        /* "GBM.pyx":583
 *                 DIV = False
 *                 neigh = indices[indptr[k]:indptr[k+1]]
 *                 neigh = neigh[Cell_pop[neigh] == 0]             # <<<<<<<<<<<<<<
 * 
 *                 # Division to empty neighbouring spot
 */
        __pyx_t_9 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Cell_pop), ((PyObject *)__pyx_v_neigh)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 583, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_t_9, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 583, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_neigh), __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 583, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 583, __pyx_L1_error)
        __Pyx_DECREF_SET(__pyx_v_neigh, ((PyArrayObject *)__pyx_t_9));
        __pyx_t_9 = 0;

        /* "GBM.pyx":586
 * 
 *                 # Division to empty neighbouring spot
 *                 if len(neigh) > 0:             # <<<<<<<<<<<<<<
 *                     divide = drand48()
 *                     Pup = PDiv[iden, k]
 */
        __pyx_t_35 = PyObject_Length(((PyObject *)__pyx_v_neigh)); if (unlikely(__pyx_t_35 == ((Py_ssize_t)-1))) __PYX_ERR(0, 586, __pyx_L1_error)
        __pyx_t_28 = ((__pyx_t_35 > 0) != 0);
        if (__pyx_t_28) {

          /* "GBM.pyx":587
 *                 # Division to empty neighbouring spot
 *                 if len(neigh) > 0:
 *                     divide = drand48()             # <<<<<<<<<<<<<<
 *                     Pup = PDiv[iden, k]
 *                     if divide <= Pup:
 */
          __pyx_v_divide = drand48();

          /* "GBM.pyx":588
 *                 if len(neigh) > 0:
 *                     divide = drand48()
 *                     Pup = PDiv[iden, k]             # <<<<<<<<<<<<<<
 *                     if divide <= Pup:
 *                         fdummy1 = len(neigh)
 */
          __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_iden); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 588, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_k); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 588, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 588, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_5);
          __pyx_t_9 = 0;
          __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_PDiv), __pyx_t_17); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 588, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_33 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_33 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 588, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_v_Pup = __pyx_t_33;

          /* "GBM.pyx":589
 *                     divide = drand48()
 *                     Pup = PDiv[iden, k]
 *                     if divide <= Pup:             # <<<<<<<<<<<<<<
 *                         fdummy1 = len(neigh)
 *                         daughter = int(fdummy1*drand48())
 */
          __pyx_t_28 = ((__pyx_v_divide <= __pyx_v_Pup) != 0);
          if (__pyx_t_28) {

            /* "GBM.pyx":590
 *                     Pup = PDiv[iden, k]
 *                     if divide <= Pup:
 *                         fdummy1 = len(neigh)             # <<<<<<<<<<<<<<
 *                         daughter = int(fdummy1*drand48())
 *                         daughter = neigh[daughter]
 */
            __pyx_t_35 = PyObject_Length(((PyObject *)__pyx_v_neigh)); if (unlikely(__pyx_t_35 == ((Py_ssize_t)-1))) __PYX_ERR(0, 590, __pyx_L1_error)
            __pyx_v_fdummy1 = __pyx_t_35;

            /* "GBM.pyx":591
 *                     if divide <= Pup:
 *                         fdummy1 = len(neigh)
 *                         daughter = int(fdummy1*drand48())             # <<<<<<<<<<<<<<
 *                         daughter = neigh[daughter]
 *                         Alive[daughter] = 1.
 */
            __pyx_v_daughter = ((int)(__pyx_v_fdummy1 * drand48()));

            /* "GBM.pyx":592
 *                         fdummy1 = len(neigh)
 *                         daughter = int(fdummy1*drand48())
 *                         daughter = neigh[daughter]             # <<<<<<<<<<<<<<
 *                         Alive[daughter] = 1.
 *                         Cell_pop[daughter] = 1.
 */
            __pyx_t_5 = __Pyx_GetItemInt(((PyObject *)__pyx_v_neigh), __pyx_v_daughter, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 592, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 592, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_v_daughter = __pyx_t_32;

            /* "GBM.pyx":593
 *                         daughter = int(fdummy1*drand48())
 *                         daughter = neigh[daughter]
 *                         Alive[daughter] = 1.             # <<<<<<<<<<<<<<
 *                         Cell_pop[daughter] = 1.
 *                         GSC, GPP, GDS = hierarchy(iden, daughter, GSC, GPP, GDS, epsilon)
 */
            if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Alive), __pyx_v_daughter, __pyx_float_1_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 593, __pyx_L1_error)

            /* "GBM.pyx":594
 *                         daughter = neigh[daughter]
 *                         Alive[daughter] = 1.
 *                         Cell_pop[daughter] = 1.             # <<<<<<<<<<<<<<
 *                         GSC, GPP, GDS = hierarchy(iden, daughter, GSC, GPP, GDS, epsilon)
 *                         DIV = True # If you divided you don't move
 */
            if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Cell_pop), __pyx_v_daughter, __pyx_float_1_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 594, __pyx_L1_error)

            /* "GBM.pyx":595
 *                         Alive[daughter] = 1.
 *                         Cell_pop[daughter] = 1.
 *                         GSC, GPP, GDS = hierarchy(iden, daughter, GSC, GPP, GDS, epsilon)             # <<<<<<<<<<<<<<
 *                         DIV = True # If you divided you don't move
 * 
 */
            __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_hierarchy); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 595, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_iden); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 595, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_daughter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 595, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_7 = PyFloat_FromDouble(__pyx_v_epsilon); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 595, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_3 = NULL;
            __pyx_t_32 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_17);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_17, function);
                __pyx_t_32 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_17)) {
              PyObject *__pyx_temp[7] = {__pyx_t_3, __pyx_t_9, __pyx_t_6, ((PyObject *)__pyx_v_GSC), ((PyObject *)__pyx_v_GPP), ((PyObject *)__pyx_v_GDS), __pyx_t_7};
              __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_32, 6+__pyx_t_32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 595, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
              PyObject *__pyx_temp[7] = {__pyx_t_3, __pyx_t_9, __pyx_t_6, ((PyObject *)__pyx_v_GSC), ((PyObject *)__pyx_v_GPP), ((PyObject *)__pyx_v_GDS), __pyx_t_7};
              __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_32, 6+__pyx_t_32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 595, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            } else
            #endif
            {
              __pyx_t_8 = PyTuple_New(6+__pyx_t_32); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 595, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              if (__pyx_t_3) {
                __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_9);
              PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_32, __pyx_t_9);
              __Pyx_GIVEREF(__pyx_t_6);
              PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_32, __pyx_t_6);
              __Pyx_INCREF(((PyObject *)__pyx_v_GSC));
              __Pyx_GIVEREF(((PyObject *)__pyx_v_GSC));
              PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_32, ((PyObject *)__pyx_v_GSC));
              __Pyx_INCREF(((PyObject *)__pyx_v_GPP));
              __Pyx_GIVEREF(((PyObject *)__pyx_v_GPP));
              PyTuple_SET_ITEM(__pyx_t_8, 3+__pyx_t_32, ((PyObject *)__pyx_v_GPP));
              __Pyx_INCREF(((PyObject *)__pyx_v_GDS));
              __Pyx_GIVEREF(((PyObject *)__pyx_v_GDS));
              PyTuple_SET_ITEM(__pyx_t_8, 4+__pyx_t_32, ((PyObject *)__pyx_v_GDS));
              __Pyx_GIVEREF(__pyx_t_7);
              PyTuple_SET_ITEM(__pyx_t_8, 5+__pyx_t_32, __pyx_t_7);
              __pyx_t_9 = 0;
              __pyx_t_6 = 0;
              __pyx_t_7 = 0;
              __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 595, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            }
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
              PyObject* sequence = __pyx_t_5;
              Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
              if (unlikely(size != 3)) {
                if (size > 3) __Pyx_RaiseTooManyValuesError(3);
                else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                __PYX_ERR(0, 595, __pyx_L1_error)
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              if (likely(PyTuple_CheckExact(sequence))) {
                __pyx_t_17 = PyTuple_GET_ITEM(sequence, 0); 
                __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
                __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
              } else {
                __pyx_t_17 = PyList_GET_ITEM(sequence, 0); 
                __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
                __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
              }
              __Pyx_INCREF(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_7);
              #else
              __pyx_t_17 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 595, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 595, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_7 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 595, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            } else {
              Py_ssize_t index = -1;
              __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 595, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __pyx_t_25 = Py_TYPE(__pyx_t_6)->tp_iternext;
              index = 0; __pyx_t_17 = __pyx_t_25(__pyx_t_6); if (unlikely(!__pyx_t_17)) goto __pyx_L31_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_17);
              index = 1; __pyx_t_8 = __pyx_t_25(__pyx_t_6); if (unlikely(!__pyx_t_8)) goto __pyx_L31_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_8);
              index = 2; __pyx_t_7 = __pyx_t_25(__pyx_t_6); if (unlikely(!__pyx_t_7)) goto __pyx_L31_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_7);
              if (__Pyx_IternextUnpackEndCheck(__pyx_t_25(__pyx_t_6), 3) < 0) __PYX_ERR(0, 595, __pyx_L1_error)
              __pyx_t_25 = NULL;
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              goto __pyx_L32_unpacking_done;
              __pyx_L31_unpacking_failed:;
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __pyx_t_25 = NULL;
              if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
              __PYX_ERR(0, 595, __pyx_L1_error)
              __pyx_L32_unpacking_done:;
            }
            if (!(likely(((__pyx_t_17) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_17, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 595, __pyx_L1_error)
            if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 595, __pyx_L1_error)
            if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 595, __pyx_L1_error)
            __Pyx_DECREF_SET(__pyx_v_GSC, ((PyArrayObject *)__pyx_t_17));
            __pyx_t_17 = 0;
            __Pyx_DECREF_SET(__pyx_v_GPP, ((PyArrayObject *)__pyx_t_8));
            __pyx_t_8 = 0;
            __Pyx_DECREF_SET(__pyx_v_GDS, ((PyArrayObject *)__pyx_t_7));
            __pyx_t_7 = 0;

            /* "GBM.pyx":596
 *                         Cell_pop[daughter] = 1.
 *                         GSC, GPP, GDS = hierarchy(iden, daughter, GSC, GPP, GDS, epsilon)
 *                         DIV = True # If you divided you don't move             # <<<<<<<<<<<<<<
 * 
 *                 # Otherwise, division is allowed, if the neighbours can be pushed aside
 */
            __pyx_v_DIV = 1;

            /* "GBM.pyx":589
 *                     divide = drand48()
 *                     Pup = PDiv[iden, k]
 *                     if divide <= Pup:             # <<<<<<<<<<<<<<
 *                         fdummy1 = len(neigh)
 *                         daughter = int(fdummy1*drand48())
 */
          }

          /* "GBM.pyx":586
 * 
 *                 # Division to empty neighbouring spot
 *                 if len(neigh) > 0:             # <<<<<<<<<<<<<<
 *                     divide = drand48()
 *                     Pup = PDiv[iden, k]
 */
          goto __pyx_L29;
        }

        /* "GBM.pyx":600
 *                 # Otherwise, division is allowed, if the neighbours can be pushed aside
 *                 else:
 *                     free = points[Cell_pop==0]             # <<<<<<<<<<<<<<
 *                     idummy1 = int(len(free)) # If there are no free spots at all, there is no need to continue here. Indeed, np.where would crash.
 *                     if idummy1 > 0:
 */
        /*else*/ {
          __pyx_t_5 = PyObject_RichCompare(((PyObject *)__pyx_v_Cell_pop), __pyx_int_0, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 600, __pyx_L1_error)
          __pyx_t_7 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_points), __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 600, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 600, __pyx_L1_error)
          __Pyx_XDECREF_SET(__pyx_v_free, ((PyArrayObject *)__pyx_t_7));
          __pyx_t_7 = 0;

          /* "GBM.pyx":601
 *                 else:
 *                     free = points[Cell_pop==0]
 *                     idummy1 = int(len(free)) # If there are no free spots at all, there is no need to continue here. Indeed, np.where would crash.             # <<<<<<<<<<<<<<
 *                     if idummy1 > 0:
 *                         kdtree = cKDTree(free)
 */
          __pyx_t_35 = PyObject_Length(((PyObject *)__pyx_v_free)); if (unlikely(__pyx_t_35 == ((Py_ssize_t)-1))) __PYX_ERR(0, 601, __pyx_L1_error)
          __pyx_v_idummy1 = ((int)__pyx_t_35);

          /* "GBM.pyx":602
 *                     free = points[Cell_pop==0]
 *                     idummy1 = int(len(free)) # If there are no free spots at all, there is no need to continue here. Indeed, np.where would crash.
 *                     if idummy1 > 0:             # <<<<<<<<<<<<<<
 *                         kdtree = cKDTree(free)
 *                         res = kdtree.query(points[k])
 */
          __pyx_t_28 = ((__pyx_v_idummy1 > 0) != 0);
          if (__pyx_t_28) {

            /* "GBM.pyx":603
 *                     idummy1 = int(len(free)) # If there are no free spots at all, there is no need to continue here. Indeed, np.where would crash.
 *                     if idummy1 > 0:
 *                         kdtree = cKDTree(free)             # <<<<<<<<<<<<<<
 *                         res = kdtree.query(points[k])
 *                         fdummy1 = res[0]
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_cKDTree); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 603, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_8 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_8)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_8);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
              }
            }
            __pyx_t_7 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_8, ((PyObject *)__pyx_v_free)) : __Pyx_PyObject_CallOneArg(__pyx_t_5, ((PyObject *)__pyx_v_free));
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 603, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF_SET(__pyx_v_kdtree, __pyx_t_7);
            __pyx_t_7 = 0;

            /* "GBM.pyx":604
 *                     if idummy1 > 0:
 *                         kdtree = cKDTree(free)
 *                         res = kdtree.query(points[k])             # <<<<<<<<<<<<<<
 *                         fdummy1 = res[0]
 *                         Rim[k] = fdummy1
 */
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_kdtree, __pyx_n_s_query); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 604, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_points), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 604, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_17 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_17)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_17);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
              }
            }
            __pyx_t_7 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_17, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_8);
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 604, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF_SET(__pyx_v_res, __pyx_t_7);
            __pyx_t_7 = 0;

            /* "GBM.pyx":605
 *                         kdtree = cKDTree(free)
 *                         res = kdtree.query(points[k])
 *                         fdummy1 = res[0]             # <<<<<<<<<<<<<<
 *                         Rim[k] = fdummy1
 *                         divide = drand48()
 */
            __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_res, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 605, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_33 = __pyx_PyFloat_AsFloat(__pyx_t_7); if (unlikely((__pyx_t_33 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 605, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_v_fdummy1 = __pyx_t_33;

            /* "GBM.pyx":606
 *                         res = kdtree.query(points[k])
 *                         fdummy1 = res[0]
 *                         Rim[k] = fdummy1             # <<<<<<<<<<<<<<
 *                         divide = drand48()
 *                         daughters = np.where(points == free[res[1]])
 */
            __pyx_t_7 = PyFloat_FromDouble(__pyx_v_fdummy1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 606, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Rim), __pyx_v_k, __pyx_t_7, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 606, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "GBM.pyx":607
 *                         fdummy1 = res[0]
 *                         Rim[k] = fdummy1
 *                         divide = drand48()             # <<<<<<<<<<<<<<
 *                         daughters = np.where(points == free[res[1]])
 *                         daughter  = daughters[0][0]
 */
            __pyx_v_divide = drand48();

            /* "GBM.pyx":608
 *                         Rim[k] = fdummy1
 *                         divide = drand48()
 *                         daughters = np.where(points == free[res[1]])             # <<<<<<<<<<<<<<
 *                         daughter  = daughters[0][0]
 *                         fdummy2 = PDiv[iden, k]
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 608, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_where); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 608, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_res, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 608, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_17 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_free), __pyx_t_5); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 608, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = PyObject_RichCompare(((PyObject *)__pyx_v_points), __pyx_t_17, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 608, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __pyx_t_17 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_17)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_17);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
              }
            }
            __pyx_t_7 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_17, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5);
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 608, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_XDECREF_SET(__pyx_v_daughters, __pyx_t_7);
            __pyx_t_7 = 0;

            /* "GBM.pyx":609
 *                         divide = drand48()
 *                         daughters = np.where(points == free[res[1]])
 *                         daughter  = daughters[0][0]             # <<<<<<<<<<<<<<
 *                         fdummy2 = PDiv[iden, k]
 *                         fdummy2 = fdummy2*c_exp(-fdummy1/trapped/2.)
 */
            __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_daughters, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 609, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 609, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 609, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_v_daughter = __pyx_t_32;

            /* "GBM.pyx":610
 *                         daughters = np.where(points == free[res[1]])
 *                         daughter  = daughters[0][0]
 *                         fdummy2 = PDiv[iden, k]             # <<<<<<<<<<<<<<
 *                         fdummy2 = fdummy2*c_exp(-fdummy1/trapped/2.)
 * 
 */
            __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_iden); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 610, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_k); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 610, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 610, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_8);
            PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_7);
            PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
            __pyx_t_8 = 0;
            __pyx_t_7 = 0;
            __pyx_t_7 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_PDiv), __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 610, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_33 = __pyx_PyFloat_AsFloat(__pyx_t_7); if (unlikely((__pyx_t_33 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 610, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_v_fdummy2 = __pyx_t_33;

            /* "GBM.pyx":611
 *                         daughter  = daughters[0][0]
 *                         fdummy2 = PDiv[iden, k]
 *                         fdummy2 = fdummy2*c_exp(-fdummy1/trapped/2.)             # <<<<<<<<<<<<<<
 * 
 *                         # Note: It gets harder to push the further we get from the rim, hence exponential damping
 */
            __pyx_t_33 = (-__pyx_v_fdummy1);
            if (unlikely(__pyx_v_trapped == 0)) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 611, __pyx_L1_error)
            }
            __pyx_v_fdummy2 = (__pyx_v_fdummy2 * exp(((((double)__pyx_t_33) / __pyx_v_trapped) / 2.)));

            /* "GBM.pyx":614
 * 
 *                         # Note: It gets harder to push the further we get from the rim, hence exponential damping
 *                         if fdummy1 < trapped and fdummy1 > 0. and divide <= fdummy2:             # <<<<<<<<<<<<<<
 *                             Alive[daughter] = 1.
 *                             Cell_pop[daughter] = 1.
 */
            __pyx_t_29 = ((__pyx_v_fdummy1 < __pyx_v_trapped) != 0);
            if (__pyx_t_29) {
            } else {
              __pyx_t_28 = __pyx_t_29;
              goto __pyx_L35_bool_binop_done;
            }
            __pyx_t_29 = ((__pyx_v_fdummy1 > 0.) != 0);
            if (__pyx_t_29) {
            } else {
              __pyx_t_28 = __pyx_t_29;
              goto __pyx_L35_bool_binop_done;
            }
            __pyx_t_29 = ((__pyx_v_divide <= __pyx_v_fdummy2) != 0);
            __pyx_t_28 = __pyx_t_29;
            __pyx_L35_bool_binop_done:;
            if (__pyx_t_28) {

              /* "GBM.pyx":615
 *                         # Note: It gets harder to push the further we get from the rim, hence exponential damping
 *                         if fdummy1 < trapped and fdummy1 > 0. and divide <= fdummy2:
 *                             Alive[daughter] = 1.             # <<<<<<<<<<<<<<
 *                             Cell_pop[daughter] = 1.
 *                             GSC, GPP, GDS = hierarchy(iden, daughter, GSC, GPP, GDS, epsilon)
 */
              if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Alive), __pyx_v_daughter, __pyx_float_1_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 615, __pyx_L1_error)

              /* "GBM.pyx":616
 *                         if fdummy1 < trapped and fdummy1 > 0. and divide <= fdummy2:
 *                             Alive[daughter] = 1.
 *                             Cell_pop[daughter] = 1.             # <<<<<<<<<<<<<<
 *                             GSC, GPP, GDS = hierarchy(iden, daughter, GSC, GPP, GDS, epsilon)
 *                             DIV = True
 */
              if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Cell_pop), __pyx_v_daughter, __pyx_float_1_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 616, __pyx_L1_error)

              /* "GBM.pyx":617
 *                             Alive[daughter] = 1.
 *                             Cell_pop[daughter] = 1.
 *                             GSC, GPP, GDS = hierarchy(iden, daughter, GSC, GPP, GDS, epsilon)             # <<<<<<<<<<<<<<
 *                             DIV = True
 * 
 */
              __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_hierarchy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 617, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_iden); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 617, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_17 = __Pyx_PyInt_From_int(__pyx_v_daughter); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 617, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_6 = PyFloat_FromDouble(__pyx_v_epsilon); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 617, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_9 = NULL;
              __pyx_t_32 = 0;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
                __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
                if (likely(__pyx_t_9)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                  __Pyx_INCREF(__pyx_t_9);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_5, function);
                  __pyx_t_32 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_5)) {
                PyObject *__pyx_temp[7] = {__pyx_t_9, __pyx_t_8, __pyx_t_17, ((PyObject *)__pyx_v_GSC), ((PyObject *)__pyx_v_GPP), ((PyObject *)__pyx_v_GDS), __pyx_t_6};
                __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_32, 6+__pyx_t_32); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 617, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
                __Pyx_GOTREF(__pyx_t_7);
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
                PyObject *__pyx_temp[7] = {__pyx_t_9, __pyx_t_8, __pyx_t_17, ((PyObject *)__pyx_v_GSC), ((PyObject *)__pyx_v_GPP), ((PyObject *)__pyx_v_GDS), __pyx_t_6};
                __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_32, 6+__pyx_t_32); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 617, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
                __Pyx_GOTREF(__pyx_t_7);
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              } else
              #endif
              {
                __pyx_t_3 = PyTuple_New(6+__pyx_t_32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 617, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_3);
                if (__pyx_t_9) {
                  __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_9); __pyx_t_9 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_8);
                PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_32, __pyx_t_8);
                __Pyx_GIVEREF(__pyx_t_17);
                PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_32, __pyx_t_17);
                __Pyx_INCREF(((PyObject *)__pyx_v_GSC));
                __Pyx_GIVEREF(((PyObject *)__pyx_v_GSC));
                PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_32, ((PyObject *)__pyx_v_GSC));
                __Pyx_INCREF(((PyObject *)__pyx_v_GPP));
                __Pyx_GIVEREF(((PyObject *)__pyx_v_GPP));
                PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_32, ((PyObject *)__pyx_v_GPP));
                __Pyx_INCREF(((PyObject *)__pyx_v_GDS));
                __Pyx_GIVEREF(((PyObject *)__pyx_v_GDS));
                PyTuple_SET_ITEM(__pyx_t_3, 4+__pyx_t_32, ((PyObject *)__pyx_v_GDS));
                __Pyx_GIVEREF(__pyx_t_6);
                PyTuple_SET_ITEM(__pyx_t_3, 5+__pyx_t_32, __pyx_t_6);
                __pyx_t_8 = 0;
                __pyx_t_17 = 0;
                __pyx_t_6 = 0;
                __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 617, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_7);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              }
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
                PyObject* sequence = __pyx_t_7;
                Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
                if (unlikely(size != 3)) {
                  if (size > 3) __Pyx_RaiseTooManyValuesError(3);
                  else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                  __PYX_ERR(0, 617, __pyx_L1_error)
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                if (likely(PyTuple_CheckExact(sequence))) {
                  __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
                  __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
                  __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
                } else {
                  __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
                  __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
                  __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
                }
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_6);
                #else
                __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 617, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_5);
                __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 617, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_6 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 617, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_6);
                #endif
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              } else {
                Py_ssize_t index = -1;
                __pyx_t_17 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 617, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_17);
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                __pyx_t_25 = Py_TYPE(__pyx_t_17)->tp_iternext;
                index = 0; __pyx_t_5 = __pyx_t_25(__pyx_t_17); if (unlikely(!__pyx_t_5)) goto __pyx_L38_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_5);
                index = 1; __pyx_t_3 = __pyx_t_25(__pyx_t_17); if (unlikely(!__pyx_t_3)) goto __pyx_L38_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_3);
                index = 2; __pyx_t_6 = __pyx_t_25(__pyx_t_17); if (unlikely(!__pyx_t_6)) goto __pyx_L38_unpacking_failed;
                __Pyx_GOTREF(__pyx_t_6);
                if (__Pyx_IternextUnpackEndCheck(__pyx_t_25(__pyx_t_17), 3) < 0) __PYX_ERR(0, 617, __pyx_L1_error)
                __pyx_t_25 = NULL;
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                goto __pyx_L39_unpacking_done;
                __pyx_L38_unpacking_failed:;
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                __pyx_t_25 = NULL;
                if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                __PYX_ERR(0, 617, __pyx_L1_error)
                __pyx_L39_unpacking_done:;
              }
              if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 617, __pyx_L1_error)
              if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 617, __pyx_L1_error)
              if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 617, __pyx_L1_error)
              __Pyx_DECREF_SET(__pyx_v_GSC, ((PyArrayObject *)__pyx_t_5));
              __pyx_t_5 = 0;
              __Pyx_DECREF_SET(__pyx_v_GPP, ((PyArrayObject *)__pyx_t_3));
              __pyx_t_3 = 0;
              __Pyx_DECREF_SET(__pyx_v_GDS, ((PyArrayObject *)__pyx_t_6));
              __pyx_t_6 = 0;

              /* "GBM.pyx":618
 *                             Cell_pop[daughter] = 1.
 *                             GSC, GPP, GDS = hierarchy(iden, daughter, GSC, GPP, GDS, epsilon)
 *                             DIV = True             # <<<<<<<<<<<<<<
 * 
 *                 # Movement only if no division and free spot next to cell
 */
              __pyx_v_DIV = 1;

              /* "GBM.pyx":614
 * 
 *                         # Note: It gets harder to push the further we get from the rim, hence exponential damping
 *                         if fdummy1 < trapped and fdummy1 > 0. and divide <= fdummy2:             # <<<<<<<<<<<<<<
 *                             Alive[daughter] = 1.
 *                             Cell_pop[daughter] = 1.
 */
            }

            /* "GBM.pyx":602
 *                     free = points[Cell_pop==0]
 *                     idummy1 = int(len(free)) # If there are no free spots at all, there is no need to continue here. Indeed, np.where would crash.
 *                     if idummy1 > 0:             # <<<<<<<<<<<<<<
 *                         kdtree = cKDTree(free)
 *                         res = kdtree.query(points[k])
 */
          }
        }
        __pyx_L29:;

        /* "GBM.pyx":621
 * 
 *                 # Movement only if no division and free spot next to cell
 *                 if DIV == False and len(neigh) > 0:             # <<<<<<<<<<<<<<
 *                     move = drand48()
 *                     Pup = Pmove[iden,k]
 */
        __pyx_t_29 = ((__pyx_v_DIV == 0) != 0);
        if (__pyx_t_29) {
        } else {
          __pyx_t_28 = __pyx_t_29;
          goto __pyx_L41_bool_binop_done;
        }
        __pyx_t_35 = PyObject_Length(((PyObject *)__pyx_v_neigh)); if (unlikely(__pyx_t_35 == ((Py_ssize_t)-1))) __PYX_ERR(0, 621, __pyx_L1_error)
        __pyx_t_29 = ((__pyx_t_35 > 0) != 0);
        __pyx_t_28 = __pyx_t_29;
        __pyx_L41_bool_binop_done:;
        if (__pyx_t_28) {

          /* "GBM.pyx":622
 *                 # Movement only if no division and free spot next to cell
 *                 if DIV == False and len(neigh) > 0:
 *                     move = drand48()             # <<<<<<<<<<<<<<
 *                     Pup = Pmove[iden,k]
 *                     if move <= Pup:
 */
          __pyx_v_move = drand48();

          /* "GBM.pyx":623
 *                 if DIV == False and len(neigh) > 0:
 *                     move = drand48()
 *                     Pup = Pmove[iden,k]             # <<<<<<<<<<<<<<
 *                     if move <= Pup:
 *                         # Move away from point
 */
          __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_iden); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 623, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_k); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 623, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 623, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
          __pyx_t_7 = 0;
          __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Pmove), __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 623, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_33 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_33 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 623, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_v_Pup = __pyx_t_33;

          /* "GBM.pyx":624
 *                     move = drand48()
 *                     Pup = Pmove[iden,k]
 *                     if move <= Pup:             # <<<<<<<<<<<<<<
 *                         # Move away from point
 *                         Alive[k] = 0.
 */
          __pyx_t_28 = ((__pyx_v_move <= __pyx_v_Pup) != 0);
          if (__pyx_t_28) {

            /* "GBM.pyx":626
 *                     if move <= Pup:
 *                         # Move away from point
 *                         Alive[k] = 0.             # <<<<<<<<<<<<<<
 *                         Cell_pop[k] = 0.
 *                         if iden == 0: GSC[k] = 0.
 */
            if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Alive), __pyx_v_k, __pyx_float_0_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 626, __pyx_L1_error)

            /* "GBM.pyx":627
 *                         # Move away from point
 *                         Alive[k] = 0.
 *                         Cell_pop[k] = 0.             # <<<<<<<<<<<<<<
 *                         if iden == 0: GSC[k] = 0.
 *                         if iden == 1: GPP[k] = 0.
 */
            if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Cell_pop), __pyx_v_k, __pyx_float_0_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 627, __pyx_L1_error)

            /* "GBM.pyx":628
 *                         Alive[k] = 0.
 *                         Cell_pop[k] = 0.
 *                         if iden == 0: GSC[k] = 0.             # <<<<<<<<<<<<<<
 *                         if iden == 1: GPP[k] = 0.
 *                         if iden == 2: GDS[k] = 0.
 */
            __pyx_t_28 = ((__pyx_v_iden == 0) != 0);
            if (__pyx_t_28) {
              if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GSC), __pyx_v_k, __pyx_float_0_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 628, __pyx_L1_error)
            }

            /* "GBM.pyx":629
 *                         Cell_pop[k] = 0.
 *                         if iden == 0: GSC[k] = 0.
 *                         if iden == 1: GPP[k] = 0.             # <<<<<<<<<<<<<<
 *                         if iden == 2: GDS[k] = 0.
 *                         # To random free neighbour
 */
            __pyx_t_28 = ((__pyx_v_iden == 1) != 0);
            if (__pyx_t_28) {
              if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GPP), __pyx_v_k, __pyx_float_0_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 629, __pyx_L1_error)
            }

            /* "GBM.pyx":630
 *                         if iden == 0: GSC[k] = 0.
 *                         if iden == 1: GPP[k] = 0.
 *                         if iden == 2: GDS[k] = 0.             # <<<<<<<<<<<<<<
 *                         # To random free neighbour
 * #                        new = random.choice(neigh)
 */
            __pyx_t_28 = ((__pyx_v_iden == 2) != 0);
            if (__pyx_t_28) {
              if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GDS), __pyx_v_k, __pyx_float_0_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 630, __pyx_L1_error)
            }

            /* "GBM.pyx":633
 *                         # To random free neighbour
 * #                        new = random.choice(neigh)
 *                         fdummy1 = len(neigh)             # <<<<<<<<<<<<<<
 *                         new = int(fdummy1*drand48())
 *                         new = neigh[new]
 */
            __pyx_t_35 = PyObject_Length(((PyObject *)__pyx_v_neigh)); if (unlikely(__pyx_t_35 == ((Py_ssize_t)-1))) __PYX_ERR(0, 633, __pyx_L1_error)
            __pyx_v_fdummy1 = __pyx_t_35;

            /* "GBM.pyx":634
 * #                        new = random.choice(neigh)
 *                         fdummy1 = len(neigh)
 *                         new = int(fdummy1*drand48())             # <<<<<<<<<<<<<<
 *                         new = neigh[new]
 *                         Alive[new] = 1.
 */
            __pyx_v_new = ((int)(__pyx_v_fdummy1 * drand48()));

            /* "GBM.pyx":635
 *                         fdummy1 = len(neigh)
 *                         new = int(fdummy1*drand48())
 *                         new = neigh[new]             # <<<<<<<<<<<<<<
 *                         Alive[new] = 1.
 *                         Cell_pop[new] = 1.
 */
            __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_neigh), __pyx_v_new, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 635, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 635, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_v_new = __pyx_t_32;

            /* "GBM.pyx":636
 *                         new = int(fdummy1*drand48())
 *                         new = neigh[new]
 *                         Alive[new] = 1.             # <<<<<<<<<<<<<<
 *                         Cell_pop[new] = 1.
 *                         if iden == 0: GSC[new] = 1.
 */
            if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Alive), __pyx_v_new, __pyx_float_1_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 636, __pyx_L1_error)

            /* "GBM.pyx":637
 *                         new = neigh[new]
 *                         Alive[new] = 1.
 *                         Cell_pop[new] = 1.             # <<<<<<<<<<<<<<
 *                         if iden == 0: GSC[new] = 1.
 *                         if iden == 1: GPP[new] = 1.
 */
            if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Cell_pop), __pyx_v_new, __pyx_float_1_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 637, __pyx_L1_error)

            /* "GBM.pyx":638
 *                         Alive[new] = 1.
 *                         Cell_pop[new] = 1.
 *                         if iden == 0: GSC[new] = 1.             # <<<<<<<<<<<<<<
 *                         if iden == 1: GPP[new] = 1.
 *                         if iden == 2: GDS[new] = 1.
 */
            __pyx_t_28 = ((__pyx_v_iden == 0) != 0);
            if (__pyx_t_28) {
              if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GSC), __pyx_v_new, __pyx_float_1_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 638, __pyx_L1_error)
            }

            /* "GBM.pyx":639
 *                         Cell_pop[new] = 1.
 *                         if iden == 0: GSC[new] = 1.
 *                         if iden == 1: GPP[new] = 1.             # <<<<<<<<<<<<<<
 *                         if iden == 2: GDS[new] = 1.
 * 
 */
            __pyx_t_28 = ((__pyx_v_iden == 1) != 0);
            if (__pyx_t_28) {
              if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GPP), __pyx_v_new, __pyx_float_1_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 639, __pyx_L1_error)
            }

            /* "GBM.pyx":640
 *                         if iden == 0: GSC[new] = 1.
 *                         if iden == 1: GPP[new] = 1.
 *                         if iden == 2: GDS[new] = 1.             # <<<<<<<<<<<<<<
 * 
 * #        print("Single cell: %s seconds " % (time.time() - t1))
 */
            __pyx_t_28 = ((__pyx_v_iden == 2) != 0);
            if (__pyx_t_28) {
              if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GDS), __pyx_v_new, __pyx_float_1_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 640, __pyx_L1_error)
            }

            /* "GBM.pyx":624
 *                     move = drand48()
 *                     Pup = Pmove[iden,k]
 *                     if move <= Pup:             # <<<<<<<<<<<<<<
 *                         # Move away from point
 *                         Alive[k] = 0.
 */
          }

          /* "GBM.pyx":621
 * 
 *                 # Movement only if no division and free spot next to cell
 *                 if DIV == False and len(neigh) > 0:             # <<<<<<<<<<<<<<
 *                     move = drand48()
 *                     Pup = Pmove[iden,k]
 */
        }

        /* "GBM.pyx":579
 *             # Is the cell proliferative or trapped?
 * 
 *             elif Rim[k] < trapped:             # <<<<<<<<<<<<<<
 * 
 *                 DIV = False
 */
      }
      __pyx_L28:;

      /* "GBM.pyx":561
 *         Proliferating = sorted(index[Alive==1], key=lambda k: random.random())
 * 
 *         for k in Proliferating:             # <<<<<<<<<<<<<<
 * 
 *             if GSC[k] == 1.: iden = 0
 */
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "GBM.pyx":647
 * 
 *         # 5) Consider all clusters with cells that are alive.
 *         Quiescent = sorted(index[Alive>1], key=lambda k: random.random())             # <<<<<<<<<<<<<<
 * 
 *         for k in Quiescent:
 */
    __pyx_t_10 = PyObject_RichCompare(((PyObject *)__pyx_v_Alive), __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 647, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_index), __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_3GBM_7run_ABM_1lambda2, 0, __pyx_n_s_run_ABM_locals_lambda, NULL, __pyx_n_s_GBM, __pyx_d, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_key, __pyx_t_3) < 0) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_10, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyList_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_Quiescent, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "GBM.pyx":649
 *         Quiescent = sorted(index[Alive>1], key=lambda k: random.random())
 * 
 *         for k in Quiescent:             # <<<<<<<<<<<<<<
 *             # Do the cells die of oxygen shortage?
 *             if all(PDeath[:,k] >= 1.):
 */
    if (unlikely(__pyx_v_Quiescent == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 649, __pyx_L1_error)
    }
    __pyx_t_3 = __pyx_v_Quiescent; __Pyx_INCREF(__pyx_t_3); __pyx_t_31 = 0;
    for (;;) {
      if (__pyx_t_31 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_31); __Pyx_INCREF(__pyx_t_6); __pyx_t_31++; if (unlikely(0 < 0)) __PYX_ERR(0, 649, __pyx_L1_error)
      #else
      __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_31); __pyx_t_31++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 649, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 649, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_k = __pyx_t_32;

      /* "GBM.pyx":651
 *         for k in Quiescent:
 *             # Do the cells die of oxygen shortage?
 *             if all(PDeath[:,k] >= 1.):             # <<<<<<<<<<<<<<
 *                 Dead[k] += Alive[k]
 *                 Alive[k] = 0.
 */
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_k); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 651, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 651, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_slice_);
      __Pyx_GIVEREF(__pyx_slice_);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_slice_);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_PDeath), __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 651, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyObject_RichCompare(__pyx_t_6, __pyx_float_1_, Py_GE); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 651, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_all, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 651, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_28 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_28 < 0)) __PYX_ERR(0, 651, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_28) {

        /* "GBM.pyx":652
 *             # Do the cells die of oxygen shortage?
 *             if all(PDeath[:,k] >= 1.):
 *                 Dead[k] += Alive[k]             # <<<<<<<<<<<<<<
 *                 Alive[k] = 0.
 *                 GSC[k] = 0.
 */
        __pyx_t_32 = __pyx_v_k;
        __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_Dead), __pyx_t_32, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 652, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_10 = __Pyx_GetItemInt(((PyObject *)__pyx_v_Alive), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 652, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_7 = PyNumber_InPlaceAdd(__pyx_t_6, __pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 652, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Dead), __pyx_t_32, __pyx_t_7, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 652, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "GBM.pyx":653
 *             if all(PDeath[:,k] >= 1.):
 *                 Dead[k] += Alive[k]
 *                 Alive[k] = 0.             # <<<<<<<<<<<<<<
 *                 GSC[k] = 0.
 *                 GPP[k] = 0.
 */
        if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Alive), __pyx_v_k, __pyx_float_0_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 653, __pyx_L1_error)

        /* "GBM.pyx":654
 *                 Dead[k] += Alive[k]
 *                 Alive[k] = 0.
 *                 GSC[k] = 0.             # <<<<<<<<<<<<<<
 *                 GPP[k] = 0.
 *                 GDS[k] = 0.
 */
        if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GSC), __pyx_v_k, __pyx_float_0_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 654, __pyx_L1_error)

        /* "GBM.pyx":655
 *                 Alive[k] = 0.
 *                 GSC[k] = 0.
 *                 GPP[k] = 0.             # <<<<<<<<<<<<<<
 *                 GDS[k] = 0.
 *             else:
 */
        if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GPP), __pyx_v_k, __pyx_float_0_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 655, __pyx_L1_error)

        /* "GBM.pyx":656
 *                 GSC[k] = 0.
 *                 GPP[k] = 0.
 *                 GDS[k] = 0.             # <<<<<<<<<<<<<<
 *             else:
 *                 upper = int(GSC[k])
 */
        if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GDS), __pyx_v_k, __pyx_float_0_, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 656, __pyx_L1_error)

        /* "GBM.pyx":651
 *         for k in Quiescent:
 *             # Do the cells die of oxygen shortage?
 *             if all(PDeath[:,k] >= 1.):             # <<<<<<<<<<<<<<
 *                 Dead[k] += Alive[k]
 *                 Alive[k] = 0.
 */
        goto __pyx_L52;
      }

      /* "GBM.pyx":658
 *                 GDS[k] = 0.
 *             else:
 *                 upper = int(GSC[k])             # <<<<<<<<<<<<<<
 *                 for Cell in range(upper):
 *                     Reaper = drand48()
 */
      /*else*/ {
        __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_GSC), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_10 = __Pyx_PyNumber_Int(__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_10); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_v_upper = __pyx_t_32;

        /* "GBM.pyx":659
 *             else:
 *                 upper = int(GSC[k])
 *                 for Cell in range(upper):             # <<<<<<<<<<<<<<
 *                     Reaper = drand48()
 *                     Pup = PDeath[0, k]
 */
        __pyx_t_32 = __pyx_v_upper;
        __pyx_t_36 = __pyx_t_32;
        for (__pyx_t_37 = 0; __pyx_t_37 < __pyx_t_36; __pyx_t_37+=1) {
          __pyx_v_Cell = __pyx_t_37;

          /* "GBM.pyx":660
 *                 upper = int(GSC[k])
 *                 for Cell in range(upper):
 *                     Reaper = drand48()             # <<<<<<<<<<<<<<
 *                     Pup = PDeath[0, k]
 *                     if Reaper <= Pup:
 */
          __pyx_v_Reaper = drand48();

          /* "GBM.pyx":661
 *                 for Cell in range(upper):
 *                     Reaper = drand48()
 *                     Pup = PDeath[0, k]             # <<<<<<<<<<<<<<
 *                     if Reaper <= Pup:
 *                         Alive[k] -= 1.
 */
          __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_k); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 661, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 661, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_INCREF(__pyx_int_0);
          __Pyx_GIVEREF(__pyx_int_0);
          PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_int_0);
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_10);
          __pyx_t_10 = 0;
          __pyx_t_10 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_PDeath), __pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 661, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_33 = __pyx_PyFloat_AsFloat(__pyx_t_10); if (unlikely((__pyx_t_33 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 661, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_v_Pup = __pyx_t_33;

          /* "GBM.pyx":662
 *                     Reaper = drand48()
 *                     Pup = PDeath[0, k]
 *                     if Reaper <= Pup:             # <<<<<<<<<<<<<<
 *                         Alive[k] -= 1.
 *                         GSC[k] -= 1.
 */
          __pyx_t_28 = ((__pyx_v_Reaper <= __pyx_v_Pup) != 0);
          if (__pyx_t_28) {

            /* "GBM.pyx":663
 *                     Pup = PDeath[0, k]
 *                     if Reaper <= Pup:
 *                         Alive[k] -= 1.             # <<<<<<<<<<<<<<
 *                         GSC[k] -= 1.
 *                         Dead[k] += 1.
 */
            __pyx_t_38 = __pyx_v_k;
            __pyx_t_10 = __Pyx_GetItemInt(((PyObject *)__pyx_v_Alive), __pyx_t_38, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 663, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_7 = __Pyx_PyFloat_SubtractObjC(__pyx_t_10, __pyx_float_1_, 1., 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 663, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Alive), __pyx_t_38, __pyx_t_7, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 663, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "GBM.pyx":664
 *                     if Reaper <= Pup:
 *                         Alive[k] -= 1.
 *                         GSC[k] -= 1.             # <<<<<<<<<<<<<<
 *                         Dead[k] += 1.
 *                 upper = int(GPP[k])
 */
            __pyx_t_38 = __pyx_v_k;
            __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_GSC), __pyx_t_38, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 664, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_10 = __Pyx_PyFloat_SubtractObjC(__pyx_t_7, __pyx_float_1_, 1., 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 664, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GSC), __pyx_t_38, __pyx_t_10, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 664, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

            /* "GBM.pyx":665
 *                         Alive[k] -= 1.
 *                         GSC[k] -= 1.
 *                         Dead[k] += 1.             # <<<<<<<<<<<<<<
 *                 upper = int(GPP[k])
 *                 for Cell in range(upper):
 */
            __pyx_t_38 = __pyx_v_k;
            __pyx_t_10 = __Pyx_GetItemInt(((PyObject *)__pyx_v_Dead), __pyx_t_38, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 665, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_7 = __Pyx_PyFloat_AddObjC(__pyx_t_10, __pyx_float_1_, 1., 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 665, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Dead), __pyx_t_38, __pyx_t_7, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 665, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "GBM.pyx":662
 *                     Reaper = drand48()
 *                     Pup = PDeath[0, k]
 *                     if Reaper <= Pup:             # <<<<<<<<<<<<<<
 *                         Alive[k] -= 1.
 *                         GSC[k] -= 1.
 */
          }
        }

        /* "GBM.pyx":666
 *                         GSC[k] -= 1.
 *                         Dead[k] += 1.
 *                 upper = int(GPP[k])             # <<<<<<<<<<<<<<
 *                 for Cell in range(upper):
 *                     Reaper = drand48()
 */
        __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_GPP), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 666, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_10 = __Pyx_PyNumber_Int(__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 666, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_10); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 666, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_v_upper = __pyx_t_32;

        /* "GBM.pyx":667
 *                         Dead[k] += 1.
 *                 upper = int(GPP[k])
 *                 for Cell in range(upper):             # <<<<<<<<<<<<<<
 *                     Reaper = drand48()
 *                     Pup = PDeath[1, k]
 */
        __pyx_t_32 = __pyx_v_upper;
        __pyx_t_36 = __pyx_t_32;
        for (__pyx_t_37 = 0; __pyx_t_37 < __pyx_t_36; __pyx_t_37+=1) {
          __pyx_v_Cell = __pyx_t_37;

          /* "GBM.pyx":668
 *                 upper = int(GPP[k])
 *                 for Cell in range(upper):
 *                     Reaper = drand48()             # <<<<<<<<<<<<<<
 *                     Pup = PDeath[1, k]
 *                     if Reaper <= Pup:
 */
          __pyx_v_Reaper = drand48();

          /* "GBM.pyx":669
 *                 for Cell in range(upper):
 *                     Reaper = drand48()
 *                     Pup = PDeath[1, k]             # <<<<<<<<<<<<<<
 *                     if Reaper <= Pup:
 *                         Alive[k] -= 1.
 */
          __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_k); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 669, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 669, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_INCREF(__pyx_int_1);
          __Pyx_GIVEREF(__pyx_int_1);
          PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_int_1);
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_10);
          __pyx_t_10 = 0;
          __pyx_t_10 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_PDeath), __pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 669, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_33 = __pyx_PyFloat_AsFloat(__pyx_t_10); if (unlikely((__pyx_t_33 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 669, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_v_Pup = __pyx_t_33;

          /* "GBM.pyx":670
 *                     Reaper = drand48()
 *                     Pup = PDeath[1, k]
 *                     if Reaper <= Pup:             # <<<<<<<<<<<<<<
 *                         Alive[k] -= 1.
 *                         GPP[k] -= 1.
 */
          __pyx_t_28 = ((__pyx_v_Reaper <= __pyx_v_Pup) != 0);
          if (__pyx_t_28) {

            /* "GBM.pyx":671
 *                     Pup = PDeath[1, k]
 *                     if Reaper <= Pup:
 *                         Alive[k] -= 1.             # <<<<<<<<<<<<<<
 *                         GPP[k] -= 1.
 *                         Dead[k] += 1.
 */
            __pyx_t_38 = __pyx_v_k;
            __pyx_t_10 = __Pyx_GetItemInt(((PyObject *)__pyx_v_Alive), __pyx_t_38, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 671, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_7 = __Pyx_PyFloat_SubtractObjC(__pyx_t_10, __pyx_float_1_, 1., 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 671, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Alive), __pyx_t_38, __pyx_t_7, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 671, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "GBM.pyx":672
 *                     if Reaper <= Pup:
 *                         Alive[k] -= 1.
 *                         GPP[k] -= 1.             # <<<<<<<<<<<<<<
 *                         Dead[k] += 1.
 *                 upper = int(GDS[k])
 */
            __pyx_t_38 = __pyx_v_k;
            __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_GPP), __pyx_t_38, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 672, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_10 = __Pyx_PyFloat_SubtractObjC(__pyx_t_7, __pyx_float_1_, 1., 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 672, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GPP), __pyx_t_38, __pyx_t_10, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 672, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

            /* "GBM.pyx":673
 *                         Alive[k] -= 1.
 *                         GPP[k] -= 1.
 *                         Dead[k] += 1.             # <<<<<<<<<<<<<<
 *                 upper = int(GDS[k])
 *                 for Cell in range(upper):
 */
            __pyx_t_38 = __pyx_v_k;
            __pyx_t_10 = __Pyx_GetItemInt(((PyObject *)__pyx_v_Dead), __pyx_t_38, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 673, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_7 = __Pyx_PyFloat_AddObjC(__pyx_t_10, __pyx_float_1_, 1., 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 673, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Dead), __pyx_t_38, __pyx_t_7, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 673, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "GBM.pyx":670
 *                     Reaper = drand48()
 *                     Pup = PDeath[1, k]
 *                     if Reaper <= Pup:             # <<<<<<<<<<<<<<
 *                         Alive[k] -= 1.
 *                         GPP[k] -= 1.
 */
          }
        }

        /* "GBM.pyx":674
 *                         GPP[k] -= 1.
 *                         Dead[k] += 1.
 *                 upper = int(GDS[k])             # <<<<<<<<<<<<<<
 *                 for Cell in range(upper):
 *                     Reaper = drand48()
 */
        __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_GDS), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 674, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_10 = __Pyx_PyNumber_Int(__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 674, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_10); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 674, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_v_upper = __pyx_t_32;

        /* "GBM.pyx":675
 *                         Dead[k] += 1.
 *                 upper = int(GDS[k])
 *                 for Cell in range(upper):             # <<<<<<<<<<<<<<
 *                     Reaper = drand48()
 *                     Pup = PDeath[2, k]
 */
        __pyx_t_32 = __pyx_v_upper;
        __pyx_t_36 = __pyx_t_32;
        for (__pyx_t_37 = 0; __pyx_t_37 < __pyx_t_36; __pyx_t_37+=1) {
          __pyx_v_Cell = __pyx_t_37;

          /* "GBM.pyx":676
 *                 upper = int(GDS[k])
 *                 for Cell in range(upper):
 *                     Reaper = drand48()             # <<<<<<<<<<<<<<
 *                     Pup = PDeath[2, k]
 *                     if Reaper <= Pup:
 */
          __pyx_v_Reaper = drand48();

          /* "GBM.pyx":677
 *                 for Cell in range(upper):
 *                     Reaper = drand48()
 *                     Pup = PDeath[2, k]             # <<<<<<<<<<<<<<
 *                     if Reaper <= Pup:
 *                         Alive[k] -= 1.
 */
          __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_k); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 677, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 677, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_INCREF(__pyx_int_2);
          __Pyx_GIVEREF(__pyx_int_2);
          PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_int_2);
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_10);
          __pyx_t_10 = 0;
          __pyx_t_10 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_PDeath), __pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 677, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_33 = __pyx_PyFloat_AsFloat(__pyx_t_10); if (unlikely((__pyx_t_33 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 677, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_v_Pup = __pyx_t_33;

          /* "GBM.pyx":678
 *                     Reaper = drand48()
 *                     Pup = PDeath[2, k]
 *                     if Reaper <= Pup:             # <<<<<<<<<<<<<<
 *                         Alive[k] -= 1.
 *                         GDS[k] -= 1.
 */
          __pyx_t_28 = ((__pyx_v_Reaper <= __pyx_v_Pup) != 0);
          if (__pyx_t_28) {

            /* "GBM.pyx":679
 *                     Pup = PDeath[2, k]
 *                     if Reaper <= Pup:
 *                         Alive[k] -= 1.             # <<<<<<<<<<<<<<
 *                         GDS[k] -= 1.
 *                         Dead[k] += 1.
 */
            __pyx_t_38 = __pyx_v_k;
            __pyx_t_10 = __Pyx_GetItemInt(((PyObject *)__pyx_v_Alive), __pyx_t_38, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 679, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_7 = __Pyx_PyFloat_SubtractObjC(__pyx_t_10, __pyx_float_1_, 1., 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 679, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Alive), __pyx_t_38, __pyx_t_7, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 679, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "GBM.pyx":680
 *                     if Reaper <= Pup:
 *                         Alive[k] -= 1.
 *                         GDS[k] -= 1.             # <<<<<<<<<<<<<<
 *                         Dead[k] += 1.
 * 
 */
            __pyx_t_38 = __pyx_v_k;
            __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_GDS), __pyx_t_38, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 680, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_10 = __Pyx_PyFloat_SubtractObjC(__pyx_t_7, __pyx_float_1_, 1., 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 680, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_GDS), __pyx_t_38, __pyx_t_10, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 680, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

            /* "GBM.pyx":681
 *                         Alive[k] -= 1.
 *                         GDS[k] -= 1.
 *                         Dead[k] += 1.             # <<<<<<<<<<<<<<
 * 
 * #        print("Clusters: %s seconds" % (time.time() - t1))
 */
            __pyx_t_38 = __pyx_v_k;
            __pyx_t_10 = __Pyx_GetItemInt(((PyObject *)__pyx_v_Dead), __pyx_t_38, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 681, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_7 = __Pyx_PyFloat_AddObjC(__pyx_t_10, __pyx_float_1_, 1., 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 681, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_Dead), __pyx_t_38, __pyx_t_7, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 681, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "GBM.pyx":678
 *                     Reaper = drand48()
 *                     Pup = PDeath[2, k]
 *                     if Reaper <= Pup:             # <<<<<<<<<<<<<<
 *                         Alive[k] -= 1.
 *                         GDS[k] -= 1.
 */
          }
        }
      }
      __pyx_L52:;

      /* "GBM.pyx":649
 *         Quiescent = sorted(index[Alive>1], key=lambda k: random.random())
 * 
 *         for k in Quiescent:             # <<<<<<<<<<<<<<
 *             # Do the cells die of oxygen shortage?
 *             if all(PDeath[:,k] >= 1.):
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "GBM.pyx":689
 *         # 6) Delete points around clusters of dead or trapped cells
 * 
 *         a_tot = int(np.sum(Alive[Alive>=1])) # There is no need to resort, if all cells are dead             # <<<<<<<<<<<<<<
 * 
 *         if a_tot > 0:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_sum); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_RichCompare(((PyObject *)__pyx_v_Alive), __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 689, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Alive), __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_10); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_v_a_tot = __pyx_t_32;

    /* "GBM.pyx":691
 *         a_tot = int(np.sum(Alive[Alive>=1])) # There is no need to resort, if all cells are dead
 * 
 *         if a_tot > 0:             # <<<<<<<<<<<<<<
 *             gsize, GSC, GPP, GDS, Alive, Cell_pop, Dead, Rim, Xs_r, Ys_r, Discarded, points, tri, index, indptr, indices = Dead_cluster(GSC, GPP, GDS, Alive, Cell_pop, Dead, Rim, Xs_r, Ys_r, Discarded, points, tri, index, indptr, indices, Dup, Qup, trapped)
 * 
 */
    __pyx_t_28 = ((__pyx_v_a_tot > 0) != 0);
    if (__pyx_t_28) {

      /* "GBM.pyx":692
 * 
 *         if a_tot > 0:
 *             gsize, GSC, GPP, GDS, Alive, Cell_pop, Dead, Rim, Xs_r, Ys_r, Discarded, points, tri, index, indptr, indices = Dead_cluster(GSC, GPP, GDS, Alive, Cell_pop, Dead, Rim, Xs_r, Ys_r, Discarded, points, tri, index, indptr, indices, Dup, Qup, trapped)             # <<<<<<<<<<<<<<
 * 
 * #        print("Redistribute: %s seconds" % (time.time() - t1))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Dead_cluster); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 692, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(!__pyx_v_Xs_r)) { __Pyx_RaiseUnboundLocalError("Xs_r"); __PYX_ERR(0, 692, __pyx_L1_error) }
      if (unlikely(!__pyx_v_Ys_r)) { __Pyx_RaiseUnboundLocalError("Ys_r"); __PYX_ERR(0, 692, __pyx_L1_error) }
      if (unlikely(!__pyx_v_tri)) { __Pyx_RaiseUnboundLocalError("tri"); __PYX_ERR(0, 692, __pyx_L1_error) }
      if (unlikely(!__pyx_v_indptr)) { __Pyx_RaiseUnboundLocalError("indptr"); __PYX_ERR(0, 692, __pyx_L1_error) }
      if (unlikely(!__pyx_v_indices)) { __Pyx_RaiseUnboundLocalError("indices"); __PYX_ERR(0, 692, __pyx_L1_error) }
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_Dup); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 692, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_Qup); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 692, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_trapped); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 692, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_17 = NULL;
      __pyx_t_32 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_17)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_32 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[19] = {__pyx_t_17, ((PyObject *)__pyx_v_GSC), ((PyObject *)__pyx_v_GPP), ((PyObject *)__pyx_v_GDS), ((PyObject *)__pyx_v_Alive), ((PyObject *)__pyx_v_Cell_pop), ((PyObject *)__pyx_v_Dead), ((PyObject *)__pyx_v_Rim), __pyx_v_Xs_r, __pyx_v_Ys_r, __pyx_v_Discarded, ((PyObject *)__pyx_v_points), __pyx_v_tri, ((PyObject *)__pyx_v_index), __pyx_v_indptr, __pyx_v_indices, __pyx_t_6, __pyx_t_7, __pyx_t_5};
        __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_32, 18+__pyx_t_32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 692, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[19] = {__pyx_t_17, ((PyObject *)__pyx_v_GSC), ((PyObject *)__pyx_v_GPP), ((PyObject *)__pyx_v_GDS), ((PyObject *)__pyx_v_Alive), ((PyObject *)__pyx_v_Cell_pop), ((PyObject *)__pyx_v_Dead), ((PyObject *)__pyx_v_Rim), __pyx_v_Xs_r, __pyx_v_Ys_r, __pyx_v_Discarded, ((PyObject *)__pyx_v_points), __pyx_v_tri, ((PyObject *)__pyx_v_index), __pyx_v_indptr, __pyx_v_indices, __pyx_t_6, __pyx_t_7, __pyx_t_5};
        __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_32, 18+__pyx_t_32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 692, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(18+__pyx_t_32); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 692, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (__pyx_t_17) {
          __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_17); __pyx_t_17 = NULL;
        }
        __Pyx_INCREF(((PyObject *)__pyx_v_GSC));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_GSC));
        PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_32, ((PyObject *)__pyx_v_GSC));
        __Pyx_INCREF(((PyObject *)__pyx_v_GPP));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_GPP));
        PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_32, ((PyObject *)__pyx_v_GPP));
        __Pyx_INCREF(((PyObject *)__pyx_v_GDS));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_GDS));
        PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_32, ((PyObject *)__pyx_v_GDS));
        __Pyx_INCREF(((PyObject *)__pyx_v_Alive));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_Alive));
        PyTuple_SET_ITEM(__pyx_t_8, 3+__pyx_t_32, ((PyObject *)__pyx_v_Alive));
        __Pyx_INCREF(((PyObject *)__pyx_v_Cell_pop));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_Cell_pop));
        PyTuple_SET_ITEM(__pyx_t_8, 4+__pyx_t_32, ((PyObject *)__pyx_v_Cell_pop));
        __Pyx_INCREF(((PyObject *)__pyx_v_Dead));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_Dead));
        PyTuple_SET_ITEM(__pyx_t_8, 5+__pyx_t_32, ((PyObject *)__pyx_v_Dead));
        __Pyx_INCREF(((PyObject *)__pyx_v_Rim));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_Rim));
        PyTuple_SET_ITEM(__pyx_t_8, 6+__pyx_t_32, ((PyObject *)__pyx_v_Rim));
        __Pyx_INCREF(__pyx_v_Xs_r);
        __Pyx_GIVEREF(__pyx_v_Xs_r);
        PyTuple_SET_ITEM(__pyx_t_8, 7+__pyx_t_32, __pyx_v_Xs_r);
        __Pyx_INCREF(__pyx_v_Ys_r);
        __Pyx_GIVEREF(__pyx_v_Ys_r);
        PyTuple_SET_ITEM(__pyx_t_8, 8+__pyx_t_32, __pyx_v_Ys_r);
        __Pyx_INCREF(__pyx_v_Discarded);
        __Pyx_GIVEREF(__pyx_v_Discarded);
        PyTuple_SET_ITEM(__pyx_t_8, 9+__pyx_t_32, __pyx_v_Discarded);
        __Pyx_INCREF(((PyObject *)__pyx_v_points));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
        PyTuple_SET_ITEM(__pyx_t_8, 10+__pyx_t_32, ((PyObject *)__pyx_v_points));
        __Pyx_INCREF(__pyx_v_tri);
        __Pyx_GIVEREF(__pyx_v_tri);
        PyTuple_SET_ITEM(__pyx_t_8, 11+__pyx_t_32, __pyx_v_tri);
        __Pyx_INCREF(((PyObject *)__pyx_v_index));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_index));
        PyTuple_SET_ITEM(__pyx_t_8, 12+__pyx_t_32, ((PyObject *)__pyx_v_index));
        __Pyx_INCREF(__pyx_v_indptr);
        __Pyx_GIVEREF(__pyx_v_indptr);
        PyTuple_SET_ITEM(__pyx_t_8, 13+__pyx_t_32, __pyx_v_indptr);
        __Pyx_INCREF(__pyx_v_indices);
        __Pyx_GIVEREF(__pyx_v_indices);
        PyTuple_SET_ITEM(__pyx_t_8, 14+__pyx_t_32, __pyx_v_indices);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 15+__pyx_t_32, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 16+__pyx_t_32, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_8, 17+__pyx_t_32, __pyx_t_5);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_5 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 692, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
        PyObject* sequence = __pyx_t_10;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 16)) {
          if (size > 16) __Pyx_RaiseTooManyValuesError(16);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 692, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 4); 
          __pyx_t_17 = PyTuple_GET_ITEM(sequence, 5); 
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 6); 
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 7); 
          __pyx_t_12 = PyTuple_GET_ITEM(sequence, 8); 
          __pyx_t_13 = PyTuple_GET_ITEM(sequence, 9); 
          __pyx_t_15 = PyTuple_GET_ITEM(sequence, 10); 
          __pyx_t_1 = PyTuple_GET_ITEM(sequence, 11); 
          __pyx_t_16 = PyTuple_GET_ITEM(sequence, 12); 
          __pyx_t_14 = PyTuple_GET_ITEM(sequence, 13); 
          __pyx_t_23 = PyTuple_GET_ITEM(sequence, 14); 
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 15); 
        } else {
          __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 4); 
          __pyx_t_17 = PyList_GET_ITEM(sequence, 5); 
          __pyx_t_9 = PyList_GET_ITEM(sequence, 6); 
          __pyx_t_11 = PyList_GET_ITEM(sequence, 7); 
          __pyx_t_12 = PyList_GET_ITEM(sequence, 8); 
          __pyx_t_13 = PyList_GET_ITEM(sequence, 9); 
          __pyx_t_15 = PyList_GET_ITEM(sequence, 10); 
          __pyx_t_1 = PyList_GET_ITEM(sequence, 11); 
          __pyx_t_16 = PyList_GET_ITEM(sequence, 12); 
          __pyx_t_14 = PyList_GET_ITEM(sequence, 13); 
          __pyx_t_23 = PyList_GET_ITEM(sequence, 14); 
          __pyx_t_2 = PyList_GET_ITEM(sequence, 15); 
        }
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_17);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_23);
        __Pyx_INCREF(__pyx_t_2);
        #else
        {
          Py_ssize_t i;
          PyObject** temps[16] = {&__pyx_t_3,&__pyx_t_8,&__pyx_t_5,&__pyx_t_7,&__pyx_t_6,&__pyx_t_17,&__pyx_t_9,&__pyx_t_11,&__pyx_t_12,&__pyx_t_13,&__pyx_t_15,&__pyx_t_1,&__pyx_t_16,&__pyx_t_14,&__pyx_t_23,&__pyx_t_2};
          for (i=0; i < 16; i++) {
            PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 692, __pyx_L1_error)
            __Pyx_GOTREF(item);
            *(temps[i]) = item;
          }
        }
        #endif
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else {
        Py_ssize_t index = -1;
        PyObject** temps[16] = {&__pyx_t_3,&__pyx_t_8,&__pyx_t_5,&__pyx_t_7,&__pyx_t_6,&__pyx_t_17,&__pyx_t_9,&__pyx_t_11,&__pyx_t_12,&__pyx_t_13,&__pyx_t_15,&__pyx_t_1,&__pyx_t_16,&__pyx_t_14,&__pyx_t_23,&__pyx_t_2};
        __pyx_t_21 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 692, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_25 = Py_TYPE(__pyx_t_21)->tp_iternext;
        for (index=0; index < 16; index++) {
          PyObject* item = __pyx_t_25(__pyx_t_21); if (unlikely(!item)) goto __pyx_L63_unpacking_failed;
          __Pyx_GOTREF(item);
          *(temps[index]) = item;
        }
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_25(__pyx_t_21), 16) < 0) __PYX_ERR(0, 692, __pyx_L1_error)
        __pyx_t_25 = NULL;
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
        goto __pyx_L64_unpacking_done;
        __pyx_L63_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
        __pyx_t_25 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 692, __pyx_L1_error)
        __pyx_L64_unpacking_done:;
      }
      __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 692, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 692, __pyx_L1_error)
      if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 692, __pyx_L1_error)
      if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 692, __pyx_L1_error)
      if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 692, __pyx_L1_error)
      if (!(likely(((__pyx_t_17) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_17, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 692, __pyx_L1_error)
      if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 692, __pyx_L1_error)
      if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 692, __pyx_L1_error)
      if (!(likely(PyList_CheckExact(__pyx_t_12))||((__pyx_t_12) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_12)->tp_name), 0))) __PYX_ERR(0, 692, __pyx_L1_error)
      if (!(likely(PyList_CheckExact(__pyx_t_13))||((__pyx_t_13) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_13)->tp_name), 0))) __PYX_ERR(0, 692, __pyx_L1_error)
      if (!(likely(PyList_CheckExact(__pyx_t_15))||((__pyx_t_15) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_15)->tp_name), 0))) __PYX_ERR(0, 692, __pyx_L1_error)
      if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 692, __pyx_L1_error)
      if (!(likely(((__pyx_t_14) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_14, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 692, __pyx_L1_error)
      __pyx_v_gsize = __pyx_t_32;
      __Pyx_DECREF_SET(__pyx_v_GSC, ((PyArrayObject *)__pyx_t_8));
      __pyx_t_8 = 0;
      __Pyx_DECREF_SET(__pyx_v_GPP, ((PyArrayObject *)__pyx_t_5));
      __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_GDS, ((PyArrayObject *)__pyx_t_7));
      __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_Alive, ((PyArrayObject *)__pyx_t_6));
      __pyx_t_6 = 0;
      __Pyx_DECREF_SET(__pyx_v_Cell_pop, ((PyArrayObject *)__pyx_t_17));
      __pyx_t_17 = 0;
      __Pyx_DECREF_SET(__pyx_v_Dead, ((PyArrayObject *)__pyx_t_9));
      __pyx_t_9 = 0;
      __Pyx_DECREF_SET(__pyx_v_Rim, ((PyArrayObject *)__pyx_t_11));
      __pyx_t_11 = 0;
      __Pyx_XDECREF_SET(__pyx_v_Xs_r, ((PyObject*)__pyx_t_12));
      __pyx_t_12 = 0;
      __Pyx_XDECREF_SET(__pyx_v_Ys_r, ((PyObject*)__pyx_t_13));
      __pyx_t_13 = 0;
      __Pyx_DECREF_SET(__pyx_v_Discarded, ((PyObject*)__pyx_t_15));
      __pyx_t_15 = 0;
      __Pyx_DECREF_SET(__pyx_v_points, ((PyArrayObject *)__pyx_t_1));
      __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_tri, __pyx_t_16);
      __pyx_t_16 = 0;
      __Pyx_DECREF_SET(__pyx_v_index, ((PyArrayObject *)__pyx_t_14));
      __pyx_t_14 = 0;
      __Pyx_XDECREF_SET(__pyx_v_indptr, __pyx_t_23);
      __pyx_t_23 = 0;
      __Pyx_XDECREF_SET(__pyx_v_indices, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "GBM.pyx":691
 *         a_tot = int(np.sum(Alive[Alive>=1])) # There is no need to resort, if all cells are dead
 * 
 *         if a_tot > 0:             # <<<<<<<<<<<<<<
 *             gsize, GSC, GPP, GDS, Alive, Cell_pop, Dead, Rim, Xs_r, Ys_r, Discarded, points, tri, index, indptr, indices = Dead_cluster(GSC, GPP, GDS, Alive, Cell_pop, Dead, Rim, Xs_r, Ys_r, Discarded, points, tri, index, indptr, indices, Dup, Qup, trapped)
 * 
 */
    }

    /* "GBM.pyx":700
 *         # 7) Save snapshot if required and save data for overview
 * 
 *         mask = Alive == 1             # <<<<<<<<<<<<<<
 *         mask = np.logical_and(mask, Cell_pop == 1.)
 * 
 */
    __pyx_t_10 = PyObject_RichCompare(((PyObject *)__pyx_v_Alive), __pyx_int_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 700, __pyx_L1_error)
    if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 700, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_mask, ((PyArrayObject *)__pyx_t_10));
    __pyx_t_10 = 0;

    /* "GBM.pyx":701
 * 
 *         mask = Alive == 1
 *         mask = np.logical_and(mask, Cell_pop == 1.)             # <<<<<<<<<<<<<<
 * 
 *         if myplots:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_logical_and); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_Cell_pop), __pyx_float_1_, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 701, __pyx_L1_error)
    __pyx_t_14 = NULL;
    __pyx_t_32 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_23))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_23);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_23);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_23, function);
        __pyx_t_32 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_23)) {
      PyObject *__pyx_temp[3] = {__pyx_t_14, ((PyObject *)__pyx_v_mask), __pyx_t_2};
      __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_23, __pyx_temp+1-__pyx_t_32, 2+__pyx_t_32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 701, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_23)) {
      PyObject *__pyx_temp[3] = {__pyx_t_14, ((PyObject *)__pyx_v_mask), __pyx_t_2};
      __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_23, __pyx_temp+1-__pyx_t_32, 2+__pyx_t_32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 701, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_16 = PyTuple_New(2+__pyx_t_32); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      if (__pyx_t_14) {
        __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_14); __pyx_t_14 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_mask));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_mask));
      PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_32, ((PyObject *)__pyx_v_mask));
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_32, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_t_16, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    }
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_mask, ((PyArrayObject *)__pyx_t_10));
    __pyx_t_10 = 0;

    /* "GBM.pyx":703
 *         mask = np.logical_and(mask, Cell_pop == 1.)
 * 
 *         if myplots:             # <<<<<<<<<<<<<<
 *             GSC_tot.extend([np.sum(GSC)])
 *             GPP_tot.extend([np.sum(GPP)])
 */
    __pyx_t_28 = (__pyx_v_myplots != 0);
    if (__pyx_t_28) {

      /* "GBM.pyx":704
 * 
 *         if myplots:
 *             GSC_tot.extend([np.sum(GSC)])             # <<<<<<<<<<<<<<
 *             GPP_tot.extend([np.sum(GPP)])
 *             GDS_tot.extend([np.sum(GDS)])
 */
      __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_np); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_23);
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_sum); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      __pyx_t_23 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_16))) {
        __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_16);
        if (likely(__pyx_t_23)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
          __Pyx_INCREF(__pyx_t_23);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_16, function);
        }
      }
      __pyx_t_10 = (__pyx_t_23) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_23, ((PyObject *)__pyx_v_GSC)) : __Pyx_PyObject_CallOneArg(__pyx_t_16, ((PyObject *)__pyx_v_GSC));
      __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      if (unlikely(!__pyx_v_GSC_tot)) { __Pyx_RaiseUnboundLocalError("GSC_tot"); __PYX_ERR(0, 704, __pyx_L1_error) }
      __pyx_t_39 = __Pyx_PyList_Append(__pyx_v_GSC_tot, __pyx_t_10); if (unlikely(__pyx_t_39 == ((int)-1))) __PYX_ERR(0, 704, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      (void)(__pyx_t_39);

      /* "GBM.pyx":705
 *         if myplots:
 *             GSC_tot.extend([np.sum(GSC)])
 *             GPP_tot.extend([np.sum(GPP)])             # <<<<<<<<<<<<<<
 *             GDS_tot.extend([np.sum(GDS)])
 *             Dead_tot.extend([np.sum(Dead)])
 */
      __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_np); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_sum); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_23);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_16 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_23))) {
        __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_23);
        if (likely(__pyx_t_16)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_23);
          __Pyx_INCREF(__pyx_t_16);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_23, function);
        }
      }
      __pyx_t_10 = (__pyx_t_16) ? __Pyx_PyObject_Call2Args(__pyx_t_23, __pyx_t_16, ((PyObject *)__pyx_v_GPP)) : __Pyx_PyObject_CallOneArg(__pyx_t_23, ((PyObject *)__pyx_v_GPP));
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      if (unlikely(!__pyx_v_GPP_tot)) { __Pyx_RaiseUnboundLocalError("GPP_tot"); __PYX_ERR(0, 705, __pyx_L1_error) }
      __pyx_t_39 = __Pyx_PyList_Append(__pyx_v_GPP_tot, __pyx_t_10); if (unlikely(__pyx_t_39 == ((int)-1))) __PYX_ERR(0, 705, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      (void)(__pyx_t_39);

      /* "GBM.pyx":706
 *             GSC_tot.extend([np.sum(GSC)])
 *             GPP_tot.extend([np.sum(GPP)])
 *             GDS_tot.extend([np.sum(GDS)])             # <<<<<<<<<<<<<<
 *             Dead_tot.extend([np.sum(Dead)])
 *             Alive_single.extend([len(Cell_pop[mask])])
 */
      __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_np); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 706, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_23);
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_sum); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 706, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      __pyx_t_23 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_16))) {
        __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_16);
        if (likely(__pyx_t_23)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
          __Pyx_INCREF(__pyx_t_23);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_16, function);
        }
      }
      __pyx_t_10 = (__pyx_t_23) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_23, ((PyObject *)__pyx_v_GDS)) : __Pyx_PyObject_CallOneArg(__pyx_t_16, ((PyObject *)__pyx_v_GDS));
      __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 706, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      if (unlikely(!__pyx_v_GDS_tot)) { __Pyx_RaiseUnboundLocalError("GDS_tot"); __PYX_ERR(0, 706, __pyx_L1_error) }
      __pyx_t_39 = __Pyx_PyList_Append(__pyx_v_GDS_tot, __pyx_t_10); if (unlikely(__pyx_t_39 == ((int)-1))) __PYX_ERR(0, 706, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      (void)(__pyx_t_39);

      /* "GBM.pyx":707
 *             GPP_tot.extend([np.sum(GPP)])
 *             GDS_tot.extend([np.sum(GDS)])
 *             Dead_tot.extend([np.sum(Dead)])             # <<<<<<<<<<<<<<
 *             Alive_single.extend([len(Cell_pop[mask])])
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_np); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 707, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_sum); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 707, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_23);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_16 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_23))) {
        __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_23);
        if (likely(__pyx_t_16)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_23);
          __Pyx_INCREF(__pyx_t_16);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_23, function);
        }
      }
      __pyx_t_10 = (__pyx_t_16) ? __Pyx_PyObject_Call2Args(__pyx_t_23, __pyx_t_16, ((PyObject *)__pyx_v_Dead)) : __Pyx_PyObject_CallOneArg(__pyx_t_23, ((PyObject *)__pyx_v_Dead));
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 707, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      if (unlikely(!__pyx_v_Dead_tot)) { __Pyx_RaiseUnboundLocalError("Dead_tot"); __PYX_ERR(0, 707, __pyx_L1_error) }
      __pyx_t_39 = __Pyx_PyList_Append(__pyx_v_Dead_tot, __pyx_t_10); if (unlikely(__pyx_t_39 == ((int)-1))) __PYX_ERR(0, 707, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      (void)(__pyx_t_39);

      /* "GBM.pyx":708
 *             GDS_tot.extend([np.sum(GDS)])
 *             Dead_tot.extend([np.sum(Dead)])
 *             Alive_single.extend([len(Cell_pop[mask])])             # <<<<<<<<<<<<<<
 * 
 *         # Write log-file
 */
      if (unlikely(!__pyx_v_Alive_single)) { __Pyx_RaiseUnboundLocalError("Alive_single"); __PYX_ERR(0, 708, __pyx_L1_error) }
      __pyx_t_10 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Cell_pop), ((PyObject *)__pyx_v_mask)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 708, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_31 = PyObject_Length(__pyx_t_10); if (unlikely(__pyx_t_31 == ((Py_ssize_t)-1))) __PYX_ERR(0, 708, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyInt_FromSsize_t(__pyx_t_31); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 708, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_39 = __Pyx_PyList_Append(__pyx_v_Alive_single, __pyx_t_10); if (unlikely(__pyx_t_39 == ((int)-1))) __PYX_ERR(0, 708, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "GBM.pyx":703
 *         mask = np.logical_and(mask, Cell_pop == 1.)
 * 
 *         if myplots:             # <<<<<<<<<<<<<<
 *             GSC_tot.extend([np.sum(GSC)])
 *             GPP_tot.extend([np.sum(GPP)])
 */
    }

    /* "GBM.pyx":711
 * 
 *         # Write log-file
 *         idummy1 = int(np.sum(GSC))             # <<<<<<<<<<<<<<
 *         idummy2 = int(np.sum(GPP))
 *         idummy3 = int(np.sum(GDS))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_np); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 711, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_sum); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 711, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __pyx_t_23 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_16))) {
      __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_16);
      if (likely(__pyx_t_23)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_23);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_16, function);
      }
    }
    __pyx_t_10 = (__pyx_t_23) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_23, ((PyObject *)__pyx_v_GSC)) : __Pyx_PyObject_CallOneArg(__pyx_t_16, ((PyObject *)__pyx_v_GSC));
    __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
    if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 711, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyNumber_Int(__pyx_t_10); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 711, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_16); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 711, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_v_idummy1 = __pyx_t_32;

    /* "GBM.pyx":712
 *         # Write log-file
 *         idummy1 = int(np.sum(GSC))
 *         idummy2 = int(np.sum(GPP))             # <<<<<<<<<<<<<<
 *         idummy3 = int(np.sum(GDS))
 *         idummy4 = int(np.sum(Dead))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 712, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_sum); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 712, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_23))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_23);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_23);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_23, function);
      }
    }
    __pyx_t_16 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_23, __pyx_t_10, ((PyObject *)__pyx_v_GPP)) : __Pyx_PyObject_CallOneArg(__pyx_t_23, ((PyObject *)__pyx_v_GPP));
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 712, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __pyx_t_23 = __Pyx_PyNumber_Int(__pyx_t_16); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 712, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_23); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 712, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __pyx_v_idummy2 = __pyx_t_32;

    /* "GBM.pyx":713
 *         idummy1 = int(np.sum(GSC))
 *         idummy2 = int(np.sum(GPP))
 *         idummy3 = int(np.sum(GDS))             # <<<<<<<<<<<<<<
 *         idummy4 = int(np.sum(Dead))
 *         idummy5 = len(Cell_pop[mask])
 */
    __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_np); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_sum); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_23 = (__pyx_t_16) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_16, ((PyObject *)__pyx_v_GDS)) : __Pyx_PyObject_CallOneArg(__pyx_t_10, ((PyObject *)__pyx_v_GDS));
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyNumber_Int(__pyx_t_23); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_10); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_v_idummy3 = __pyx_t_32;

    /* "GBM.pyx":714
 *         idummy2 = int(np.sum(GPP))
 *         idummy3 = int(np.sum(GDS))
 *         idummy4 = int(np.sum(Dead))             # <<<<<<<<<<<<<<
 *         idummy5 = len(Cell_pop[mask])
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_np); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_sum); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __pyx_t_23 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_16))) {
      __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_16);
      if (likely(__pyx_t_23)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_23);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_16, function);
      }
    }
    __pyx_t_10 = (__pyx_t_23) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_23, ((PyObject *)__pyx_v_Dead)) : __Pyx_PyObject_CallOneArg(__pyx_t_16, ((PyObject *)__pyx_v_Dead));
    __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
    if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyNumber_Int(__pyx_t_10); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_16); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_v_idummy4 = __pyx_t_32;

    /* "GBM.pyx":715
 *         idummy3 = int(np.sum(GDS))
 *         idummy4 = int(np.sum(Dead))
 *         idummy5 = len(Cell_pop[mask])             # <<<<<<<<<<<<<<
 * 
 *         fdummy1 = time.time() - start_time
 */
    __pyx_t_16 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Cell_pop), ((PyObject *)__pyx_v_mask)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_31 = PyObject_Length(__pyx_t_16); if (unlikely(__pyx_t_31 == ((Py_ssize_t)-1))) __PYX_ERR(0, 715, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_v_idummy5 = __pyx_t_31;

    /* "GBM.pyx":717
 *         idummy5 = len(Cell_pop[mask])
 * 
 *         fdummy1 = time.time() - start_time             # <<<<<<<<<<<<<<
 *         ff = open(logfile, "a")
 *         ff.write("%i %.2E %i %i %i %i %i \n" % (i, fdummy1,  idummy1, idummy2, idummy3, idummy4, idummy5))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_time); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 717, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_time); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 717, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_23))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_23);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_23);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_23, function);
      }
    }
    __pyx_t_16 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_23, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_23);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 717, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __pyx_t_23 = PyFloat_FromDouble(__pyx_v_start_time); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 717, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __pyx_t_10 = PyNumber_Subtract(__pyx_t_16, __pyx_t_23); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 717, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __pyx_t_33 = __pyx_PyFloat_AsFloat(__pyx_t_10); if (unlikely((__pyx_t_33 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 717, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_v_fdummy1 = __pyx_t_33;

    /* "GBM.pyx":718
 * 
 *         fdummy1 = time.time() - start_time
 *         ff = open(logfile, "a")             # <<<<<<<<<<<<<<
 *         ff.write("%i %.2E %i %i %i %i %i \n" % (i, fdummy1,  idummy1, idummy2, idummy3, idummy4, idummy5))
 *         ff.close()
 */
    __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_v_logfile);
    __Pyx_GIVEREF(__pyx_v_logfile);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_logfile);
    __Pyx_INCREF(__pyx_n_u_a);
    __Pyx_GIVEREF(__pyx_n_u_a);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_n_u_a);
    __pyx_t_23 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_10, NULL); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ff, __pyx_t_23);
    __pyx_t_23 = 0;

    /* "GBM.pyx":719
 *         fdummy1 = time.time() - start_time
 *         ff = open(logfile, "a")
 *         ff.write("%i %.2E %i %i %i %i %i \n" % (i, fdummy1,  idummy1, idummy2, idummy3, idummy4, idummy5))             # <<<<<<<<<<<<<<
 *         ff.close()
 * 
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_ff, __pyx_n_s_write); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_16 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_fdummy1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_idummy1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_idummy2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_v_idummy3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_idummy4); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_idummy5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_11 = PyTuple_New(7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_11, 3, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_11, 4, __pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_11, 5, __pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_11, 6, __pyx_t_12);
    __pyx_t_16 = 0;
    __pyx_t_2 = 0;
    __pyx_t_14 = 0;
    __pyx_t_1 = 0;
    __pyx_t_15 = 0;
    __pyx_t_13 = 0;
    __pyx_t_12 = 0;
    __pyx_t_12 = PyUnicode_Format(__pyx_kp_u_i_2E_i_i_i_i_i, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_23 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_11, __pyx_t_12) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_12);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

    /* "GBM.pyx":720
 *         ff = open(logfile, "a")
 *         ff.write("%i %.2E %i %i %i %i %i \n" % (i, fdummy1,  idummy1, idummy2, idummy3, idummy4, idummy5))
 *         ff.close()             # <<<<<<<<<<<<<<
 * 
 *         if np.mod(i,SavN) == 0:
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_ff, __pyx_n_s_close); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 720, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_12 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
      }
    }
    __pyx_t_23 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 720, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

    /* "GBM.pyx":722
 *         ff.close()
 * 
 *         if np.mod(i,SavN) == 0:             # <<<<<<<<<<<<<<
 * 
 *             exten = "%05d" % i
 */
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_mod); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_SavN); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_13 = NULL;
    __pyx_t_32 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
        __pyx_t_32 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_12)) {
      PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_t_10, __pyx_t_11};
      __pyx_t_23 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_32, 2+__pyx_t_32); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 722, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GOTREF(__pyx_t_23);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {
      PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_t_10, __pyx_t_11};
      __pyx_t_23 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_32, 2+__pyx_t_32); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 722, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_GOTREF(__pyx_t_23);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    } else
    #endif
    {
      __pyx_t_15 = PyTuple_New(2+__pyx_t_32); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 722, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      if (__pyx_t_13) {
        __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_13); __pyx_t_13 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_32, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_32, __pyx_t_11);
      __pyx_t_10 = 0;
      __pyx_t_11 = 0;
      __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_15, NULL); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 722, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_23);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_PyInt_EqObjC(__pyx_t_23, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __pyx_t_28 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_28 < 0)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (__pyx_t_28) {

      /* "GBM.pyx":724
 *         if np.mod(i,SavN) == 0:
 * 
 *             exten = "%05d" % i             # <<<<<<<<<<<<<<
 * 
 *             if myplots:
 */
      __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 724, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_23 = PyUnicode_Format(__pyx_kp_u_05d, __pyx_t_12); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 724, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_23);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF_SET(__pyx_v_exten, ((PyObject*)__pyx_t_23));
      __pyx_t_23 = 0;

      /* "GBM.pyx":726
 *             exten = "%05d" % i
 * 
 *             if myplots:             # <<<<<<<<<<<<<<
 *                 plt.figure(1)
 *                 plt.clf()
 */
      __pyx_t_28 = (__pyx_v_myplots != 0);
      if (__pyx_t_28) {

        /* "GBM.pyx":727
 * 
 *             if myplots:
 *                 plt.figure(1)             # <<<<<<<<<<<<<<
 *                 plt.clf()
 *                 plt.triplot(points[:,0], points[:,1], tri.simplices,color="c",alpha=0.5)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_plt); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 727, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_figure); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 727, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_15);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_15, function);
          }
        }
        __pyx_t_23 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_12, __pyx_int_1) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_int_1);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 727, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_23);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

        /* "GBM.pyx":728
 *             if myplots:
 *                 plt.figure(1)
 *                 plt.clf()             # <<<<<<<<<<<<<<
 *                 plt.triplot(points[:,0], points[:,1], tri.simplices,color="c",alpha=0.5)
 *                 for k in index[Dead>0]:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_plt); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 728, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_clf); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 728, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_15)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_15);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
          }
        }
        __pyx_t_23 = (__pyx_t_15) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_15) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 728, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_23);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

        /* "GBM.pyx":729
 *                 plt.figure(1)
 *                 plt.clf()
 *                 plt.triplot(points[:,0], points[:,1], tri.simplices,color="c",alpha=0.5)             # <<<<<<<<<<<<<<
 *                 for k in index[Dead>0]:
 *                     plt.plot(points[k][0],points[k][1],"k.")
 */
        __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_plt); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 729, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_23);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_triplot); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 729, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
        __pyx_t_23 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_points), __pyx_tuple__24); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 729, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_23);
        __pyx_t_15 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_points), __pyx_tuple__25); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 729, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        if (unlikely(!__pyx_v_tri)) { __Pyx_RaiseUnboundLocalError("tri"); __PYX_ERR(0, 729, __pyx_L1_error) }
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_tri, __pyx_n_s_simplices); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 729, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 729, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_23);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_23);
        __Pyx_GIVEREF(__pyx_t_15);
        PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_15);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_11);
        __pyx_t_23 = 0;
        __pyx_t_15 = 0;
        __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 729, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_color, __pyx_n_u_c_2) < 0) __PYX_ERR(0, 729, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_alpha, __pyx_float_0_5) < 0) __PYX_ERR(0, 729, __pyx_L1_error)
        __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 729, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

        /* "GBM.pyx":730
 *                 plt.clf()
 *                 plt.triplot(points[:,0], points[:,1], tri.simplices,color="c",alpha=0.5)
 *                 for k in index[Dead>0]:             # <<<<<<<<<<<<<<
 *                     plt.plot(points[k][0],points[k][1],"k.")
 *                 for k in index[GSC==1]:
 */
        __pyx_t_15 = PyObject_RichCompare(((PyObject *)__pyx_v_Dead), __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_15); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 730, __pyx_L1_error)
        __pyx_t_11 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_index), __pyx_t_15); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 730, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (likely(PyList_CheckExact(__pyx_t_11)) || PyTuple_CheckExact(__pyx_t_11)) {
          __pyx_t_15 = __pyx_t_11; __Pyx_INCREF(__pyx_t_15); __pyx_t_31 = 0;
          __pyx_t_40 = NULL;
        } else {
          __pyx_t_31 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 730, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_40 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_40)) __PYX_ERR(0, 730, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        for (;;) {
          if (likely(!__pyx_t_40)) {
            if (likely(PyList_CheckExact(__pyx_t_15))) {
              if (__pyx_t_31 >= PyList_GET_SIZE(__pyx_t_15)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_11 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_31); __Pyx_INCREF(__pyx_t_11); __pyx_t_31++; if (unlikely(0 < 0)) __PYX_ERR(0, 730, __pyx_L1_error)
              #else
              __pyx_t_11 = PySequence_ITEM(__pyx_t_15, __pyx_t_31); __pyx_t_31++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 730, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              #endif
            } else {
              if (__pyx_t_31 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_31); __Pyx_INCREF(__pyx_t_11); __pyx_t_31++; if (unlikely(0 < 0)) __PYX_ERR(0, 730, __pyx_L1_error)
              #else
              __pyx_t_11 = PySequence_ITEM(__pyx_t_15, __pyx_t_31); __pyx_t_31++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 730, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              #endif
            }
          } else {
            __pyx_t_11 = __pyx_t_40(__pyx_t_15);
            if (unlikely(!__pyx_t_11)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 730, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_11);
          }
          __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_11); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 730, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_v_k = __pyx_t_32;

          /* "GBM.pyx":731
 *                 plt.triplot(points[:,0], points[:,1], tri.simplices,color="c",alpha=0.5)
 *                 for k in index[Dead>0]:
 *                     plt.plot(points[k][0],points[k][1],"k.")             # <<<<<<<<<<<<<<
 *                 for k in index[GSC==1]:
 *                     plt.plot(points[k][0],points[k][1],".",color="m")
 */
          __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_plt); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 731, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_plot); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 731, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = __Pyx_GetItemInt(((PyObject *)__pyx_v_points), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 731, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_23 = __Pyx_GetItemInt(__pyx_t_10, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 731, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_23);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = __Pyx_GetItemInt(((PyObject *)__pyx_v_points), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 731, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_13 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 731, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = NULL;
          __pyx_t_32 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
              __pyx_t_32 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_12)) {
            PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_23, __pyx_t_13, __pyx_kp_u_k};
            __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_32, 3+__pyx_t_32); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 731, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {
            PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_t_23, __pyx_t_13, __pyx_kp_u_k};
            __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_32, 3+__pyx_t_32); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 731, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          } else
          #endif
          {
            __pyx_t_1 = PyTuple_New(3+__pyx_t_32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 731, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            if (__pyx_t_10) {
              __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_10); __pyx_t_10 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_23);
            PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_32, __pyx_t_23);
            __Pyx_GIVEREF(__pyx_t_13);
            PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_32, __pyx_t_13);
            __Pyx_INCREF(__pyx_kp_u_k);
            __Pyx_GIVEREF(__pyx_kp_u_k);
            PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_32, __pyx_kp_u_k);
            __pyx_t_23 = 0;
            __pyx_t_13 = 0;
            __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_1, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 731, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "GBM.pyx":730
 *                 plt.clf()
 *                 plt.triplot(points[:,0], points[:,1], tri.simplices,color="c",alpha=0.5)
 *                 for k in index[Dead>0]:             # <<<<<<<<<<<<<<
 *                     plt.plot(points[k][0],points[k][1],"k.")
 *                 for k in index[GSC==1]:
 */
        }
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

        /* "GBM.pyx":732
 *                 for k in index[Dead>0]:
 *                     plt.plot(points[k][0],points[k][1],"k.")
 *                 for k in index[GSC==1]:             # <<<<<<<<<<<<<<
 *                     plt.plot(points[k][0],points[k][1],".",color="m")
 *                 for k in index[GPP==1]:
 */
        __pyx_t_15 = PyObject_RichCompare(((PyObject *)__pyx_v_GSC), __pyx_int_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_15); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 732, __pyx_L1_error)
        __pyx_t_11 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_index), __pyx_t_15); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 732, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (likely(PyList_CheckExact(__pyx_t_11)) || PyTuple_CheckExact(__pyx_t_11)) {
          __pyx_t_15 = __pyx_t_11; __Pyx_INCREF(__pyx_t_15); __pyx_t_31 = 0;
          __pyx_t_40 = NULL;
        } else {
          __pyx_t_31 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 732, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_40 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_40)) __PYX_ERR(0, 732, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        for (;;) {
          if (likely(!__pyx_t_40)) {
            if (likely(PyList_CheckExact(__pyx_t_15))) {
              if (__pyx_t_31 >= PyList_GET_SIZE(__pyx_t_15)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_11 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_31); __Pyx_INCREF(__pyx_t_11); __pyx_t_31++; if (unlikely(0 < 0)) __PYX_ERR(0, 732, __pyx_L1_error)
              #else
              __pyx_t_11 = PySequence_ITEM(__pyx_t_15, __pyx_t_31); __pyx_t_31++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 732, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              #endif
            } else {
              if (__pyx_t_31 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_31); __Pyx_INCREF(__pyx_t_11); __pyx_t_31++; if (unlikely(0 < 0)) __PYX_ERR(0, 732, __pyx_L1_error)
              #else
              __pyx_t_11 = PySequence_ITEM(__pyx_t_15, __pyx_t_31); __pyx_t_31++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 732, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              #endif
            }
          } else {
            __pyx_t_11 = __pyx_t_40(__pyx_t_15);
            if (unlikely(!__pyx_t_11)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 732, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_11);
          }
          __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_11); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 732, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_v_k = __pyx_t_32;

          /* "GBM.pyx":733
 *                     plt.plot(points[k][0],points[k][1],"k.")
 *                 for k in index[GSC==1]:
 *                     plt.plot(points[k][0],points[k][1],".",color="m")             # <<<<<<<<<<<<<<
 *                 for k in index[GPP==1]:
 *                     plt.plot(points[k][0],points[k][1],"r.")
 */
          __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_plt); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 733, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_plot); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 733, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_GetItemInt(((PyObject *)__pyx_v_points), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 733, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_11, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 733, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_GetItemInt(((PyObject *)__pyx_v_points), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 733, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_13 = __Pyx_GetItemInt(__pyx_t_11, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 733, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = PyTuple_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 733, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_GIVEREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_13);
          PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_13);
          __Pyx_INCREF(__pyx_kp_u__26);
          __Pyx_GIVEREF(__pyx_kp_u__26);
          PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_kp_u__26);
          __pyx_t_1 = 0;
          __pyx_t_13 = 0;
          __pyx_t_13 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 733, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_color, __pyx_n_u_m) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_11, __pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 733, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "GBM.pyx":732
 *                 for k in index[Dead>0]:
 *                     plt.plot(points[k][0],points[k][1],"k.")
 *                 for k in index[GSC==1]:             # <<<<<<<<<<<<<<
 *                     plt.plot(points[k][0],points[k][1],".",color="m")
 *                 for k in index[GPP==1]:
 */
        }
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

        /* "GBM.pyx":734
 *                 for k in index[GSC==1]:
 *                     plt.plot(points[k][0],points[k][1],".",color="m")
 *                 for k in index[GPP==1]:             # <<<<<<<<<<<<<<
 *                     plt.plot(points[k][0],points[k][1],"r.")
 *                 for k in index[GDS==1]:
 */
        __pyx_t_15 = PyObject_RichCompare(((PyObject *)__pyx_v_GPP), __pyx_int_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_15); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 734, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_index), __pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 734, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
          __pyx_t_15 = __pyx_t_1; __Pyx_INCREF(__pyx_t_15); __pyx_t_31 = 0;
          __pyx_t_40 = NULL;
        } else {
          __pyx_t_31 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 734, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_40 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_40)) __PYX_ERR(0, 734, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        for (;;) {
          if (likely(!__pyx_t_40)) {
            if (likely(PyList_CheckExact(__pyx_t_15))) {
              if (__pyx_t_31 >= PyList_GET_SIZE(__pyx_t_15)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_1 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_31); __Pyx_INCREF(__pyx_t_1); __pyx_t_31++; if (unlikely(0 < 0)) __PYX_ERR(0, 734, __pyx_L1_error)
              #else
              __pyx_t_1 = PySequence_ITEM(__pyx_t_15, __pyx_t_31); __pyx_t_31++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 734, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              #endif
            } else {
              if (__pyx_t_31 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_31); __Pyx_INCREF(__pyx_t_1); __pyx_t_31++; if (unlikely(0 < 0)) __PYX_ERR(0, 734, __pyx_L1_error)
              #else
              __pyx_t_1 = PySequence_ITEM(__pyx_t_15, __pyx_t_31); __pyx_t_31++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 734, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              #endif
            }
          } else {
            __pyx_t_1 = __pyx_t_40(__pyx_t_15);
            if (unlikely(!__pyx_t_1)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 734, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_1);
          }
          __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 734, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_v_k = __pyx_t_32;

          /* "GBM.pyx":735
 *                     plt.plot(points[k][0],points[k][1],".",color="m")
 *                 for k in index[GPP==1]:
 *                     plt.plot(points[k][0],points[k][1],"r.")             # <<<<<<<<<<<<<<
 *                 for k in index[GDS==1]:
 *                     plt.plot(points[k][0],points[k][1],"y.")
 */
          __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_plt); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 735, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_plot); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 735, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = __Pyx_GetItemInt(((PyObject *)__pyx_v_points), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 735, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_13, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 735, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = __Pyx_GetItemInt(((PyObject *)__pyx_v_points), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 735, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_23 = __Pyx_GetItemInt(__pyx_t_13, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 735, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_23);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = NULL;
          __pyx_t_32 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
            __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_11);
            if (likely(__pyx_t_13)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_11, function);
              __pyx_t_32 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_11)) {
            PyObject *__pyx_temp[4] = {__pyx_t_13, __pyx_t_12, __pyx_t_23, __pyx_kp_u_r_2};
            __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_32, 3+__pyx_t_32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 735, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
            PyObject *__pyx_temp[4] = {__pyx_t_13, __pyx_t_12, __pyx_t_23, __pyx_kp_u_r_2};
            __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_32, 3+__pyx_t_32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 735, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
          } else
          #endif
          {
            __pyx_t_10 = PyTuple_New(3+__pyx_t_32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 735, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            if (__pyx_t_13) {
              __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_13); __pyx_t_13 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_12);
            PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_32, __pyx_t_12);
            __Pyx_GIVEREF(__pyx_t_23);
            PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_32, __pyx_t_23);
            __Pyx_INCREF(__pyx_kp_u_r_2);
            __Pyx_GIVEREF(__pyx_kp_u_r_2);
            PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_32, __pyx_kp_u_r_2);
            __pyx_t_12 = 0;
            __pyx_t_23 = 0;
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 735, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          }
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "GBM.pyx":734
 *                 for k in index[GSC==1]:
 *                     plt.plot(points[k][0],points[k][1],".",color="m")
 *                 for k in index[GPP==1]:             # <<<<<<<<<<<<<<
 *                     plt.plot(points[k][0],points[k][1],"r.")
 *                 for k in index[GDS==1]:
 */
        }
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

        /* "GBM.pyx":736
 *                 for k in index[GPP==1]:
 *                     plt.plot(points[k][0],points[k][1],"r.")
 *                 for k in index[GDS==1]:             # <<<<<<<<<<<<<<
 *                     plt.plot(points[k][0],points[k][1],"y.")
 *                 for k in index[Alive > 0]:
 */
        __pyx_t_15 = PyObject_RichCompare(((PyObject *)__pyx_v_GDS), __pyx_int_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_15); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 736, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_index), __pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 736, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
          __pyx_t_15 = __pyx_t_1; __Pyx_INCREF(__pyx_t_15); __pyx_t_31 = 0;
          __pyx_t_40 = NULL;
        } else {
          __pyx_t_31 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 736, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_40 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_40)) __PYX_ERR(0, 736, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        for (;;) {
          if (likely(!__pyx_t_40)) {
            if (likely(PyList_CheckExact(__pyx_t_15))) {
              if (__pyx_t_31 >= PyList_GET_SIZE(__pyx_t_15)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_1 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_31); __Pyx_INCREF(__pyx_t_1); __pyx_t_31++; if (unlikely(0 < 0)) __PYX_ERR(0, 736, __pyx_L1_error)
              #else
              __pyx_t_1 = PySequence_ITEM(__pyx_t_15, __pyx_t_31); __pyx_t_31++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 736, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              #endif
            } else {
              if (__pyx_t_31 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_31); __Pyx_INCREF(__pyx_t_1); __pyx_t_31++; if (unlikely(0 < 0)) __PYX_ERR(0, 736, __pyx_L1_error)
              #else
              __pyx_t_1 = PySequence_ITEM(__pyx_t_15, __pyx_t_31); __pyx_t_31++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 736, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              #endif
            }
          } else {
            __pyx_t_1 = __pyx_t_40(__pyx_t_15);
            if (unlikely(!__pyx_t_1)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 736, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_1);
          }
          __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 736, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_v_k = __pyx_t_32;

          /* "GBM.pyx":737
 *                     plt.plot(points[k][0],points[k][1],"r.")
 *                 for k in index[GDS==1]:
 *                     plt.plot(points[k][0],points[k][1],"y.")             # <<<<<<<<<<<<<<
 *                 for k in index[Alive > 0]:
 *                     if Cell_pop[k] > 1:
 */
          __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_plt); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 737, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_plot); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 737, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_GetItemInt(((PyObject *)__pyx_v_points), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 737, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_23 = __Pyx_GetItemInt(__pyx_t_11, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 737, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_23);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_GetItemInt(((PyObject *)__pyx_v_points), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 737, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_11, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 737, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = NULL;
          __pyx_t_32 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
              __pyx_t_32 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_10)) {
            PyObject *__pyx_temp[4] = {__pyx_t_11, __pyx_t_23, __pyx_t_12, __pyx_kp_u_y_2};
            __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_32, 3+__pyx_t_32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 737, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
            PyObject *__pyx_temp[4] = {__pyx_t_11, __pyx_t_23, __pyx_t_12, __pyx_kp_u_y_2};
            __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_32, 3+__pyx_t_32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 737, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          } else
          #endif
          {
            __pyx_t_13 = PyTuple_New(3+__pyx_t_32); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 737, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            if (__pyx_t_11) {
              __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_11); __pyx_t_11 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_23);
            PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_32, __pyx_t_23);
            __Pyx_GIVEREF(__pyx_t_12);
            PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_32, __pyx_t_12);
            __Pyx_INCREF(__pyx_kp_u_y_2);
            __Pyx_GIVEREF(__pyx_kp_u_y_2);
            PyTuple_SET_ITEM(__pyx_t_13, 2+__pyx_t_32, __pyx_kp_u_y_2);
            __pyx_t_23 = 0;
            __pyx_t_12 = 0;
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 737, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          }
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "GBM.pyx":736
 *                 for k in index[GPP==1]:
 *                     plt.plot(points[k][0],points[k][1],"r.")
 *                 for k in index[GDS==1]:             # <<<<<<<<<<<<<<
 *                     plt.plot(points[k][0],points[k][1],"y.")
 *                 for k in index[Alive > 0]:
 */
        }
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

        /* "GBM.pyx":738
 *                 for k in index[GDS==1]:
 *                     plt.plot(points[k][0],points[k][1],"y.")
 *                 for k in index[Alive > 0]:             # <<<<<<<<<<<<<<
 *                     if Cell_pop[k] > 1:
 *                         plt.plot(points[k][0],points[k][1],".",color="blue")
 */
        __pyx_t_15 = PyObject_RichCompare(((PyObject *)__pyx_v_Alive), __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_15); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 738, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_index), __pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 738, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
          __pyx_t_15 = __pyx_t_1; __Pyx_INCREF(__pyx_t_15); __pyx_t_31 = 0;
          __pyx_t_40 = NULL;
        } else {
          __pyx_t_31 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 738, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_40 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_40)) __PYX_ERR(0, 738, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        for (;;) {
          if (likely(!__pyx_t_40)) {
            if (likely(PyList_CheckExact(__pyx_t_15))) {
              if (__pyx_t_31 >= PyList_GET_SIZE(__pyx_t_15)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_1 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_31); __Pyx_INCREF(__pyx_t_1); __pyx_t_31++; if (unlikely(0 < 0)) __PYX_ERR(0, 738, __pyx_L1_error)
              #else
              __pyx_t_1 = PySequence_ITEM(__pyx_t_15, __pyx_t_31); __pyx_t_31++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 738, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              #endif
            } else {
              if (__pyx_t_31 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_31); __Pyx_INCREF(__pyx_t_1); __pyx_t_31++; if (unlikely(0 < 0)) __PYX_ERR(0, 738, __pyx_L1_error)
              #else
              __pyx_t_1 = PySequence_ITEM(__pyx_t_15, __pyx_t_31); __pyx_t_31++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 738, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              #endif
            }
          } else {
            __pyx_t_1 = __pyx_t_40(__pyx_t_15);
            if (unlikely(!__pyx_t_1)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 738, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_1);
          }
          __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 738, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_v_k = __pyx_t_32;

          /* "GBM.pyx":739
 *                     plt.plot(points[k][0],points[k][1],"y.")
 *                 for k in index[Alive > 0]:
 *                     if Cell_pop[k] > 1:             # <<<<<<<<<<<<<<
 *                         plt.plot(points[k][0],points[k][1],".",color="blue")
 *                 plt.xlabel(r'$\mathrm{x\, lattice \, position}$',fontsize=16)
 */
          __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_Cell_pop), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 739, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_10 = PyObject_RichCompare(__pyx_t_1, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 739, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_28 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_28 < 0)) __PYX_ERR(0, 739, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (__pyx_t_28) {

            /* "GBM.pyx":740
 *                 for k in index[Alive > 0]:
 *                     if Cell_pop[k] > 1:
 *                         plt.plot(points[k][0],points[k][1],".",color="blue")             # <<<<<<<<<<<<<<
 *                 plt.xlabel(r'$\mathrm{x\, lattice \, position}$',fontsize=16)
 *                 plt.ylabel(r"$\mathrm{y\, lattice \, position}$",fontsize=16)
 */
            __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_plt); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 740, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_plot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 740, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_10 = __Pyx_GetItemInt(((PyObject *)__pyx_v_points), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 740, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_13 = __Pyx_GetItemInt(__pyx_t_10, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 740, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_10 = __Pyx_GetItemInt(((PyObject *)__pyx_v_points), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 740, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 740, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 740, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_GIVEREF(__pyx_t_13);
            PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_13);
            __Pyx_GIVEREF(__pyx_t_12);
            PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_12);
            __Pyx_INCREF(__pyx_kp_u__26);
            __Pyx_GIVEREF(__pyx_kp_u__26);
            PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u__26);
            __pyx_t_13 = 0;
            __pyx_t_12 = 0;
            __pyx_t_12 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 740, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_color, __pyx_n_u_blue) < 0) __PYX_ERR(0, 740, __pyx_L1_error)
            __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 740, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

            /* "GBM.pyx":739
 *                     plt.plot(points[k][0],points[k][1],"y.")
 *                 for k in index[Alive > 0]:
 *                     if Cell_pop[k] > 1:             # <<<<<<<<<<<<<<
 *                         plt.plot(points[k][0],points[k][1],".",color="blue")
 *                 plt.xlabel(r'$\mathrm{x\, lattice \, position}$',fontsize=16)
 */
          }

          /* "GBM.pyx":738
 *                 for k in index[GDS==1]:
 *                     plt.plot(points[k][0],points[k][1],"y.")
 *                 for k in index[Alive > 0]:             # <<<<<<<<<<<<<<
 *                     if Cell_pop[k] > 1:
 *                         plt.plot(points[k][0],points[k][1],".",color="blue")
 */
        }
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

        /* "GBM.pyx":741
 *                     if Cell_pop[k] > 1:
 *                         plt.plot(points[k][0],points[k][1],".",color="blue")
 *                 plt.xlabel(r'$\mathrm{x\, lattice \, position}$',fontsize=16)             # <<<<<<<<<<<<<<
 *                 plt.ylabel(r"$\mathrm{y\, lattice \, position}$",fontsize=16)
 *                 plt.xticks(size=16)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_plt); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 741, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_xlabel); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 741, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 741, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_fontsize, __pyx_int_16) < 0) __PYX_ERR(0, 741, __pyx_L1_error)
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_tuple__27, __pyx_t_15); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 741, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "GBM.pyx":742
 *                         plt.plot(points[k][0],points[k][1],".",color="blue")
 *                 plt.xlabel(r'$\mathrm{x\, lattice \, position}$',fontsize=16)
 *                 plt.ylabel(r"$\mathrm{y\, lattice \, position}$",fontsize=16)             # <<<<<<<<<<<<<<
 *                 plt.xticks(size=16)
 *                 plt.yticks(size=16)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_plt); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 742, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_ylabel); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 742, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 742, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_fontsize, __pyx_int_16) < 0) __PYX_ERR(0, 742, __pyx_L1_error)
        __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_tuple__28, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 742, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

        /* "GBM.pyx":743
 *                 plt.xlabel(r'$\mathrm{x\, lattice \, position}$',fontsize=16)
 *                 plt.ylabel(r"$\mathrm{y\, lattice \, position}$",fontsize=16)
 *                 plt.xticks(size=16)             # <<<<<<<<<<<<<<
 *                 plt.yticks(size=16)
 *                 plt.gcf().subplots_adjust(bottom=0.18)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_plt); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 743, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_xticks); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 743, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 743, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_size, __pyx_int_16) < 0) __PYX_ERR(0, 743, __pyx_L1_error)
        __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_empty_tuple, __pyx_t_13); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 743, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

        /* "GBM.pyx":744
 *                 plt.ylabel(r"$\mathrm{y\, lattice \, position}$",fontsize=16)
 *                 plt.xticks(size=16)
 *                 plt.yticks(size=16)             # <<<<<<<<<<<<<<
 *                 plt.gcf().subplots_adjust(bottom=0.18)
 *                 plt.gcf().subplots_adjust(left=0.18)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_plt); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 744, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_yticks); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 744, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 744, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_size, __pyx_int_16) < 0) __PYX_ERR(0, 744, __pyx_L1_error)
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_empty_tuple, __pyx_t_15); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 744, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "GBM.pyx":745
 *                 plt.xticks(size=16)
 *                 plt.yticks(size=16)
 *                 plt.gcf().subplots_adjust(bottom=0.18)             # <<<<<<<<<<<<<<
 *                 plt.gcf().subplots_adjust(left=0.18)
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_plt); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 745, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_gcf); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 745, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_15)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_15);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
          }
        }
        __pyx_t_12 = (__pyx_t_15) ? __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_15) : __Pyx_PyObject_CallNoArg(__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 745, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_subplots_adjust); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 745, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 745, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_bottom, __pyx_float_0_18) < 0) __PYX_ERR(0, 745, __pyx_L1_error)
        __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_empty_tuple, __pyx_t_12); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 745, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

        /* "GBM.pyx":746
 *                 plt.yticks(size=16)
 *                 plt.gcf().subplots_adjust(bottom=0.18)
 *                 plt.gcf().subplots_adjust(left=0.18)             # <<<<<<<<<<<<<<
 * 
 *                 plt.savefig(cwd+"/"+store+"/Snapshot_"+exten+".png", bbox_inches='tight')
 */
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_plt); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_gcf); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
          }
        }
        __pyx_t_15 = (__pyx_t_12) ? __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_12) : __Pyx_PyObject_CallNoArg(__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_subplots_adjust); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_left, __pyx_float_0_18) < 0) __PYX_ERR(0, 746, __pyx_L1_error)
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_empty_tuple, __pyx_t_15); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "GBM.pyx":748
 *                 plt.gcf().subplots_adjust(left=0.18)
 * 
 *                 plt.savefig(cwd+"/"+store+"/Snapshot_"+exten+".png", bbox_inches='tight')             # <<<<<<<<<<<<<<
 * 
 *             print("Cell population of %d evolves. %d are modelled individually. In addition, %d are dead. Total population: %d." % (np.sum(Alive[Alive>=1]),len(Alive[mask]),np.sum(Dead[Dead>=1]),np.sum(Cell_pop)))
 */
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_plt); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_savefig); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyUnicode_ConcatSafe(__pyx_v_cwd, __pyx_kp_u__23); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = __Pyx_PyUnicode_ConcatSafe(__pyx_t_12, __pyx_v_store); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyUnicode_Concat(__pyx_t_13, __pyx_kp_u_Snapshot); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = __Pyx_PyUnicode_Concat(__pyx_t_12, __pyx_v_exten); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyUnicode_Concat(__pyx_t_13, __pyx_kp_u_png); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_12);
        __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_bbox_inches, __pyx_n_u_tight) < 0) __PYX_ERR(0, 748, __pyx_L1_error)
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_13, __pyx_t_12); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "GBM.pyx":726
 *             exten = "%05d" % i
 * 
 *             if myplots:             # <<<<<<<<<<<<<<
 *                 plt.figure(1)
 *                 plt.clf()
 */
      }

      /* "GBM.pyx":750
 *                 plt.savefig(cwd+"/"+store+"/Snapshot_"+exten+".png", bbox_inches='tight')
 * 
 *             print("Cell population of %d evolves. %d are modelled individually. In addition, %d are dead. Total population: %d." % (np.sum(Alive[Alive>=1]),len(Alive[mask]),np.sum(Dead[Dead>=1]),np.sum(Cell_pop)))             # <<<<<<<<<<<<<<
 *             print("Time-step: %d --- %s seconds ---" % (i , time.time() - start_time))
 *             name = cwd+"/"+store+"/Data_"+exten+".h5"
 */
      __pyx_t_10 = PyTuple_New(9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_31 = 0;
      __pyx_t_41 = 127;
      __Pyx_INCREF(__pyx_kp_u_Cell_population_of);
      __pyx_t_31 += 19;
      __Pyx_GIVEREF(__pyx_kp_u_Cell_population_of);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u_Cell_population_of);
      __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_sum); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = PyObject_RichCompare(((PyObject *)__pyx_v_Alive), __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 750, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Alive), __pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_15);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_15, function);
        }
      }
      __pyx_t_12 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_13, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_1);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_t_12), __pyx_n_u_d); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_41 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) > __pyx_t_41) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) : __pyx_t_41;
      __pyx_t_31 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_15);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_15);
      __pyx_t_15 = 0;
      __Pyx_INCREF(__pyx_kp_u_evolves);
      __pyx_t_31 += 10;
      __Pyx_GIVEREF(__pyx_kp_u_evolves);
      PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u_evolves);
      __pyx_t_15 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Alive), ((PyObject *)__pyx_v_mask)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_35 = PyObject_Length(__pyx_t_15); if (unlikely(__pyx_t_35 == ((Py_ssize_t)-1))) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_35, 0, ' ', 'd'); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_31 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_15);
      PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_15);
      __pyx_t_15 = 0;
      __Pyx_INCREF(__pyx_kp_u_are_modelled_individually_In_ad);
      __pyx_t_31 += 41;
      __Pyx_GIVEREF(__pyx_kp_u_are_modelled_individually_In_ad);
      PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_kp_u_are_modelled_individually_In_ad);
      __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_sum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = PyObject_RichCompare(((PyObject *)__pyx_v_Dead), __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 750, __pyx_L1_error)
      __pyx_t_13 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_Dead), __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_15 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_12, __pyx_t_13) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_13);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_t_15), __pyx_n_u_d); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_41 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_41) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_41;
      __pyx_t_31 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_10, 5, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_INCREF(__pyx_kp_u_are_dead_Total_population);
      __pyx_t_31 += 29;
      __Pyx_GIVEREF(__pyx_kp_u_are_dead_Total_population);
      PyTuple_SET_ITEM(__pyx_t_10, 6, __pyx_kp_u_are_dead_Total_population);
      __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_np); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_sum); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
        __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_13);
        if (likely(__pyx_t_15)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_15);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_13, function);
        }
      }
      __pyx_t_1 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_15, ((PyObject *)__pyx_v_Cell_pop)) : __Pyx_PyObject_CallOneArg(__pyx_t_13, ((PyObject *)__pyx_v_Cell_pop));
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_t_1), __pyx_n_u_d); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_41 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) > __pyx_t_41) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) : __pyx_t_41;
      __pyx_t_31 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_10, 7, __pyx_t_13);
      __pyx_t_13 = 0;
      __Pyx_INCREF(__pyx_kp_u__26);
      __pyx_t_31 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__26);
      PyTuple_SET_ITEM(__pyx_t_10, 8, __pyx_kp_u__26);
      __pyx_t_13 = __Pyx_PyUnicode_Join(__pyx_t_10, 9, __pyx_t_31, __pyx_t_41); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_13); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "GBM.pyx":751
 * 
 *             print("Cell population of %d evolves. %d are modelled individually. In addition, %d are dead. Total population: %d." % (np.sum(Alive[Alive>=1]),len(Alive[mask]),np.sum(Dead[Dead>=1]),np.sum(Cell_pop)))
 *             print("Time-step: %d --- %s seconds ---" % (i , time.time() - start_time))             # <<<<<<<<<<<<<<
 *             name = cwd+"/"+store+"/Data_"+exten+".h5"
 *             Ox_irr = interLN((mesh.x,mesh.y),np.asarray(oxygen),(Xs_r,Ys_r))
 */
      __pyx_t_10 = PyTuple_New(5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 751, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_31 = 0;
      __pyx_t_41 = 127;
      __Pyx_INCREF(__pyx_kp_u_Time_step);
      __pyx_t_31 += 11;
      __Pyx_GIVEREF(__pyx_kp_u_Time_step);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_u_Time_step);
      __pyx_t_13 = __Pyx_PyUnicode_From_int(__pyx_v_i, 0, ' ', 'd'); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 751, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_31 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_13);
      __pyx_t_13 = 0;
      __Pyx_INCREF(__pyx_kp_u__29);
      __pyx_t_31 += 5;
      __Pyx_GIVEREF(__pyx_kp_u__29);
      PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_kp_u__29);
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 751, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_time); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 751, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_15);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_15, function);
        }
      }
      __pyx_t_13 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 751, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = PyFloat_FromDouble(__pyx_v_start_time); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 751, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_1 = PyNumber_Subtract(__pyx_t_13, __pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 751, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_t_1), __pyx_empty_unicode); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 751, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_41 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) > __pyx_t_41) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) : __pyx_t_41;
      __pyx_t_31 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_15);
      PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_15);
      __pyx_t_15 = 0;
      __Pyx_INCREF(__pyx_kp_u_seconds);
      __pyx_t_31 += 12;
      __Pyx_GIVEREF(__pyx_kp_u_seconds);
      PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_kp_u_seconds);
      __pyx_t_15 = __Pyx_PyUnicode_Join(__pyx_t_10, 5, __pyx_t_31, __pyx_t_41); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 751, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_15); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 751, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "GBM.pyx":752
 *             print("Cell population of %d evolves. %d are modelled individually. In addition, %d are dead. Total population: %d." % (np.sum(Alive[Alive>=1]),len(Alive[mask]),np.sum(Dead[Dead>=1]),np.sum(Cell_pop)))
 *             print("Time-step: %d --- %s seconds ---" % (i , time.time() - start_time))
 *             name = cwd+"/"+store+"/Data_"+exten+".h5"             # <<<<<<<<<<<<<<
 *             Ox_irr = interLN((mesh.x,mesh.y),np.asarray(oxygen),(Xs_r,Ys_r))
 *             write_snapshot(i, name, Input, Ox_irr, points, pl, phs, Cell_pop, GSC, GPP, GDS, Alive, Dead, Rim, Discarded)
 */
      __pyx_t_10 = __Pyx_PyUnicode_ConcatSafe(__pyx_v_cwd, __pyx_kp_u__23); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_15 = __Pyx_PyUnicode_ConcatSafe(__pyx_t_10, __pyx_v_store); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyUnicode_Concat(__pyx_t_15, __pyx_kp_u_Data); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = __Pyx_PyUnicode_Concat(__pyx_t_10, __pyx_v_exten); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyUnicode_Concat(__pyx_t_15, __pyx_kp_u_h5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF_SET(__pyx_v_name, ((PyObject*)__pyx_t_10));
      __pyx_t_10 = 0;

      /* "GBM.pyx":753
 *             print("Time-step: %d --- %s seconds ---" % (i , time.time() - start_time))
 *             name = cwd+"/"+store+"/Data_"+exten+".h5"
 *             Ox_irr = interLN((mesh.x,mesh.y),np.asarray(oxygen),(Xs_r,Ys_r))             # <<<<<<<<<<<<<<
 *             write_snapshot(i, name, Input, Ox_irr, points, pl, phs, Cell_pop, GSC, GPP, GDS, Alive, Dead, Rim, Discarded)
 * 
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_mesh, __pyx_n_s_x); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_mesh, __pyx_n_s_y); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_15);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_15);
      __pyx_t_10 = 0;
      __pyx_t_15 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_asarray); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_13);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_13, function);
        }
      }
      __pyx_t_15 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_10, __pyx_v_oxygen) : __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_v_oxygen);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (!(likely(((__pyx_t_15) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_15, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 753, __pyx_L1_error)
      if (unlikely(!__pyx_v_Xs_r)) { __Pyx_RaiseUnboundLocalError("Xs_r"); __PYX_ERR(0, 753, __pyx_L1_error) }
      if (unlikely(!__pyx_v_Ys_r)) { __Pyx_RaiseUnboundLocalError("Ys_r"); __PYX_ERR(0, 753, __pyx_L1_error) }
      __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_INCREF(__pyx_v_Xs_r);
      __Pyx_GIVEREF(__pyx_v_Xs_r);
      PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_v_Xs_r);
      __Pyx_INCREF(__pyx_v_Ys_r);
      __Pyx_GIVEREF(__pyx_v_Ys_r);
      PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_v_Ys_r);
      __pyx_t_10 = ((PyObject *)__pyx_f_3GBM_interLN(__pyx_t_1, ((PyArrayObject *)__pyx_t_15), __pyx_t_13, 0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF_SET(__pyx_v_Ox_irr, ((PyArrayObject *)__pyx_t_10));
      __pyx_t_10 = 0;

      /* "GBM.pyx":754
 *             name = cwd+"/"+store+"/Data_"+exten+".h5"
 *             Ox_irr = interLN((mesh.x,mesh.y),np.asarray(oxygen),(Xs_r,Ys_r))
 *             write_snapshot(i, name, Input, Ox_irr, points, pl, phs, Cell_pop, GSC, GPP, GDS, Alive, Dead, Rim, Discarded)             # <<<<<<<<<<<<<<
 * 
 *             if myplots:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_write_snapshot); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 754, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 754, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_1 = NULL;
      __pyx_t_32 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_13);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_13, function);
          __pyx_t_32 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_13)) {
        PyObject *__pyx_temp[16] = {__pyx_t_1, __pyx_t_15, __pyx_v_name, __pyx_v_Input, ((PyObject *)__pyx_v_Ox_irr), ((PyObject *)__pyx_v_points), __pyx_v_pl, __pyx_v_phs, ((PyObject *)__pyx_v_Cell_pop), ((PyObject *)__pyx_v_GSC), ((PyObject *)__pyx_v_GPP), ((PyObject *)__pyx_v_GDS), ((PyObject *)__pyx_v_Alive), ((PyObject *)__pyx_v_Dead), ((PyObject *)__pyx_v_Rim), __pyx_v_Discarded};
        __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_32, 15+__pyx_t_32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 754, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
        PyObject *__pyx_temp[16] = {__pyx_t_1, __pyx_t_15, __pyx_v_name, __pyx_v_Input, ((PyObject *)__pyx_v_Ox_irr), ((PyObject *)__pyx_v_points), __pyx_v_pl, __pyx_v_phs, ((PyObject *)__pyx_v_Cell_pop), ((PyObject *)__pyx_v_GSC), ((PyObject *)__pyx_v_GPP), ((PyObject *)__pyx_v_GDS), ((PyObject *)__pyx_v_Alive), ((PyObject *)__pyx_v_Dead), ((PyObject *)__pyx_v_Rim), __pyx_v_Discarded};
        __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_32, 15+__pyx_t_32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 754, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      } else
      #endif
      {
        __pyx_t_12 = PyTuple_New(15+__pyx_t_32); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 754, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (__pyx_t_1) {
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_1); __pyx_t_1 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_15);
        PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_32, __pyx_t_15);
        __Pyx_INCREF(__pyx_v_name);
        __Pyx_GIVEREF(__pyx_v_name);
        PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_32, __pyx_v_name);
        __Pyx_INCREF(__pyx_v_Input);
        __Pyx_GIVEREF(__pyx_v_Input);
        PyTuple_SET_ITEM(__pyx_t_12, 2+__pyx_t_32, __pyx_v_Input);
        __Pyx_INCREF(((PyObject *)__pyx_v_Ox_irr));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_Ox_irr));
        PyTuple_SET_ITEM(__pyx_t_12, 3+__pyx_t_32, ((PyObject *)__pyx_v_Ox_irr));
        __Pyx_INCREF(((PyObject *)__pyx_v_points));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
        PyTuple_SET_ITEM(__pyx_t_12, 4+__pyx_t_32, ((PyObject *)__pyx_v_points));
        __Pyx_INCREF(__pyx_v_pl);
        __Pyx_GIVEREF(__pyx_v_pl);
        PyTuple_SET_ITEM(__pyx_t_12, 5+__pyx_t_32, __pyx_v_pl);
        __Pyx_INCREF(__pyx_v_phs);
        __Pyx_GIVEREF(__pyx_v_phs);
        PyTuple_SET_ITEM(__pyx_t_12, 6+__pyx_t_32, __pyx_v_phs);
        __Pyx_INCREF(((PyObject *)__pyx_v_Cell_pop));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_Cell_pop));
        PyTuple_SET_ITEM(__pyx_t_12, 7+__pyx_t_32, ((PyObject *)__pyx_v_Cell_pop));
        __Pyx_INCREF(((PyObject *)__pyx_v_GSC));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_GSC));
        PyTuple_SET_ITEM(__pyx_t_12, 8+__pyx_t_32, ((PyObject *)__pyx_v_GSC));
        __Pyx_INCREF(((PyObject *)__pyx_v_GPP));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_GPP));
        PyTuple_SET_ITEM(__pyx_t_12, 9+__pyx_t_32, ((PyObject *)__pyx_v_GPP));
        __Pyx_INCREF(((PyObject *)__pyx_v_GDS));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_GDS));
        PyTuple_SET_ITEM(__pyx_t_12, 10+__pyx_t_32, ((PyObject *)__pyx_v_GDS));
        __Pyx_INCREF(((PyObject *)__pyx_v_Alive));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_Alive));
        PyTuple_SET_ITEM(__pyx_t_12, 11+__pyx_t_32, ((PyObject *)__pyx_v_Alive));
        __Pyx_INCREF(((PyObject *)__pyx_v_Dead));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_Dead));
        PyTuple_SET_ITEM(__pyx_t_12, 12+__pyx_t_32, ((PyObject *)__pyx_v_Dead));
        __Pyx_INCREF(((PyObject *)__pyx_v_Rim));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_Rim));
        PyTuple_SET_ITEM(__pyx_t_12, 13+__pyx_t_32, ((PyObject *)__pyx_v_Rim));
        __Pyx_INCREF(__pyx_v_Discarded);
        __Pyx_GIVEREF(__pyx_v_Discarded);
        PyTuple_SET_ITEM(__pyx_t_12, 14+__pyx_t_32, __pyx_v_Discarded);
        __pyx_t_15 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_12, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 754, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "GBM.pyx":756
 *             write_snapshot(i, name, Input, Ox_irr, points, pl, phs, Cell_pop, GSC, GPP, GDS, Alive, Dead, Rim, Discarded)
 * 
 *             if myplots:             # <<<<<<<<<<<<<<
 *                 plt.figure(2)
 *                 plt.semilogy(GSC_tot,color="m",linestyle="--",label=r"$\mathrm{GSC}$")
 */
      __pyx_t_28 = (__pyx_v_myplots != 0);
      if (__pyx_t_28) {

        /* "GBM.pyx":757
 * 
 *             if myplots:
 *                 plt.figure(2)             # <<<<<<<<<<<<<<
 *                 plt.semilogy(GSC_tot,color="m",linestyle="--",label=r"$\mathrm{GSC}$")
 *                 plt.semilogy(GPP_tot,color="r",linestyle="-.",label=r"$\mathrm{GPP}$")
 */
        __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_plt); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 757, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_figure); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 757, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
          }
        }
        __pyx_t_10 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_13, __pyx_int_2) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_int_2);
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 757, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "GBM.pyx":758
 *             if myplots:
 *                 plt.figure(2)
 *                 plt.semilogy(GSC_tot,color="m",linestyle="--",label=r"$\mathrm{GSC}$")             # <<<<<<<<<<<<<<
 *                 plt.semilogy(GPP_tot,color="r",linestyle="-.",label=r"$\mathrm{GPP}$")
 *                 plt.semilogy(GDS_tot,color="y",linestyle="-",label=r"$\mathrm{GDS}$")
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_plt); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 758, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_semilogy); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 758, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_v_GSC_tot)) { __Pyx_RaiseUnboundLocalError("GSC_tot"); __PYX_ERR(0, 758, __pyx_L1_error) }
        __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 758, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_v_GSC_tot);
        __Pyx_GIVEREF(__pyx_v_GSC_tot);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_GSC_tot);
        __pyx_t_13 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 758, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_color, __pyx_n_u_m) < 0) __PYX_ERR(0, 758, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_linestyle, __pyx_kp_u__30) < 0) __PYX_ERR(0, 758, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_label, __pyx_kp_u_mathrm_GSC) < 0) __PYX_ERR(0, 758, __pyx_L1_error)
        __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_10, __pyx_t_13); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 758, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

        /* "GBM.pyx":759
 *                 plt.figure(2)
 *                 plt.semilogy(GSC_tot,color="m",linestyle="--",label=r"$\mathrm{GSC}$")
 *                 plt.semilogy(GPP_tot,color="r",linestyle="-.",label=r"$\mathrm{GPP}$")             # <<<<<<<<<<<<<<
 *                 plt.semilogy(GDS_tot,color="y",linestyle="-",label=r"$\mathrm{GDS}$")
 *                 plt.semilogy(np.asarray(GSC_tot)+np.asarray(GPP_tot)+np.asarray(GDS_tot),color="g",linestyle="-",label=r"$\mathrm{Alive}$")
 */
        __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_plt); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 759, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_semilogy); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 759, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (unlikely(!__pyx_v_GPP_tot)) { __Pyx_RaiseUnboundLocalError("GPP_tot"); __PYX_ERR(0, 759, __pyx_L1_error) }
        __pyx_t_15 = PyTuple_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 759, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_INCREF(__pyx_v_GPP_tot);
        __Pyx_GIVEREF(__pyx_v_GPP_tot);
        PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_v_GPP_tot);
        __pyx_t_10 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 759, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_color, __pyx_n_u_r) < 0) __PYX_ERR(0, 759, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_linestyle, __pyx_kp_u__31) < 0) __PYX_ERR(0, 759, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_label, __pyx_kp_u_mathrm_GPP) < 0) __PYX_ERR(0, 759, __pyx_L1_error)
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_15, __pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 759, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "GBM.pyx":760
 *                 plt.semilogy(GSC_tot,color="m",linestyle="--",label=r"$\mathrm{GSC}$")
 *                 plt.semilogy(GPP_tot,color="r",linestyle="-.",label=r"$\mathrm{GPP}$")
 *                 plt.semilogy(GDS_tot,color="y",linestyle="-",label=r"$\mathrm{GDS}$")             # <<<<<<<<<<<<<<
 *                 plt.semilogy(np.asarray(GSC_tot)+np.asarray(GPP_tot)+np.asarray(GDS_tot),color="g",linestyle="-",label=r"$\mathrm{Alive}$")
 *                 plt.semilogy(Alive_single,color="orange",linestyle="--",label=r"$\mathrm{Alive, \, Rim}$",dashes=(5, 5))
 */
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_plt); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 760, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_semilogy); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 760, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_v_GDS_tot)) { __Pyx_RaiseUnboundLocalError("GDS_tot"); __PYX_ERR(0, 760, __pyx_L1_error) }
        __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 760, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_INCREF(__pyx_v_GDS_tot);
        __Pyx_GIVEREF(__pyx_v_GDS_tot);
        PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_GDS_tot);
        __pyx_t_15 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 760, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_color, __pyx_n_u_y) < 0) __PYX_ERR(0, 760, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_linestyle, __pyx_kp_u__32) < 0) __PYX_ERR(0, 760, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_label, __pyx_kp_u_mathrm_GDS) < 0) __PYX_ERR(0, 760, __pyx_L1_error)
        __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_12, __pyx_t_15); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 760, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

        /* "GBM.pyx":761
 *                 plt.semilogy(GPP_tot,color="r",linestyle="-.",label=r"$\mathrm{GPP}$")
 *                 plt.semilogy(GDS_tot,color="y",linestyle="-",label=r"$\mathrm{GDS}$")
 *                 plt.semilogy(np.asarray(GSC_tot)+np.asarray(GPP_tot)+np.asarray(GDS_tot),color="g",linestyle="-",label=r"$\mathrm{Alive}$")             # <<<<<<<<<<<<<<
 *                 plt.semilogy(Alive_single,color="orange",linestyle="--",label=r"$\mathrm{Alive, \, Rim}$",dashes=(5, 5))
 *                 plt.semilogy(Dead_tot,color="k",linestyle="-.",label=r"$\mathrm{Dead}$")
 */
        __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_plt); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 761, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_semilogy); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 761, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 761, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_asarray); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 761, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_v_GSC_tot)) { __Pyx_RaiseUnboundLocalError("GSC_tot"); __PYX_ERR(0, 761, __pyx_L1_error) }
        __pyx_t_12 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        __pyx_t_13 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_12, __pyx_v_GSC_tot) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_GSC_tot);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 761, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 761, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 761, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_v_GPP_tot)) { __Pyx_RaiseUnboundLocalError("GPP_tot"); __PYX_ERR(0, 761, __pyx_L1_error) }
        __pyx_t_12 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_10 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_12, __pyx_v_GPP_tot) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_GPP_tot);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 761, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_Add(__pyx_t_13, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 761, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 761, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_asarray); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 761, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_v_GDS_tot)) { __Pyx_RaiseUnboundLocalError("GDS_tot"); __PYX_ERR(0, 761, __pyx_L1_error) }
        __pyx_t_13 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
          }
        }
        __pyx_t_10 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_13, __pyx_v_GDS_tot) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_v_GDS_tot);
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 761, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = PyNumber_Add(__pyx_t_1, __pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 761, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 761, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_12);
        __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 761, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_color, __pyx_n_u_g) < 0) __PYX_ERR(0, 761, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_linestyle, __pyx_kp_u__32) < 0) __PYX_ERR(0, 761, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_label, __pyx_kp_u_mathrm_Alive) < 0) __PYX_ERR(0, 761, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_10, __pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 761, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "GBM.pyx":762
 *                 plt.semilogy(GDS_tot,color="y",linestyle="-",label=r"$\mathrm{GDS}$")
 *                 plt.semilogy(np.asarray(GSC_tot)+np.asarray(GPP_tot)+np.asarray(GDS_tot),color="g",linestyle="-",label=r"$\mathrm{Alive}$")
 *                 plt.semilogy(Alive_single,color="orange",linestyle="--",label=r"$\mathrm{Alive, \, Rim}$",dashes=(5, 5))             # <<<<<<<<<<<<<<
 *                 plt.semilogy(Dead_tot,color="k",linestyle="-.",label=r"$\mathrm{Dead}$")
 *                 if i == tstart+1:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_plt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 762, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_semilogy); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 762, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_v_Alive_single)) { __Pyx_RaiseUnboundLocalError("Alive_single"); __PYX_ERR(0, 762, __pyx_L1_error) }
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 762, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_v_Alive_single);
        __Pyx_GIVEREF(__pyx_v_Alive_single);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_Alive_single);
        __pyx_t_10 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 762, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_color, __pyx_n_u_orange) < 0) __PYX_ERR(0, 762, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_linestyle, __pyx_kp_u__30) < 0) __PYX_ERR(0, 762, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_label, __pyx_kp_u_mathrm_Alive_Rim) < 0) __PYX_ERR(0, 762, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_dashes, __pyx_tuple__33) < 0) __PYX_ERR(0, 762, __pyx_L1_error)
        __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_1, __pyx_t_10); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 762, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

        /* "GBM.pyx":763
 *                 plt.semilogy(np.asarray(GSC_tot)+np.asarray(GPP_tot)+np.asarray(GDS_tot),color="g",linestyle="-",label=r"$\mathrm{Alive}$")
 *                 plt.semilogy(Alive_single,color="orange",linestyle="--",label=r"$\mathrm{Alive, \, Rim}$",dashes=(5, 5))
 *                 plt.semilogy(Dead_tot,color="k",linestyle="-.",label=r"$\mathrm{Dead}$")             # <<<<<<<<<<<<<<
 *                 if i == tstart+1:
 *                     plt.legend(fontsize=16)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_plt); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 763, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_semilogy); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 763, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (unlikely(!__pyx_v_Dead_tot)) { __Pyx_RaiseUnboundLocalError("Dead_tot"); __PYX_ERR(0, 763, __pyx_L1_error) }
        __pyx_t_15 = PyTuple_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 763, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_INCREF(__pyx_v_Dead_tot);
        __Pyx_GIVEREF(__pyx_v_Dead_tot);
        PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_v_Dead_tot);
        __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 763, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_color, __pyx_n_u_k_2) < 0) __PYX_ERR(0, 763, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_linestyle, __pyx_kp_u__31) < 0) __PYX_ERR(0, 763, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_label, __pyx_kp_u_mathrm_Dead) < 0) __PYX_ERR(0, 763, __pyx_L1_error)
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_15, __pyx_t_1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 763, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "GBM.pyx":764
 *                 plt.semilogy(Alive_single,color="orange",linestyle="--",label=r"$\mathrm{Alive, \, Rim}$",dashes=(5, 5))
 *                 plt.semilogy(Dead_tot,color="k",linestyle="-.",label=r"$\mathrm{Dead}$")
 *                 if i == tstart+1:             # <<<<<<<<<<<<<<
 *                     plt.legend(fontsize=16)
 *                 plt.xlabel(r'$t$',fontsize=16)
 */
        __pyx_t_28 = ((__pyx_v_i == (__pyx_v_tstart + 1)) != 0);
        if (__pyx_t_28) {

          /* "GBM.pyx":765
 *                 plt.semilogy(Dead_tot,color="k",linestyle="-.",label=r"$\mathrm{Dead}$")
 *                 if i == tstart+1:
 *                     plt.legend(fontsize=16)             # <<<<<<<<<<<<<<
 *                 plt.xlabel(r'$t$',fontsize=16)
 *                 plt.ylabel(r"$\mathrm{Cell \, number}$",fontsize=16)
 */
          __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_plt); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 765, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_legend); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 765, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_12 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 765, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_fontsize, __pyx_int_16) < 0) __PYX_ERR(0, 765, __pyx_L1_error)
          __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_12); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 765, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

          /* "GBM.pyx":764
 *                 plt.semilogy(Alive_single,color="orange",linestyle="--",label=r"$\mathrm{Alive, \, Rim}$",dashes=(5, 5))
 *                 plt.semilogy(Dead_tot,color="k",linestyle="-.",label=r"$\mathrm{Dead}$")
 *                 if i == tstart+1:             # <<<<<<<<<<<<<<
 *                     plt.legend(fontsize=16)
 *                 plt.xlabel(r'$t$',fontsize=16)
 */
        }

        /* "GBM.pyx":766
 *                 if i == tstart+1:
 *                     plt.legend(fontsize=16)
 *                 plt.xlabel(r'$t$',fontsize=16)             # <<<<<<<<<<<<<<
 *                 plt.ylabel(r"$\mathrm{Cell \, number}$",fontsize=16)
 *                 plt.xticks(size=16)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_plt); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 766, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_xlabel); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 766, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 766, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_fontsize, __pyx_int_16) < 0) __PYX_ERR(0, 766, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_tuple__34, __pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 766, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "GBM.pyx":767
 *                     plt.legend(fontsize=16)
 *                 plt.xlabel(r'$t$',fontsize=16)
 *                 plt.ylabel(r"$\mathrm{Cell \, number}$",fontsize=16)             # <<<<<<<<<<<<<<
 *                 plt.xticks(size=16)
 *                 plt.yticks(size=16)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_plt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 767, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ylabel); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 767, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 767, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_fontsize, __pyx_int_16) < 0) __PYX_ERR(0, 767, __pyx_L1_error)
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_tuple__35, __pyx_t_1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 767, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "GBM.pyx":768
 *                 plt.xlabel(r'$t$',fontsize=16)
 *                 plt.ylabel(r"$\mathrm{Cell \, number}$",fontsize=16)
 *                 plt.xticks(size=16)             # <<<<<<<<<<<<<<
 *                 plt.yticks(size=16)
 *                 plt.gcf().subplots_adjust(bottom=0.18)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_plt); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 768, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_xticks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 768, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 768, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_size, __pyx_int_16) < 0) __PYX_ERR(0, 768, __pyx_L1_error)
        __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_12); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 768, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

        /* "GBM.pyx":769
 *                 plt.ylabel(r"$\mathrm{Cell \, number}$",fontsize=16)
 *                 plt.xticks(size=16)
 *                 plt.yticks(size=16)             # <<<<<<<<<<<<<<
 *                 plt.gcf().subplots_adjust(bottom=0.18)
 *                 plt.gcf().subplots_adjust(left=0.18)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_plt); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 769, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_yticks); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 769, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 769, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_size, __pyx_int_16) < 0) __PYX_ERR(0, 769, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_empty_tuple, __pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 769, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "GBM.pyx":770
 *                 plt.xticks(size=16)
 *                 plt.yticks(size=16)
 *                 plt.gcf().subplots_adjust(bottom=0.18)             # <<<<<<<<<<<<<<
 *                 plt.gcf().subplots_adjust(left=0.18)
 *                 plt.savefig(cwd+"/"+store+"/Population_overview.png",bbox_inches='tight')
 */
        __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_plt); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 770, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_gcf); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 770, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_15)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_15);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
          }
        }
        __pyx_t_1 = (__pyx_t_15) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_15) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 770, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_subplots_adjust); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 770, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 770, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_bottom, __pyx_float_0_18) < 0) __PYX_ERR(0, 770, __pyx_L1_error)
        __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 770, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

        /* "GBM.pyx":771
 *                 plt.yticks(size=16)
 *                 plt.gcf().subplots_adjust(bottom=0.18)
 *                 plt.gcf().subplots_adjust(left=0.18)             # <<<<<<<<<<<<<<
 *                 plt.savefig(cwd+"/"+store+"/Population_overview.png",bbox_inches='tight')
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_plt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 771, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_gcf); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 771, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
          }
        }
        __pyx_t_15 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 771, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_subplots_adjust); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 771, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 771, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_left, __pyx_float_0_18) < 0) __PYX_ERR(0, 771, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_empty_tuple, __pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 771, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "GBM.pyx":772
 *                 plt.gcf().subplots_adjust(bottom=0.18)
 *                 plt.gcf().subplots_adjust(left=0.18)
 *                 plt.savefig(cwd+"/"+store+"/Population_overview.png",bbox_inches='tight')             # <<<<<<<<<<<<<<
 * 
 * #        print("Saving: %s seconds " % (time.time() - t1))
 */
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_plt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 772, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_savefig); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 772, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyUnicode_ConcatSafe(__pyx_v_cwd, __pyx_kp_u__23); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 772, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_12 = __Pyx_PyUnicode_ConcatSafe(__pyx_t_1, __pyx_v_store); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 772, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_t_12, __pyx_kp_u_Population_overview_png); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 772, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 772, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 772, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_bbox_inches, __pyx_n_u_tight) < 0) __PYX_ERR(0, 772, __pyx_L1_error)
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_12, __pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 772, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "GBM.pyx":756
 *             write_snapshot(i, name, Input, Ox_irr, points, pl, phs, Cell_pop, GSC, GPP, GDS, Alive, Dead, Rim, Discarded)
 * 
 *             if myplots:             # <<<<<<<<<<<<<<
 *                 plt.figure(2)
 *                 plt.semilogy(GSC_tot,color="m",linestyle="--",label=r"$\mathrm{GSC}$")
 */
      }

      /* "GBM.pyx":722
 *         ff.close()
 * 
 *         if np.mod(i,SavN) == 0:             # <<<<<<<<<<<<<<
 * 
 *             exten = "%05d" % i
 */
    }
  }

  /* "GBM.pyx":475
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def run_ABM(str Restart, str store, int resx, int resy, int steps, int SavN, double Dox, double lambdaC, double O2_crit, int low, int Dup, double trapped, int Qup, double epsilon, double Pdie, double Pprol, double Pdivi,  double dx, double dy, bint myplots):             # <<<<<<<<<<<<<<
 * 
 *     cdef double start_time = time.time()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_AddTraceback("GBM.run_ABM", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cwd);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_logfile);
  __Pyx_XDECREF(__pyx_v_paramsfile);
  __Pyx_XDECREF((PyObject *)__pyx_v_neigh);
  __Pyx_XDECREF((PyObject *)__pyx_v_index);
  __Pyx_XDECREF((PyObject *)__pyx_v_Cell_pop);
  __Pyx_XDECREF((PyObject *)__pyx_v_GSC);
  __Pyx_XDECREF((PyObject *)__pyx_v_GPP);
  __Pyx_XDECREF((PyObject *)__pyx_v_GDS);
  __Pyx_XDECREF((PyObject *)__pyx_v_Alive);
  __Pyx_XDECREF((PyObject *)__pyx_v_Dead);
  __Pyx_XDECREF((PyObject *)__pyx_v_Rim);
  __Pyx_XDECREF((PyObject *)__pyx_v_points);
  __Pyx_XDECREF((PyObject *)__pyx_v_Ox_irr);
  __Pyx_XDECREF((PyObject *)__pyx_v_Pmove);
  __Pyx_XDECREF((PyObject *)__pyx_v_PDiv);
  __Pyx_XDECREF((PyObject *)__pyx_v_PDeath);
  __Pyx_XDECREF((PyObject *)__pyx_v_free);
  __Pyx_XDECREF((PyObject *)__pyx_v_mask);
  __Pyx_XDECREF(__pyx_v_Discarded);
  __Pyx_XDECREF(__pyx_v_Proliferating);
  __Pyx_XDECREF(__pyx_v_Quiescent);
  __Pyx_XDECREF(__pyx_v_Xs_r);
  __Pyx_XDECREF(__pyx_v_Ys_r);
  __Pyx_XDECREF(__pyx_v_Input);
  __Pyx_XDECREF(__pyx_v_mesh);
  __Pyx_XDECREF(__pyx_v_pl);
  __Pyx_XDECREF(__pyx_v_phs);
  __Pyx_XDECREF(__pyx_v_voronoi_kdtree);
  __Pyx_XDECREF(__pyx_v_tree);
  __Pyx_XDECREF(__pyx_v_Blood_vessel);
  __Pyx_XDECREF(__pyx_v_oxygen);
  __Pyx_XDECREF(__pyx_v_GSC_tot);
  __Pyx_XDECREF(__pyx_v_GPP_tot);
  __Pyx_XDECREF(__pyx_v_GDS_tot);
  __Pyx_XDECREF(__pyx_v_Dead_tot);
  __Pyx_XDECREF(__pyx_v_Alive_single);
  __Pyx_XDECREF(__pyx_v_ff);
  __Pyx_XDECREF(__pyx_v_tri);
  __Pyx_XDECREF(__pyx_v_indptr);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XDECREF(__pyx_v_kdtree);
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XDECREF(__pyx_v_daughters);
  __Pyx_XDECREF(__pyx_v_exten);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":735
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":738
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":741
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":744
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":747
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":751
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":753
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":868
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":869
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":870
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":868
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":872
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":873
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":874
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":875
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":874
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":876
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":872
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":880
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":882
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 882, __pyx_L3_error)

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":883
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 883, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":884
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 884, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 884, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":880
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":886
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":888
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 888, __pyx_L3_error)

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":889
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 889, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":890
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 890, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 890, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":886
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":894
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 894, __pyx_L3_error)

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":895
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 895, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":896
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 896, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 896, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_3GBM___pyx_scope_struct__ext_grid *__pyx_freelist_3GBM___pyx_scope_struct__ext_grid[8];
static int __pyx_freecount_3GBM___pyx_scope_struct__ext_grid = 0;

static PyObject *__pyx_tp_new_3GBM___pyx_scope_struct__ext_grid(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3GBM___pyx_scope_struct__ext_grid > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3GBM___pyx_scope_struct__ext_grid)))) {
    o = (PyObject*)__pyx_freelist_3GBM___pyx_scope_struct__ext_grid[--__pyx_freecount_3GBM___pyx_scope_struct__ext_grid];
    memset(o, 0, sizeof(struct __pyx_obj_3GBM___pyx_scope_struct__ext_grid));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3GBM___pyx_scope_struct__ext_grid(PyObject *o) {
  struct __pyx_obj_3GBM___pyx_scope_struct__ext_grid *p = (struct __pyx_obj_3GBM___pyx_scope_struct__ext_grid *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_newpoints);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3GBM___pyx_scope_struct__ext_grid < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3GBM___pyx_scope_struct__ext_grid)))) {
    __pyx_freelist_3GBM___pyx_scope_struct__ext_grid[__pyx_freecount_3GBM___pyx_scope_struct__ext_grid++] = ((struct __pyx_obj_3GBM___pyx_scope_struct__ext_grid *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3GBM___pyx_scope_struct__ext_grid(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3GBM___pyx_scope_struct__ext_grid *p = (struct __pyx_obj_3GBM___pyx_scope_struct__ext_grid *)o;
  if (p->__pyx_v_newpoints) {
    e = (*v)(((PyObject *)p->__pyx_v_newpoints), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3GBM___pyx_scope_struct__ext_grid(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3GBM___pyx_scope_struct__ext_grid *p = (struct __pyx_obj_3GBM___pyx_scope_struct__ext_grid *)o;
  tmp = ((PyObject*)p->__pyx_v_newpoints);
  p->__pyx_v_newpoints = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3GBM___pyx_scope_struct__ext_grid = {
  PyVarObject_HEAD_INIT(0, 0)
  "GBM.__pyx_scope_struct__ext_grid", /*tp_name*/
  sizeof(struct __pyx_obj_3GBM___pyx_scope_struct__ext_grid), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3GBM___pyx_scope_struct__ext_grid, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3GBM___pyx_scope_struct__ext_grid, /*tp_traverse*/
  __pyx_tp_clear_3GBM___pyx_scope_struct__ext_grid, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3GBM___pyx_scope_struct__ext_grid, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_3GBM___pyx_scope_struct_1_genexpr *__pyx_freelist_3GBM___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_3GBM___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_3GBM___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3GBM___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3GBM___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_3GBM___pyx_scope_struct_1_genexpr[--__pyx_freecount_3GBM___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_3GBM___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3GBM___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_3GBM___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_3GBM___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_x);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3GBM___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3GBM___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_3GBM___pyx_scope_struct_1_genexpr[__pyx_freecount_3GBM___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_3GBM___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3GBM___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3GBM___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_3GBM___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_x) {
    e = (*v)(p->__pyx_v_x, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_3GBM___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "GBM.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_3GBM___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3GBM___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3GBM___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3GBM___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"interLN", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3GBM_7interLN, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_GBM(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_GBM},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "GBM",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_05d, __pyx_k_05d, sizeof(__pyx_k_05d), 0, 1, 0, 0},
  {&__pyx_n_s_Alive, __pyx_k_Alive, sizeof(__pyx_k_Alive), 0, 0, 1, 1},
  {&__pyx_n_u_Alive_population, __pyx_k_Alive_population, sizeof(__pyx_k_Alive_population), 0, 1, 0, 1},
  {&__pyx_n_s_Alive_single, __pyx_k_Alive_single, sizeof(__pyx_k_Alive_single), 0, 0, 1, 1},
  {&__pyx_n_s_Blood_vessel, __pyx_k_Blood_vessel, sizeof(__pyx_k_Blood_vessel), 0, 0, 1, 1},
  {&__pyx_n_s_Cell, __pyx_k_Cell, sizeof(__pyx_k_Cell), 0, 0, 1, 1},
  {&__pyx_n_s_CellVariable, __pyx_k_CellVariable, sizeof(__pyx_k_CellVariable), 0, 0, 1, 1},
  {&__pyx_n_s_Cell_pop, __pyx_k_Cell_pop, sizeof(__pyx_k_Cell_pop), 0, 0, 1, 1},
  {&__pyx_n_u_Cell_population, __pyx_k_Cell_population, sizeof(__pyx_k_Cell_population), 0, 1, 0, 1},
  {&__pyx_kp_u_Cell_population_of, __pyx_k_Cell_population_of, sizeof(__pyx_k_Cell_population_of), 0, 1, 0, 0},
  {&__pyx_n_s_Count_GDS, __pyx_k_Count_GDS, sizeof(__pyx_k_Count_GDS), 0, 0, 1, 1},
  {&__pyx_n_s_Count_GPP, __pyx_k_Count_GPP, sizeof(__pyx_k_Count_GPP), 0, 0, 1, 1},
  {&__pyx_n_s_Count_GSC, __pyx_k_Count_GSC, sizeof(__pyx_k_Count_GSC), 0, 0, 1, 1},
  {&__pyx_n_s_DIV, __pyx_k_DIV, sizeof(__pyx_k_DIV), 0, 0, 1, 1},
  {&__pyx_kp_u_Data, __pyx_k_Data, sizeof(__pyx_k_Data), 0, 1, 0, 0},
  {&__pyx_n_s_Dead, __pyx_k_Dead, sizeof(__pyx_k_Dead), 0, 0, 1, 1},
  {&__pyx_n_s_Dead_cluster, __pyx_k_Dead_cluster, sizeof(__pyx_k_Dead_cluster), 0, 0, 1, 1},
  {&__pyx_n_u_Dead_population, __pyx_k_Dead_population, sizeof(__pyx_k_Dead_population), 0, 1, 0, 1},
  {&__pyx_n_s_Dead_tot, __pyx_k_Dead_tot, sizeof(__pyx_k_Dead_tot), 0, 0, 1, 1},
  {&__pyx_n_s_Delaunay, __pyx_k_Delaunay, sizeof(__pyx_k_Delaunay), 0, 0, 1, 1},
  {&__pyx_n_s_DiffusionTerm, __pyx_k_DiffusionTerm, sizeof(__pyx_k_DiffusionTerm), 0, 0, 1, 1},
  {&__pyx_n_s_Discarded, __pyx_k_Discarded, sizeof(__pyx_k_Discarded), 0, 0, 1, 1},
  {&__pyx_n_s_Discarded_array, __pyx_k_Discarded_array, sizeof(__pyx_k_Discarded_array), 0, 0, 1, 1},
  {&__pyx_n_u_Discarded_points, __pyx_k_Discarded_points, sizeof(__pyx_k_Discarded_points), 0, 1, 0, 1},
  {&__pyx_n_u_Distance_to_rim, __pyx_k_Distance_to_rim, sizeof(__pyx_k_Distance_to_rim), 0, 1, 0, 1},
  {&__pyx_n_s_Dox, __pyx_k_Dox, sizeof(__pyx_k_Dox), 0, 0, 1, 1},
  {&__pyx_n_s_Dup, __pyx_k_Dup, sizeof(__pyx_k_Dup), 0, 0, 1, 1},
  {&__pyx_n_s_File, __pyx_k_File, sizeof(__pyx_k_File), 0, 0, 1, 1},
  {&__pyx_n_s_GBM, __pyx_k_GBM, sizeof(__pyx_k_GBM), 0, 0, 1, 1},
  {&__pyx_kp_s_GBM_pyx, __pyx_k_GBM_pyx, sizeof(__pyx_k_GBM_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_GDS, __pyx_k_GDS, sizeof(__pyx_k_GDS), 0, 0, 1, 1},
  {&__pyx_n_s_GDS_PDE, __pyx_k_GDS_PDE, sizeof(__pyx_k_GDS_PDE), 0, 0, 1, 1},
  {&__pyx_n_u_GDS_population, __pyx_k_GDS_population, sizeof(__pyx_k_GDS_population), 0, 1, 0, 1},
  {&__pyx_n_s_GDS_tot, __pyx_k_GDS_tot, sizeof(__pyx_k_GDS_tot), 0, 0, 1, 1},
  {&__pyx_n_s_GPP, __pyx_k_GPP, sizeof(__pyx_k_GPP), 0, 0, 1, 1},
  {&__pyx_n_s_GPP_PDE, __pyx_k_GPP_PDE, sizeof(__pyx_k_GPP_PDE), 0, 0, 1, 1},
  {&__pyx_n_u_GPP_population, __pyx_k_GPP_population, sizeof(__pyx_k_GPP_population), 0, 1, 0, 1},
  {&__pyx_n_s_GPP_tot, __pyx_k_GPP_tot, sizeof(__pyx_k_GPP_tot), 0, 0, 1, 1},
  {&__pyx_n_s_GSC, __pyx_k_GSC, sizeof(__pyx_k_GSC), 0, 0, 1, 1},
  {&__pyx_n_s_GSC_PDE, __pyx_k_GSC_PDE, sizeof(__pyx_k_GSC_PDE), 0, 0, 1, 1},
  {&__pyx_n_u_GSC_population, __pyx_k_GSC_population, sizeof(__pyx_k_GSC_population), 0, 1, 0, 1},
  {&__pyx_n_s_GSC_tot, __pyx_k_GSC_tot, sizeof(__pyx_k_GSC_tot), 0, 0, 1, 1},
  {&__pyx_n_s_Grid2D, __pyx_k_Grid2D, sizeof(__pyx_k_Grid2D), 0, 0, 1, 1},
  {&__pyx_kp_u_Grid_creation_s_seconds, __pyx_k_Grid_creation_s_seconds, sizeof(__pyx_k_Grid_creation_s_seconds), 0, 1, 0, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_Input, __pyx_k_Input, sizeof(__pyx_k_Input), 0, 0, 1, 1},
  {&__pyx_n_u_Input, __pyx_k_Input, sizeof(__pyx_k_Input), 0, 1, 0, 1},
  {&__pyx_n_s_LinearNDInterpolator, __pyx_k_LinearNDInterpolator, sizeof(__pyx_k_LinearNDInterpolator), 0, 0, 1, 1},
  {&__pyx_n_s_NearestNDInterpolator, __pyx_k_NearestNDInterpolator, sizeof(__pyx_k_NearestNDInterpolator), 0, 0, 1, 1},
  {&__pyx_n_u_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 1},
  {&__pyx_n_s_O2_crit, __pyx_k_O2_crit, sizeof(__pyx_k_O2_crit), 0, 0, 1, 1},
  {&__pyx_n_s_Ox_irr, __pyx_k_Ox_irr, sizeof(__pyx_k_Ox_irr), 0, 0, 1, 1},
  {&__pyx_n_u_Oxygen, __pyx_k_Oxygen, sizeof(__pyx_k_Oxygen), 0, 1, 0, 1},
  {&__pyx_n_s_PDeath, __pyx_k_PDeath, sizeof(__pyx_k_PDeath), 0, 0, 1, 1},
  {&__pyx_n_s_PDiv, __pyx_k_PDiv, sizeof(__pyx_k_PDiv), 0, 0, 1, 1},
  {&__pyx_n_s_Pdie, __pyx_k_Pdie, sizeof(__pyx_k_Pdie), 0, 0, 1, 1},
  {&__pyx_n_s_Pdivi, __pyx_k_Pdivi, sizeof(__pyx_k_Pdivi), 0, 0, 1, 1},
  {&__pyx_n_s_Pmove, __pyx_k_Pmove, sizeof(__pyx_k_Pmove), 0, 0, 1, 1},
  {&__pyx_n_u_Points, __pyx_k_Points, sizeof(__pyx_k_Points), 0, 1, 0, 1},
  {&__pyx_kp_u_Population_overview_png, __pyx_k_Population_overview_png, sizeof(__pyx_k_Population_overview_png), 0, 1, 0, 0},
  {&__pyx_n_s_Pprol, __pyx_k_Pprol, sizeof(__pyx_k_Pprol), 0, 0, 1, 1},
  {&__pyx_n_s_Proliferating, __pyx_k_Proliferating, sizeof(__pyx_k_Proliferating), 0, 0, 1, 1},
  {&__pyx_n_s_Pup, __pyx_k_Pup, sizeof(__pyx_k_Pup), 0, 0, 1, 1},
  {&__pyx_n_s_Quiescent, __pyx_k_Quiescent, sizeof(__pyx_k_Quiescent), 0, 0, 1, 1},
  {&__pyx_n_s_Qup, __pyx_k_Qup, sizeof(__pyx_k_Qup), 0, 0, 1, 1},
  {&__pyx_n_s_Reaper, __pyx_k_Reaper, sizeof(__pyx_k_Reaper), 0, 0, 1, 1},
  {&__pyx_n_s_Restart, __pyx_k_Restart, sizeof(__pyx_k_Restart), 0, 0, 1, 1},
  {&__pyx_n_s_Rim, __pyx_k_Rim, sizeof(__pyx_k_Rim), 0, 0, 1, 1},
  {&__pyx_n_s_SavN, __pyx_k_SavN, sizeof(__pyx_k_SavN), 0, 0, 1, 1},
  {&__pyx_kp_u_Snapshot, __pyx_k_Snapshot, sizeof(__pyx_k_Snapshot), 0, 1, 0, 0},
  {&__pyx_kp_u_Summary_file_for_ABM, __pyx_k_Summary_file_for_ABM, sizeof(__pyx_k_Summary_file_for_ABM), 0, 1, 0, 0},
  {&__pyx_kp_u_Time_step, __pyx_k_Time_step, sizeof(__pyx_k_Time_step), 0, 1, 0, 0},
  {&__pyx_kp_u_Time_step_runtime_GSC_GPP_GDS_D, __pyx_k_Time_step_runtime_GSC_GPP_GDS_D, sizeof(__pyx_k_Time_step_runtime_GSC_GPP_GDS_D), 0, 1, 0, 0},
  {&__pyx_n_s_TransientTerm, __pyx_k_TransientTerm, sizeof(__pyx_k_TransientTerm), 0, 0, 1, 1},
  {&__pyx_n_s_Viewer, __pyx_k_Viewer, sizeof(__pyx_k_Viewer), 0, 0, 1, 1},
  {&__pyx_n_s_X, __pyx_k_X, sizeof(__pyx_k_X), 0, 0, 1, 1},
  {&__pyx_n_s_Xs, __pyx_k_Xs, sizeof(__pyx_k_Xs), 0, 0, 1, 1},
  {&__pyx_n_s_Xs_r, __pyx_k_Xs_r, sizeof(__pyx_k_Xs_r), 0, 0, 1, 1},
  {&__pyx_n_s_Xs_rh, __pyx_k_Xs_rh, sizeof(__pyx_k_Xs_rh), 0, 0, 1, 1},
  {&__pyx_n_s_Xs_rl, __pyx_k_Xs_rl, sizeof(__pyx_k_Xs_rl), 0, 0, 1, 1},
  {&__pyx_n_s_Y, __pyx_k_Y, sizeof(__pyx_k_Y), 0, 0, 1, 1},
  {&__pyx_n_s_Ys, __pyx_k_Ys, sizeof(__pyx_k_Ys), 0, 0, 1, 1},
  {&__pyx_n_s_Ys_r, __pyx_k_Ys_r, sizeof(__pyx_k_Ys_r), 0, 0, 1, 1},
  {&__pyx_n_s_Ys_rh, __pyx_k_Ys_rh, sizeof(__pyx_k_Ys_rh), 0, 0, 1, 1},
  {&__pyx_n_s_Ys_rl, __pyx_k_Ys_rl, sizeof(__pyx_k_Ys_rl), 0, 0, 1, 1},
  {&__pyx_kp_u__23, __pyx_k__23, sizeof(__pyx_k__23), 0, 1, 0, 0},
  {&__pyx_kp_u__26, __pyx_k__26, sizeof(__pyx_k__26), 0, 1, 0, 0},
  {&__pyx_kp_u__29, __pyx_k__29, sizeof(__pyx_k__29), 0, 1, 0, 0},
  {&__pyx_kp_u__30, __pyx_k__30, sizeof(__pyx_k__30), 0, 1, 0, 0},
  {&__pyx_kp_u__31, __pyx_k__31, sizeof(__pyx_k__31), 0, 1, 0, 0},
  {&__pyx_kp_u__32, __pyx_k__32, sizeof(__pyx_k__32), 0, 1, 0, 0},
  {&__pyx_n_s__38, __pyx_k__38, sizeof(__pyx_k__38), 0, 0, 1, 1},
  {&__pyx_n_u_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 1, 0, 1},
  {&__pyx_n_s_a_tot, __pyx_k_a_tot, sizeof(__pyx_k_a_tot), 0, 0, 1, 1},
  {&__pyx_n_s_alivecount, __pyx_k_alivecount, sizeof(__pyx_k_alivecount), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_any, __pyx_k_any, sizeof(__pyx_k_any), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_arange, __pyx_k_arange, sizeof(__pyx_k_arange), 0, 0, 1, 1},
  {&__pyx_kp_u_are_dead_Total_population, __pyx_k_are_dead_Total_population, sizeof(__pyx_k_are_dead_Total_population), 0, 1, 0, 0},
  {&__pyx_kp_u_are_modelled_individually_In_ad, __pyx_k_are_modelled_individually_In_ad, sizeof(__pyx_k_are_modelled_individually_In_ad), 0, 1, 0, 0},
  {&__pyx_n_s_argmin, __pyx_k_argmin, sizeof(__pyx_k_argmin), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
  {&__pyx_n_s_asize, __pyx_k_asize, sizeof(__pyx_k_asize), 0, 0, 1, 1},
  {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
  {&__pyx_n_s_bbox_inches, __pyx_k_bbox_inches, sizeof(__pyx_k_bbox_inches), 0, 0, 1, 1},
  {&__pyx_n_u_blue, __pyx_k_blue, sizeof(__pyx_k_blue), 0, 1, 0, 1},
  {&__pyx_n_s_bottom, __pyx_k_bottom, sizeof(__pyx_k_bottom), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_cKDTree, __pyx_k_cKDTree, sizeof(__pyx_k_cKDTree), 0, 0, 1, 1},
  {&__pyx_n_u_c_2, __pyx_k_c_2, sizeof(__pyx_k_c_2), 0, 1, 0, 1},
  {&__pyx_n_s_cellcount, __pyx_k_cellcount, sizeof(__pyx_k_cellcount), 0, 0, 1, 1},
  {&__pyx_n_s_clf, __pyx_k_clf, sizeof(__pyx_k_clf), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_cluster, __pyx_k_cluster, sizeof(__pyx_k_cluster), 0, 0, 1, 1},
  {&__pyx_n_s_coeff, __pyx_k_coeff, sizeof(__pyx_k_coeff), 0, 0, 1, 1},
  {&__pyx_n_s_color, __pyx_k_color, sizeof(__pyx_k_color), 0, 0, 1, 1},
  {&__pyx_n_s_concatenate, __pyx_k_concatenate, sizeof(__pyx_k_concatenate), 0, 0, 1, 1},
  {&__pyx_n_s_conditions, __pyx_k_conditions, sizeof(__pyx_k_conditions), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_create_dataset, __pyx_k_create_dataset, sizeof(__pyx_k_create_dataset), 0, 0, 1, 1},
  {&__pyx_n_s_csize, __pyx_k_csize, sizeof(__pyx_k_csize), 0, 0, 1, 1},
  {&__pyx_n_s_cwd, __pyx_k_cwd, sizeof(__pyx_k_cwd), 0, 0, 1, 1},
  {&__pyx_n_u_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 1, 0, 1},
  {&__pyx_n_s_dashes, __pyx_k_dashes, sizeof(__pyx_k_dashes), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_daughter, __pyx_k_daughter, sizeof(__pyx_k_daughter), 0, 0, 1, 1},
  {&__pyx_n_s_daughters, __pyx_k_daughters, sizeof(__pyx_k_daughters), 0, 0, 1, 1},
  {&__pyx_n_s_dead_neighbours, __pyx_k_dead_neighbours, sizeof(__pyx_k_dead_neighbours), 0, 0, 1, 1},
  {&__pyx_n_s_deadcount, __pyx_k_deadcount, sizeof(__pyx_k_deadcount), 0, 0, 1, 1},
  {&__pyx_n_s_delete, __pyx_k_delete, sizeof(__pyx_k_delete), 0, 0, 1, 1},
  {&__pyx_n_s_dist_GDS, __pyx_k_dist_GDS, sizeof(__pyx_k_dist_GDS), 0, 0, 1, 1},
  {&__pyx_n_s_dist_GPP, __pyx_k_dist_GPP, sizeof(__pyx_k_dist_GPP), 0, 0, 1, 1},
  {&__pyx_n_s_dist_GSC, __pyx_k_dist_GSC, sizeof(__pyx_k_dist_GSC), 0, 0, 1, 1},
  {&__pyx_n_s_divide, __pyx_k_divide, sizeof(__pyx_k_divide), 0, 0, 1, 1},
  {&__pyx_n_s_dsize, __pyx_k_dsize, sizeof(__pyx_k_dsize), 0, 0, 1, 1},
  {&__pyx_n_s_dt, __pyx_k_dt, sizeof(__pyx_k_dt), 0, 0, 1, 1},
  {&__pyx_n_s_dx, __pyx_k_dx, sizeof(__pyx_k_dx), 0, 0, 1, 1},
  {&__pyx_n_s_dy, __pyx_k_dy, sizeof(__pyx_k_dy), 0, 0, 1, 1},
  {&__pyx_n_s_epsilon, __pyx_k_epsilon, sizeof(__pyx_k_epsilon), 0, 0, 1, 1},
  {&__pyx_n_s_eq, __pyx_k_eq, sizeof(__pyx_k_eq), 0, 0, 1, 1},
  {&__pyx_kp_u_evolves, __pyx_k_evolves, sizeof(__pyx_k_evolves), 0, 1, 0, 0},
  {&__pyx_n_s_ext_grid, __pyx_k_ext_grid, sizeof(__pyx_k_ext_grid), 0, 0, 1, 1},
  {&__pyx_n_s_ext_grid_locals_genexpr, __pyx_k_ext_grid_locals_genexpr, sizeof(__pyx_k_ext_grid_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_exten, __pyx_k_exten, sizeof(__pyx_k_exten), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_fdummy1, __pyx_k_fdummy1, sizeof(__pyx_k_fdummy1), 0, 0, 1, 1},
  {&__pyx_n_s_fdummy2, __pyx_k_fdummy2, sizeof(__pyx_k_fdummy2), 0, 0, 1, 1},
  {&__pyx_n_s_fdummy3, __pyx_k_fdummy3, sizeof(__pyx_k_fdummy3), 0, 0, 1, 1},
  {&__pyx_n_s_ff, __pyx_k_ff, sizeof(__pyx_k_ff), 0, 0, 1, 1},
  {&__pyx_n_s_figsize, __pyx_k_figsize, sizeof(__pyx_k_figsize), 0, 0, 1, 1},
  {&__pyx_n_s_figure, __pyx_k_figure, sizeof(__pyx_k_figure), 0, 0, 1, 1},
  {&__pyx_n_s_fipy, __pyx_k_fipy, sizeof(__pyx_k_fipy), 0, 0, 1, 1},
  {&__pyx_n_s_flatten, __pyx_k_flatten, sizeof(__pyx_k_flatten), 0, 0, 1, 1},
  {&__pyx_n_s_fontsize, __pyx_k_fontsize, sizeof(__pyx_k_fontsize), 0, 0, 1, 1},
  {&__pyx_n_s_free, __pyx_k_free, sizeof(__pyx_k_free), 0, 0, 1, 1},
  {&__pyx_n_u_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 1, 0, 1},
  {&__pyx_n_s_gcf, __pyx_k_gcf, sizeof(__pyx_k_gcf), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_getcwd, __pyx_k_getcwd, sizeof(__pyx_k_getcwd), 0, 0, 1, 1},
  {&__pyx_n_s_gsize, __pyx_k_gsize, sizeof(__pyx_k_gsize), 0, 0, 1, 1},
  {&__pyx_kp_u_h5, __pyx_k_h5, sizeof(__pyx_k_h5), 0, 1, 0, 0},
  {&__pyx_n_s_h5py, __pyx_k_h5py, sizeof(__pyx_k_h5py), 0, 0, 1, 1},
  {&__pyx_n_s_hf, __pyx_k_hf, sizeof(__pyx_k_hf), 0, 0, 1, 1},
  {&__pyx_n_s_hierarchy, __pyx_k_hierarchy, sizeof(__pyx_k_hierarchy), 0, 0, 1, 1},
  {&__pyx_kp_u_history_log, __pyx_k_history_log, sizeof(__pyx_k_history_log), 0, 1, 0, 0},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_kp_u_i_2E_i_i_i_i_i, __pyx_k_i_2E_i_i_i_i_i, sizeof(__pyx_k_i_2E_i_i_i_i_i), 0, 1, 0, 0},
  {&__pyx_kp_u_i_i_i_i_9E_9E_9E_i_i_9E_i_9E_9E, __pyx_k_i_i_i_i_9E_9E_9E_i_i_9E_i_9E_9E, sizeof(__pyx_k_i_i_i_i_9E_9E_9E_i_i_9E_i_9E_9E), 0, 1, 0, 0},
  {&__pyx_n_s_iden, __pyx_k_iden, sizeof(__pyx_k_iden), 0, 0, 1, 1},
  {&__pyx_n_s_idummy1, __pyx_k_idummy1, sizeof(__pyx_k_idummy1), 0, 0, 1, 1},
  {&__pyx_n_s_idummy2, __pyx_k_idummy2, sizeof(__pyx_k_idummy2), 0, 0, 1, 1},
  {&__pyx_n_s_idummy3, __pyx_k_idummy3, sizeof(__pyx_k_idummy3), 0, 0, 1, 1},
  {&__pyx_n_s_idummy4, __pyx_k_idummy4, sizeof(__pyx_k_idummy4), 0, 0, 1, 1},
  {&__pyx_n_s_idummy5, __pyx_k_idummy5, sizeof(__pyx_k_idummy5), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_in1d, __pyx_k_in1d, sizeof(__pyx_k_in1d), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_indices, __pyx_k_indices, sizeof(__pyx_k_indices), 0, 0, 1, 1},
  {&__pyx_n_s_indptr, __pyx_k_indptr, sizeof(__pyx_k_indptr), 0, 0, 1, 1},
  {&__pyx_n_s_init_Cell_pop, __pyx_k_init_Cell_pop, sizeof(__pyx_k_init_Cell_pop), 0, 0, 1, 1},
  {&__pyx_n_s_init_oxygen, __pyx_k_init_oxygen, sizeof(__pyx_k_init_oxygen), 0, 0, 1, 1},
  {&__pyx_n_s_invert, __pyx_k_invert, sizeof(__pyx_k_invert), 0, 0, 1, 1},
  {&__pyx_n_s_isfile, __pyx_k_isfile, sizeof(__pyx_k_isfile), 0, 0, 1, 1},
  {&__pyx_n_s_isnan, __pyx_k_isnan, sizeof(__pyx_k_isnan), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_kp_u_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 1, 0, 0},
  {&__pyx_n_s_k_2, __pyx_k_k_2, sizeof(__pyx_k_k_2), 0, 0, 1, 1},
  {&__pyx_n_u_k_2, __pyx_k_k_2, sizeof(__pyx_k_k_2), 0, 1, 0, 1},
  {&__pyx_n_s_kdtree, __pyx_k_kdtree, sizeof(__pyx_k_kdtree), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_n_s_lambdaC, __pyx_k_lambdaC, sizeof(__pyx_k_lambdaC), 0, 0, 1, 1},
  {&__pyx_n_s_left, __pyx_k_left, sizeof(__pyx_k_left), 0, 0, 1, 1},
  {&__pyx_n_s_legend, __pyx_k_legend, sizeof(__pyx_k_legend), 0, 0, 1, 1},
  {&__pyx_n_s_linestyle, __pyx_k_linestyle, sizeof(__pyx_k_linestyle), 0, 0, 1, 1},
  {&__pyx_n_s_llen, __pyx_k_llen, sizeof(__pyx_k_llen), 0, 0, 1, 1},
  {&__pyx_n_s_logfile, __pyx_k_logfile, sizeof(__pyx_k_logfile), 0, 0, 1, 1},
  {&__pyx_n_s_logical_and, __pyx_k_logical_and, sizeof(__pyx_k_logical_and), 0, 0, 1, 1},
  {&__pyx_n_s_low, __pyx_k_low, sizeof(__pyx_k_low), 0, 0, 1, 1},
  {&__pyx_n_s_lx, __pyx_k_lx, sizeof(__pyx_k_lx), 0, 0, 1, 1},
  {&__pyx_n_u_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 1, 0, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
  {&__pyx_n_s_mask, __pyx_k_mask, sizeof(__pyx_k_mask), 0, 0, 1, 1},
  {&__pyx_kp_u_mathrm_Alive, __pyx_k_mathrm_Alive, sizeof(__pyx_k_mathrm_Alive), 0, 1, 0, 0},
  {&__pyx_kp_u_mathrm_Alive_Rim, __pyx_k_mathrm_Alive_Rim, sizeof(__pyx_k_mathrm_Alive_Rim), 0, 1, 0, 0},
  {&__pyx_kp_u_mathrm_Cell_number, __pyx_k_mathrm_Cell_number, sizeof(__pyx_k_mathrm_Cell_number), 0, 1, 0, 0},
  {&__pyx_kp_u_mathrm_Dead, __pyx_k_mathrm_Dead, sizeof(__pyx_k_mathrm_Dead), 0, 1, 0, 0},
  {&__pyx_kp_u_mathrm_GDS, __pyx_k_mathrm_GDS, sizeof(__pyx_k_mathrm_GDS), 0, 1, 0, 0},
  {&__pyx_kp_u_mathrm_GPP, __pyx_k_mathrm_GPP, sizeof(__pyx_k_mathrm_GPP), 0, 1, 0, 0},
  {&__pyx_kp_u_mathrm_GSC, __pyx_k_mathrm_GSC, sizeof(__pyx_k_mathrm_GSC), 0, 1, 0, 0},
  {&__pyx_kp_u_mathrm_x_lattice_position, __pyx_k_mathrm_x_lattice_position, sizeof(__pyx_k_mathrm_x_lattice_position), 0, 1, 0, 0},
  {&__pyx_kp_u_mathrm_y_lattice_position, __pyx_k_mathrm_y_lattice_position, sizeof(__pyx_k_mathrm_y_lattice_position), 0, 1, 0, 0},
  {&__pyx_n_s_matplotlib_pyplot, __pyx_k_matplotlib_pyplot, sizeof(__pyx_k_matplotlib_pyplot), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_mesh, __pyx_k_mesh, sizeof(__pyx_k_mesh), 0, 0, 1, 1},
  {&__pyx_n_s_meshgrid, __pyx_k_meshgrid, sizeof(__pyx_k_meshgrid), 0, 0, 1, 1},
  {&__pyx_n_s_mod, __pyx_k_mod, sizeof(__pyx_k_mod), 0, 0, 1, 1},
  {&__pyx_n_s_more_itertools, __pyx_k_more_itertools, sizeof(__pyx_k_more_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_move, __pyx_k_move, sizeof(__pyx_k_move), 0, 0, 1, 1},
  {&__pyx_n_s_myplots, __pyx_k_myplots, sizeof(__pyx_k_myplots), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_neigh, __pyx_k_neigh, sizeof(__pyx_k_neigh), 0, 0, 1, 1},
  {&__pyx_n_s_neighbours, __pyx_k_neighbours, sizeof(__pyx_k_neighbours), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_newcomers, __pyx_k_newcomers, sizeof(__pyx_k_newcomers), 0, 0, 1, 1},
  {&__pyx_n_s_newpoints, __pyx_k_newpoints, sizeof(__pyx_k_newpoints), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_nsize, __pyx_k_nsize, sizeof(__pyx_k_nsize), 0, 0, 1, 1},
  {&__pyx_n_s_nsize_alive, __pyx_k_nsize_alive, sizeof(__pyx_k_nsize_alive), 0, 0, 1, 1},
  {&__pyx_n_s_nsize_ndead, __pyx_k_nsize_ndead, sizeof(__pyx_k_nsize_ndead), 0, 0, 1, 1},
  {&__pyx_n_s_nsize_trap, __pyx_k_nsize_trap, sizeof(__pyx_k_nsize_trap), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_n_s_nx, __pyx_k_nx, sizeof(__pyx_k_nx), 0, 0, 1, 1},
  {&__pyx_n_s_ny, __pyx_k_ny, sizeof(__pyx_k_ny), 0, 0, 1, 1},
  {&__pyx_n_s_ones, __pyx_k_ones, sizeof(__pyx_k_ones), 0, 0, 1, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_u_orange, __pyx_k_orange, sizeof(__pyx_k_orange), 0, 1, 0, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_oxygen, __pyx_k_oxygen, sizeof(__pyx_k_oxygen), 0, 0, 1, 1},
  {&__pyx_kp_u_params_log, __pyx_k_params_log, sizeof(__pyx_k_params_log), 0, 1, 0, 0},
  {&__pyx_n_s_paramsfile, __pyx_k_paramsfile, sizeof(__pyx_k_paramsfile), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_phs, __pyx_k_phs, sizeof(__pyx_k_phs), 0, 0, 1, 1},
  {&__pyx_n_s_pl, __pyx_k_pl, sizeof(__pyx_k_pl), 0, 0, 1, 1},
  {&__pyx_n_s_plot, __pyx_k_plot, sizeof(__pyx_k_plot), 0, 0, 1, 1},
  {&__pyx_n_s_plt, __pyx_k_plt, sizeof(__pyx_k_plt), 0, 0, 1, 1},
  {&__pyx_kp_u_png, __pyx_k_png, sizeof(__pyx_k_png), 0, 1, 0, 0},
  {&__pyx_n_s_point, __pyx_k_point, sizeof(__pyx_k_point), 0, 0, 1, 1},
  {&__pyx_n_s_points, __pyx_k_points, sizeof(__pyx_k_points), 0, 0, 1, 1},
  {&__pyx_n_u_points_high, __pyx_k_points_high, sizeof(__pyx_k_points_high), 0, 1, 0, 1},
  {&__pyx_n_u_points_low, __pyx_k_points_low, sizeof(__pyx_k_points_low), 0, 1, 0, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_progeny, __pyx_k_progeny, sizeof(__pyx_k_progeny), 0, 0, 1, 1},
  {&__pyx_n_s_query, __pyx_k_query, sizeof(__pyx_k_query), 0, 0, 1, 1},
  {&__pyx_n_s_query_ball_point, __pyx_k_query_ball_point, sizeof(__pyx_k_query_ball_point), 0, 0, 1, 1},
  {&__pyx_n_s_qui_GDS, __pyx_k_qui_GDS, sizeof(__pyx_k_qui_GDS), 0, 0, 1, 1},
  {&__pyx_n_s_qui_GPP, __pyx_k_qui_GPP, sizeof(__pyx_k_qui_GPP), 0, 0, 1, 1},
  {&__pyx_n_s_qui_GSC, __pyx_k_qui_GSC, sizeof(__pyx_k_qui_GSC), 0, 0, 1, 1},
  {&__pyx_n_u_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 1, 0, 1},
  {&__pyx_kp_u_r_2, __pyx_k_r_2, sizeof(__pyx_k_r_2), 0, 1, 0, 0},
  {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_ravel, __pyx_k_ravel, sizeof(__pyx_k_ravel), 0, 0, 1, 1},
  {&__pyx_n_s_read_snapshot, __pyx_k_read_snapshot, sizeof(__pyx_k_read_snapshot), 0, 0, 1, 1},
  {&__pyx_n_s_region_GDS, __pyx_k_region_GDS, sizeof(__pyx_k_region_GDS), 0, 0, 1, 1},
  {&__pyx_n_s_region_GPP, __pyx_k_region_GPP, sizeof(__pyx_k_region_GPP), 0, 0, 1, 1},
  {&__pyx_n_s_region_GSC, __pyx_k_region_GSC, sizeof(__pyx_k_region_GSC), 0, 0, 1, 1},
  {&__pyx_n_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
  {&__pyx_n_s_reshape, __pyx_k_reshape, sizeof(__pyx_k_reshape), 0, 0, 1, 1},
  {&__pyx_n_s_resx, __pyx_k_resx, sizeof(__pyx_k_resx), 0, 0, 1, 1},
  {&__pyx_kp_u_resx_resy_steps_SavN_Dox_lambda, __pyx_k_resx_resy_steps_SavN_Dox_lambda, sizeof(__pyx_k_resx_resy_steps_SavN_Dox_lambda), 0, 1, 0, 0},
  {&__pyx_n_s_resy, __pyx_k_resy, sizeof(__pyx_k_resy), 0, 0, 1, 1},
  {&__pyx_n_s_reverse, __pyx_k_reverse, sizeof(__pyx_k_reverse), 0, 0, 1, 1},
  {&__pyx_n_s_round, __pyx_k_round, sizeof(__pyx_k_round), 0, 0, 1, 1},
  {&__pyx_n_s_run_ABM, __pyx_k_run_ABM, sizeof(__pyx_k_run_ABM), 0, 0, 1, 1},
  {&__pyx_n_s_run_ABM_locals_lambda, __pyx_k_run_ABM_locals_lambda, sizeof(__pyx_k_run_ABM_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_savefig, __pyx_k_savefig, sizeof(__pyx_k_savefig), 0, 0, 1, 1},
  {&__pyx_n_s_scipy_interpolate, __pyx_k_scipy_interpolate, sizeof(__pyx_k_scipy_interpolate), 0, 0, 1, 1},
  {&__pyx_n_s_scipy_spatial, __pyx_k_scipy_spatial, sizeof(__pyx_k_scipy_spatial), 0, 0, 1, 1},
  {&__pyx_kp_u_seconds, __pyx_k_seconds, sizeof(__pyx_k_seconds), 0, 1, 0, 0},
  {&__pyx_n_s_semilogy, __pyx_k_semilogy, sizeof(__pyx_k_semilogy), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setValue, __pyx_k_setValue, sizeof(__pyx_k_setValue), 0, 0, 1, 1},
  {&__pyx_n_s_simplices, __pyx_k_simplices, sizeof(__pyx_k_simplices), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_solve, __pyx_k_solve, sizeof(__pyx_k_solve), 0, 0, 1, 1},
  {&__pyx_n_s_solve_oxygen, __pyx_k_solve_oxygen, sizeof(__pyx_k_solve_oxygen), 0, 0, 1, 1},
  {&__pyx_n_s_sorted, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {&__pyx_n_s_start_time, __pyx_k_start_time, sizeof(__pyx_k_start_time), 0, 0, 1, 1},
  {&__pyx_n_s_steps, __pyx_k_steps, sizeof(__pyx_k_steps), 0, 0, 1, 1},
  {&__pyx_n_s_stocev, __pyx_k_stocev, sizeof(__pyx_k_stocev), 0, 0, 1, 1},
  {&__pyx_n_s_store, __pyx_k_store, sizeof(__pyx_k_store), 0, 0, 1, 1},
  {&__pyx_n_s_subplots_adjust, __pyx_k_subplots_adjust, sizeof(__pyx_k_subplots_adjust), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_sx, __pyx_k_sx, sizeof(__pyx_k_sx), 0, 0, 1, 1},
  {&__pyx_n_s_sy, __pyx_k_sy, sizeof(__pyx_k_sy), 0, 0, 1, 1},
  {&__pyx_kp_u_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 1, 0, 0},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_u_tight, __pyx_k_tight, sizeof(__pyx_k_tight), 0, 1, 0, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_timeStepDuration, __pyx_k_timeStepDuration, sizeof(__pyx_k_timeStepDuration), 0, 0, 1, 1},
  {&__pyx_n_u_time_label, __pyx_k_time_label, sizeof(__pyx_k_time_label), 0, 1, 0, 1},
  {&__pyx_n_s_trapped, __pyx_k_trapped, sizeof(__pyx_k_trapped), 0, 0, 1, 1},
  {&__pyx_n_s_tree, __pyx_k_tree, sizeof(__pyx_k_tree), 0, 0, 1, 1},
  {&__pyx_n_s_tri, __pyx_k_tri, sizeof(__pyx_k_tri), 0, 0, 1, 1},
  {&__pyx_n_s_triplot, __pyx_k_triplot, sizeof(__pyx_k_triplot), 0, 0, 1, 1},
  {&__pyx_n_s_tstart, __pyx_k_tstart, sizeof(__pyx_k_tstart), 0, 0, 1, 1},
  {&__pyx_n_s_uni, __pyx_k_uni, sizeof(__pyx_k_uni), 0, 0, 1, 1},
  {&__pyx_n_s_uniform, __pyx_k_uniform, sizeof(__pyx_k_uniform), 0, 0, 1, 1},
  {&__pyx_n_s_upper, __pyx_k_upper, sizeof(__pyx_k_upper), 0, 0, 1, 1},
  {&__pyx_n_s_usize, __pyx_k_usize, sizeof(__pyx_k_usize), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_var, __pyx_k_var, sizeof(__pyx_k_var), 0, 0, 1, 1},
  {&__pyx_n_s_vertex_neighbor_vertices, __pyx_k_vertex_neighbor_vertices, sizeof(__pyx_k_vertex_neighbor_vertices), 0, 0, 1, 1},
  {&__pyx_n_s_voronoi_kdtree, __pyx_k_voronoi_kdtree, sizeof(__pyx_k_voronoi_kdtree), 0, 0, 1, 1},
  {&__pyx_n_u_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 1, 0, 1},
  {&__pyx_n_s_where, __pyx_k_where, sizeof(__pyx_k_where), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_n_s_write_snapshot, __pyx_k_write_snapshot, sizeof(__pyx_k_write_snapshot), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_x_new, __pyx_k_x_new, sizeof(__pyx_k_x_new), 0, 0, 1, 1},
  {&__pyx_n_s_xlabel, __pyx_k_xlabel, sizeof(__pyx_k_xlabel), 0, 0, 1, 1},
  {&__pyx_n_s_xticks, __pyx_k_xticks, sizeof(__pyx_k_xticks), 0, 0, 1, 1},
  {&__pyx_n_s_xx, __pyx_k_xx, sizeof(__pyx_k_xx), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_u_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 1, 0, 1},
  {&__pyx_kp_u_y_2, __pyx_k_y_2, sizeof(__pyx_k_y_2), 0, 1, 0, 0},
  {&__pyx_n_s_y_new, __pyx_k_y_new, sizeof(__pyx_k_y_new), 0, 0, 1, 1},
  {&__pyx_n_s_ylabel, __pyx_k_ylabel, sizeof(__pyx_k_ylabel), 0, 0, 1, 1},
  {&__pyx_n_s_yticks, __pyx_k_yticks, sizeof(__pyx_k_yticks), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 52, __pyx_L1_error)
  __pyx_builtin_sorted = __Pyx_GetBuiltinName(__pyx_n_s_sorted); if (!__pyx_builtin_sorted) __PYX_ERR(0, 99, __pyx_L1_error)
  __pyx_builtin_map = __Pyx_GetBuiltinName(__pyx_n_s_map); if (!__pyx_builtin_map) __PYX_ERR(0, 168, __pyx_L1_error)
  __pyx_builtin_round = __Pyx_GetBuiltinName(__pyx_n_s_round); if (!__pyx_builtin_round) __PYX_ERR(0, 446, __pyx_L1_error)
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 515, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 528, __pyx_L1_error)
  __pyx_builtin_all = __Pyx_GetBuiltinName(__pyx_n_s_all); if (!__pyx_builtin_all) __PYX_ERR(0, 651, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(1, 884, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "GBM.pyx":136
 * 
 *     Pmove = np.ones((3, gsize))
 *     Pmove[0,:] = Pmove[0,:]*Pprol             # <<<<<<<<<<<<<<
 *     Pmove[1,:] = Pmove[1,:]*Pprol*25.
 *     Pmove[2,:] = Pmove[2,:]*Pprol
 */
  __pyx_slice_ = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice_)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice_);
  __Pyx_GIVEREF(__pyx_slice_);
  __pyx_tuple__2 = PyTuple_Pack(2, __pyx_int_0, __pyx_slice_); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "GBM.pyx":137
 *     Pmove = np.ones((3, gsize))
 *     Pmove[0,:] = Pmove[0,:]*Pprol
 *     Pmove[1,:] = Pmove[1,:]*Pprol*25.             # <<<<<<<<<<<<<<
 *     Pmove[2,:] = Pmove[2,:]*Pprol
 * 
 */
  __pyx_tuple__3 = PyTuple_Pack(2, __pyx_int_1, __pyx_slice_); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "GBM.pyx":138
 *     Pmove[0,:] = Pmove[0,:]*Pprol
 *     Pmove[1,:] = Pmove[1,:]*Pprol*25.
 *     Pmove[2,:] = Pmove[2,:]*Pprol             # <<<<<<<<<<<<<<
 * 
 *     PDiv = np.ones((3, gsize))
 */
  __pyx_tuple__4 = PyTuple_Pack(2, __pyx_int_2, __pyx_slice_); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "GBM.pyx":342
 * 
 *     hf = h5py.File(name,"w")
 *     hf.create_dataset("time_label", data=tstart)             # <<<<<<<<<<<<<<
 *     hf.create_dataset("Input", data=Input)
 *     hf.create_dataset('Oxygen', data=Ox_irr)
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_n_u_time_label); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "GBM.pyx":343
 *     hf = h5py.File(name,"w")
 *     hf.create_dataset("time_label", data=tstart)
 *     hf.create_dataset("Input", data=Input)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('Oxygen', data=Ox_irr)
 *     hf.create_dataset('Points', data=points)
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_n_u_Input); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "GBM.pyx":344
 *     hf.create_dataset("time_label", data=tstart)
 *     hf.create_dataset("Input", data=Input)
 *     hf.create_dataset('Oxygen', data=Ox_irr)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('Points', data=points)
 *     hf.create_dataset('points_low', data=pl)
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_n_u_Oxygen); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "GBM.pyx":345
 *     hf.create_dataset("Input", data=Input)
 *     hf.create_dataset('Oxygen', data=Ox_irr)
 *     hf.create_dataset('Points', data=points)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('points_low', data=pl)
 *     hf.create_dataset('points_high', data=phs)
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_n_u_Points); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "GBM.pyx":346
 *     hf.create_dataset('Oxygen', data=Ox_irr)
 *     hf.create_dataset('Points', data=points)
 *     hf.create_dataset('points_low', data=pl)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('points_high', data=phs)
 *     hf.create_dataset('Cell_population', data=Cell_pop)
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_n_u_points_low); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "GBM.pyx":347
 *     hf.create_dataset('Points', data=points)
 *     hf.create_dataset('points_low', data=pl)
 *     hf.create_dataset('points_high', data=phs)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('Cell_population', data=Cell_pop)
 *     hf.create_dataset('GSC_population', data=GSC)
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_n_u_points_high); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "GBM.pyx":348
 *     hf.create_dataset('points_low', data=pl)
 *     hf.create_dataset('points_high', data=phs)
 *     hf.create_dataset('Cell_population', data=Cell_pop)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('GSC_population', data=GSC)
 *     hf.create_dataset('GPP_population', data=GPP)
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_n_u_Cell_population); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "GBM.pyx":349
 *     hf.create_dataset('points_high', data=phs)
 *     hf.create_dataset('Cell_population', data=Cell_pop)
 *     hf.create_dataset('GSC_population', data=GSC)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('GPP_population', data=GPP)
 *     hf.create_dataset('GDS_population', data=GDS)
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_n_u_GSC_population); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "GBM.pyx":350
 *     hf.create_dataset('Cell_population', data=Cell_pop)
 *     hf.create_dataset('GSC_population', data=GSC)
 *     hf.create_dataset('GPP_population', data=GPP)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('GDS_population', data=GDS)
 *     hf.create_dataset('Alive_population', data=Alive)
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_n_u_GPP_population); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "GBM.pyx":351
 *     hf.create_dataset('GSC_population', data=GSC)
 *     hf.create_dataset('GPP_population', data=GPP)
 *     hf.create_dataset('GDS_population', data=GDS)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('Alive_population', data=Alive)
 *     hf.create_dataset('Dead_population', data=Dead)
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_n_u_GDS_population); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "GBM.pyx":352
 *     hf.create_dataset('GPP_population', data=GPP)
 *     hf.create_dataset('GDS_population', data=GDS)
 *     hf.create_dataset('Alive_population', data=Alive)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('Dead_population', data=Dead)
 *     hf.create_dataset('Distance_to_rim', data=Rim)
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_n_u_Alive_population); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "GBM.pyx":353
 *     hf.create_dataset('GDS_population', data=GDS)
 *     hf.create_dataset('Alive_population', data=Alive)
 *     hf.create_dataset('Dead_population', data=Dead)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('Distance_to_rim', data=Rim)
 *     hf.create_dataset('Discarded_points', data=Discarded)
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_n_u_Dead_population); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "GBM.pyx":354
 *     hf.create_dataset('Alive_population', data=Alive)
 *     hf.create_dataset('Dead_population', data=Dead)
 *     hf.create_dataset('Distance_to_rim', data=Rim)             # <<<<<<<<<<<<<<
 *     hf.create_dataset('Discarded_points', data=Discarded)
 *     hf.close()
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_n_u_Distance_to_rim); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "GBM.pyx":355
 *     hf.create_dataset('Dead_population', data=Dead)
 *     hf.create_dataset('Distance_to_rim', data=Rim)
 *     hf.create_dataset('Discarded_points', data=Discarded)             # <<<<<<<<<<<<<<
 *     hf.close()
 * 
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_n_u_Discarded_points); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "GBM.pyx":417
 *         Xs = X[:resx-1,:resy-1] + sx[:resx-1,:resy-1]
 *         Ys = Y[:resx-1,:resy-1] + sy[:resx-1,:resy-1]
 *         Xs_rh = Xs.reshape(-1,1)             # <<<<<<<<<<<<<<
 *         Ys_rh = Ys.reshape(-1,1)
 * 
 */
  __pyx_tuple__19 = PyTuple_Pack(2, __pyx_int_neg_1, __pyx_int_1); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "GBM.pyx":504
 * 
 *     if myplots:
 *         plt.figure(1,figsize=(8,8))             # <<<<<<<<<<<<<<
 *         plt.figure(2,figsize=(8,8))
 *         GSC_tot = []
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_tuple__21 = PyTuple_Pack(2, __pyx_int_8, __pyx_int_8); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "GBM.pyx":505
 *     if myplots:
 *         plt.figure(1,figsize=(8,8))
 *         plt.figure(2,figsize=(8,8))             # <<<<<<<<<<<<<<
 *         GSC_tot = []
 *         GPP_tot = []
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_int_2); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "GBM.pyx":729
 *                 plt.figure(1)
 *                 plt.clf()
 *                 plt.triplot(points[:,0], points[:,1], tri.simplices,color="c",alpha=0.5)             # <<<<<<<<<<<<<<
 *                 for k in index[Dead>0]:
 *                     plt.plot(points[k][0],points[k][1],"k.")
 */
  __pyx_tuple__24 = PyTuple_Pack(2, __pyx_slice_, __pyx_int_0); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_tuple__25 = PyTuple_Pack(2, __pyx_slice_, __pyx_int_1); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "GBM.pyx":741
 *                     if Cell_pop[k] > 1:
 *                         plt.plot(points[k][0],points[k][1],".",color="blue")
 *                 plt.xlabel(r'$\mathrm{x\, lattice \, position}$',fontsize=16)             # <<<<<<<<<<<<<<
 *                 plt.ylabel(r"$\mathrm{y\, lattice \, position}$",fontsize=16)
 *                 plt.xticks(size=16)
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_u_mathrm_x_lattice_position); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "GBM.pyx":742
 *                         plt.plot(points[k][0],points[k][1],".",color="blue")
 *                 plt.xlabel(r'$\mathrm{x\, lattice \, position}$',fontsize=16)
 *                 plt.ylabel(r"$\mathrm{y\, lattice \, position}$",fontsize=16)             # <<<<<<<<<<<<<<
 *                 plt.xticks(size=16)
 *                 plt.yticks(size=16)
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_u_mathrm_y_lattice_position); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "GBM.pyx":762
 *                 plt.semilogy(GDS_tot,color="y",linestyle="-",label=r"$\mathrm{GDS}$")
 *                 plt.semilogy(np.asarray(GSC_tot)+np.asarray(GPP_tot)+np.asarray(GDS_tot),color="g",linestyle="-",label=r"$\mathrm{Alive}$")
 *                 plt.semilogy(Alive_single,color="orange",linestyle="--",label=r"$\mathrm{Alive, \, Rim}$",dashes=(5, 5))             # <<<<<<<<<<<<<<
 *                 plt.semilogy(Dead_tot,color="k",linestyle="-.",label=r"$\mathrm{Dead}$")
 *                 if i == tstart+1:
 */
  __pyx_tuple__33 = PyTuple_Pack(2, __pyx_int_5, __pyx_int_5); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "GBM.pyx":766
 *                 if i == tstart+1:
 *                     plt.legend(fontsize=16)
 *                 plt.xlabel(r'$t$',fontsize=16)             # <<<<<<<<<<<<<<
 *                 plt.ylabel(r"$\mathrm{Cell \, number}$",fontsize=16)
 *                 plt.xticks(size=16)
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_u_t); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "GBM.pyx":767
 *                     plt.legend(fontsize=16)
 *                 plt.xlabel(r'$t$',fontsize=16)
 *                 plt.ylabel(r"$\mathrm{Cell \, number}$",fontsize=16)             # <<<<<<<<<<<<<<
 *                 plt.xticks(size=16)
 *                 plt.yticks(size=16)
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_u_mathrm_Cell_number); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":884
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(1, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":890
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(1, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "GBM.pyx":36
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def Dead_cluster(np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, np.ndarray Alive, np.ndarray Cell_pop, np.ndarray Dead, np.ndarray Rim, list Xs_r, list Ys_r, list Discarded, np.ndarray points, tri, np.ndarray index, np.ndarray indptr, np.ndarray indices, int Dup, int Qup, double trapped):             # <<<<<<<<<<<<<<
 * 
 *     cdef list neighbours = []
 */
  __pyx_tuple__39 = PyTuple_Pack(37, __pyx_n_s_GSC, __pyx_n_s_GPP, __pyx_n_s_GDS, __pyx_n_s_Alive, __pyx_n_s_Cell_pop, __pyx_n_s_Dead, __pyx_n_s_Rim, __pyx_n_s_Xs_r, __pyx_n_s_Ys_r, __pyx_n_s_Discarded, __pyx_n_s_points, __pyx_n_s_tri, __pyx_n_s_index, __pyx_n_s_indptr, __pyx_n_s_indices, __pyx_n_s_Dup, __pyx_n_s_Qup, __pyx_n_s_trapped, __pyx_n_s_neighbours, __pyx_n_s_dead_neighbours, __pyx_n_s_qui_GSC, __pyx_n_s_qui_GPP, __pyx_n_s_qui_GDS, __pyx_n_s_cluster, __pyx_n_s_neigh, __pyx_n_s_j, __pyx_n_s_i, __pyx_n_s_dsize, __pyx_n_s_nsize, __pyx_n_s_nsize_alive, __pyx_n_s_nsize_trap, __pyx_n_s_nsize_ndead, __pyx_n_s_csize, __pyx_n_s_deadcount, __pyx_n_s_alivecount, __pyx_n_s_cellcount, __pyx_n_s_gsize); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(18, 0, 37, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_GBM_pyx, __pyx_n_s_Dead_cluster, 36, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 36, __pyx_L1_error)

  /* "GBM.pyx":130
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def stocev(np.ndarray Ox_irr, double O2_crit, double Pdie, double Pprol, double Pdivi):             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t gsize = len(Ox_irr)
 */
  __pyx_tuple__41 = PyTuple_Pack(9, __pyx_n_s_Ox_irr, __pyx_n_s_O2_crit, __pyx_n_s_Pdie, __pyx_n_s_Pprol, __pyx_n_s_Pdivi, __pyx_n_s_gsize, __pyx_n_s_Pmove, __pyx_n_s_PDiv, __pyx_n_s_PDeath); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(5, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_GBM_pyx, __pyx_n_s_stocev, 130, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(0, 130, __pyx_L1_error)

  /* "GBM.pyx":158
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def ext_grid(int gsize, np.ndarray points, np.ndarray Alive, np.ndarray index, np.ndarray Rim, tree, np.ndarray phs, list Discarded, np.ndarray Cell_pop, np.ndarray Dead, np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, double trapped):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i, newcomers
 */
  __pyx_tuple__43 = PyTuple_Pack(32, __pyx_n_s_gsize, __pyx_n_s_points, __pyx_n_s_Alive, __pyx_n_s_index, __pyx_n_s_Rim, __pyx_n_s_tree, __pyx_n_s_phs, __pyx_n_s_Discarded, __pyx_n_s_Cell_pop, __pyx_n_s_Dead, __pyx_n_s_GSC, __pyx_n_s_GPP, __pyx_n_s_GDS, __pyx_n_s_trapped, __pyx_n_s_i, __pyx_n_s_newcomers, __pyx_n_s_dsize, __pyx_n_s_nsize, __pyx_n_s_point, __pyx_n_s_newpoints, __pyx_n_s_xx, __pyx_n_s_Discarded_array, __pyx_n_s_conditions, __pyx_n_s_x_new, __pyx_n_s_y_new, __pyx_n_s_uni, __pyx_n_s_usize, __pyx_n_s_tri, __pyx_n_s_indptr, __pyx_n_s_indices, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(14, 0, 32, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_GBM_pyx, __pyx_n_s_ext_grid, 158, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 158, __pyx_L1_error)

  /* "GBM.pyx":246
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def init_oxygen(str Restart, np.ndarray Ox_irr, mesh, int low, np.ndarray points):             # <<<<<<<<<<<<<<
 *     if Restart == "None":
 *         oxygen = CellVariable(mesh = mesh, value = float(low)**2)
 */
  __pyx_tuple__45 = PyTuple_Pack(7, __pyx_n_s_Restart, __pyx_n_s_Ox_irr, __pyx_n_s_mesh, __pyx_n_s_low, __pyx_n_s_points, __pyx_n_s_oxygen, __pyx_n_s_Blood_vessel); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(5, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_GBM_pyx, __pyx_n_s_init_oxygen, 246, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 246, __pyx_L1_error)

  /* "GBM.pyx":265
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def solve_oxygen(mesh, oxygen, voronoi_kdtree, np.ndarray pl, np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, Blood_vessel, double Dox, np.ndarray points, list Xs_r, list Ys_r, double timeStepDuration, double lambdaC):             # <<<<<<<<<<<<<<
 * 
 *     cdef int j, llen
 */
  __pyx_tuple__47 = PyTuple_Pack(30, __pyx_n_s_mesh, __pyx_n_s_oxygen, __pyx_n_s_voronoi_kdtree, __pyx_n_s_pl, __pyx_n_s_GSC, __pyx_n_s_GPP, __pyx_n_s_GDS, __pyx_n_s_Blood_vessel, __pyx_n_s_Dox, __pyx_n_s_points, __pyx_n_s_Xs_r, __pyx_n_s_Ys_r, __pyx_n_s_timeStepDuration, __pyx_n_s_lambdaC, __pyx_n_s_j, __pyx_n_s_llen, __pyx_n_s_dist_GSC, __pyx_n_s_region_GSC, __pyx_n_s_dist_GPP, __pyx_n_s_region_GPP, __pyx_n_s_dist_GDS, __pyx_n_s_region_GDS, __pyx_n_s_Count_GSC, __pyx_n_s_Count_GPP, __pyx_n_s_Count_GDS, __pyx_n_s_GSC_PDE, __pyx_n_s_GPP_PDE, __pyx_n_s_GDS_PDE, __pyx_n_s_eq, __pyx_n_s_Ox_irr); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(14, 0, 30, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_GBM_pyx, __pyx_n_s_solve_oxygen, 265, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 265, __pyx_L1_error)

  /* "GBM.pyx":311
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def hierarchy(int iden, int daughter, np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, double epsilon):             # <<<<<<<<<<<<<<
 * 
 *     # Hierarchy for division of tumour cells according to Lan et al. (2017)
 */
  __pyx_tuple__49 = PyTuple_Pack(7, __pyx_n_s_iden, __pyx_n_s_daughter, __pyx_n_s_GSC, __pyx_n_s_GPP, __pyx_n_s_GDS, __pyx_n_s_epsilon, __pyx_n_s_progeny); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_GBM_pyx, __pyx_n_s_hierarchy, 311, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 311, __pyx_L1_error)

  /* "GBM.pyx":339
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def write_snapshot(int tstart, str name, list Input, np.ndarray Ox_irr, np.ndarray points, np.ndarray pl, np.ndarray phs, np.ndarray Cell_pop, np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, np.ndarray Alive, np.ndarray Dead, np.ndarray Rim, list Discarded):             # <<<<<<<<<<<<<<
 * 
 *     hf = h5py.File(name,"w")
 */
  __pyx_tuple__51 = PyTuple_Pack(16, __pyx_n_s_tstart, __pyx_n_s_name, __pyx_n_s_Input, __pyx_n_s_Ox_irr, __pyx_n_s_points, __pyx_n_s_pl, __pyx_n_s_phs, __pyx_n_s_Cell_pop, __pyx_n_s_GSC, __pyx_n_s_GPP, __pyx_n_s_GDS, __pyx_n_s_Alive, __pyx_n_s_Dead, __pyx_n_s_Rim, __pyx_n_s_Discarded, __pyx_n_s_hf); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(15, 0, 16, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_GBM_pyx, __pyx_n_s_write_snapshot, 339, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 339, __pyx_L1_error)

  /* "GBM.pyx":364
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def read_snapshot(name):             # <<<<<<<<<<<<<<
 * 
 *     f = h5py.File(name, 'r')
 */
  __pyx_tuple__53 = PyTuple_Pack(16, __pyx_n_s_name, __pyx_n_s_f, __pyx_n_s_Input, __pyx_n_s_Ox_irr, __pyx_n_s_points, __pyx_n_s_pl, __pyx_n_s_phs, __pyx_n_s_Cell_pop, __pyx_n_s_GSC, __pyx_n_s_GPP, __pyx_n_s_GDS, __pyx_n_s_Alive, __pyx_n_s_Dead, __pyx_n_s_Rim, __pyx_n_s_Discarded, __pyx_n_s_tstart); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(1, 0, 16, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_GBM_pyx, __pyx_n_s_read_snapshot, 364, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 364, __pyx_L1_error)

  /* "GBM.pyx":391
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def init_Cell_pop(str Restart, list Input):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i, tstart, iden, gsize, resx, resy, steps, SavN, low, Dup, Qup, dx, dy, lx
 */
  __pyx_tuple__55 = PyTuple_Pack(57, __pyx_n_s_Restart, __pyx_n_s_Input, __pyx_n_s_i, __pyx_n_s_tstart, __pyx_n_s_iden, __pyx_n_s_gsize, __pyx_n_s_resx, __pyx_n_s_resy, __pyx_n_s_steps, __pyx_n_s_SavN, __pyx_n_s_low, __pyx_n_s_Dup, __pyx_n_s_Qup, __pyx_n_s_dx, __pyx_n_s_dy, __pyx_n_s_lx, __pyx_n_s_Dox, __pyx_n_s_lambdaC, __pyx_n_s_O2_crit, __pyx_n_s_trapped, __pyx_n_s_epsilon, __pyx_n_s_xx, __pyx_n_s_myplots, __pyx_n_s_index, __pyx_n_s_Cell_pop, __pyx_n_s_GSC, __pyx_n_s_GPP, __pyx_n_s_GDS, __pyx_n_s_Alive, __pyx_n_s_Dead, __pyx_n_s_Rim, __pyx_n_s_points, __pyx_n_s_Ox_irr, __pyx_n_s_Ys_rh, __pyx_n_s_Xs_rh, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_Xs, __pyx_n_s_Ys, __pyx_n_s_sx, __pyx_n_s_sy, __pyx_n_s_X, __pyx_n_s_Y, __pyx_n_s_Discarded, __pyx_n_s_Xs_r, __pyx_n_s_Ys_r, __pyx_n_s_Pdie, __pyx_n_s_Pprol, __pyx_n_s_Pdivi, __pyx_n_s_mesh, __pyx_n_s_Xs_rl, __pyx_n_s_Ys_rl, __pyx_n_s_j, __pyx_n_s_pl, __pyx_n_s_phs, __pyx_n_s_voronoi_kdtree, __pyx_n_s_tree); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(2, 0, 57, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_GBM_pyx, __pyx_n_s_init_Cell_pop, 391, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 391, __pyx_L1_error)

  /* "GBM.pyx":475
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def run_ABM(str Restart, str store, int resx, int resy, int steps, int SavN, double Dox, double lambdaC, double O2_crit, int low, int Dup, double trapped, int Qup, double epsilon, double Pdie, double Pprol, double Pdivi,  double dx, double dy, bint myplots):             # <<<<<<<<<<<<<<
 * 
 *     cdef double start_time = time.time()
 */
  __pyx_tuple__57 = PyTuple_Pack(93, __pyx_n_s_Restart, __pyx_n_s_store, __pyx_n_s_resx, __pyx_n_s_resy, __pyx_n_s_steps, __pyx_n_s_SavN, __pyx_n_s_Dox, __pyx_n_s_lambdaC, __pyx_n_s_O2_crit, __pyx_n_s_low, __pyx_n_s_Dup, __pyx_n_s_trapped, __pyx_n_s_Qup, __pyx_n_s_epsilon, __pyx_n_s_Pdie, __pyx_n_s_Pprol, __pyx_n_s_Pdivi, __pyx_n_s_dx, __pyx_n_s_dy, __pyx_n_s_myplots, __pyx_n_s_start_time, __pyx_n_s_cwd, __pyx_n_s_name, __pyx_n_s_logfile, __pyx_n_s_paramsfile, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k_2, __pyx_n_s_Cell, __pyx_n_s_tstart, __pyx_n_s_new, __pyx_n_s_daughter, __pyx_n_s_gsize, __pyx_n_s_upper, __pyx_n_s_idummy1, __pyx_n_s_idummy2, __pyx_n_s_idummy3, __pyx_n_s_idummy4, __pyx_n_s_idummy5, __pyx_n_s_asize, __pyx_n_s_a_tot, __pyx_n_s_Reaper, __pyx_n_s_move, __pyx_n_s_divide, __pyx_n_s_Pup, __pyx_n_s_fdummy1, __pyx_n_s_fdummy2, __pyx_n_s_fdummy3, __pyx_n_s_neigh, __pyx_n_s_index, __pyx_n_s_Cell_pop, __pyx_n_s_GSC, __pyx_n_s_GPP, __pyx_n_s_GDS, __pyx_n_s_Alive, __pyx_n_s_Dead, __pyx_n_s_Rim, __pyx_n_s_points, __pyx_n_s_Ox_irr, __pyx_n_s_Pmove, __pyx_n_s_PDiv, __pyx_n_s_PDeath, __pyx_n_s_free, __pyx_n_s_mask, __pyx_n_s_Discarded, __pyx_n_s_Proliferating, __pyx_n_s_Quiescent, __pyx_n_s_Xs_r, __pyx_n_s_Ys_r, __pyx_n_s_DIV, __pyx_n_s_iden, __pyx_n_s_Input, __pyx_n_s_mesh, __pyx_n_s_pl, __pyx_n_s_phs, __pyx_n_s_voronoi_kdtree, __pyx_n_s_tree, __pyx_n_s_Blood_vessel, __pyx_n_s_oxygen, __pyx_n_s_timeStepDuration, __pyx_n_s_GSC_tot, __pyx_n_s_GPP_tot, __pyx_n_s_GDS_tot, __pyx_n_s_Dead_tot, __pyx_n_s_Alive_single, __pyx_n_s_ff, __pyx_n_s_tri, __pyx_n_s_indptr, __pyx_n_s_indices, __pyx_n_s_kdtree, __pyx_n_s_res, __pyx_n_s_daughters, __pyx_n_s_exten); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(20, 0, 93, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_GBM_pyx, __pyx_n_s_run_ABM, 475, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_ = PyFloat_FromDouble(0.); if (unlikely(!__pyx_float_0_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_ = PyFloat_FromDouble(1.); if (unlikely(!__pyx_float_1_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_1 = PyFloat_FromDouble(0.1); if (unlikely(!__pyx_float_0_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_6 = PyFloat_FromDouble(0.6); if (unlikely(!__pyx_float_0_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_9 = PyFloat_FromDouble(0.9); if (unlikely(!__pyx_float_0_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_25_ = PyFloat_FromDouble(25.); if (unlikely(!__pyx_float_25_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_3_0 = PyFloat_FromDouble(3.0); if (unlikely(!__pyx_float_3_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_00 = PyFloat_FromDouble(0.00); if (unlikely(!__pyx_float_0_00)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_18 = PyFloat_FromDouble(0.18); if (unlikely(!__pyx_float_0_18)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_500_ = PyFloat_FromDouble(500.); if (unlikely(!__pyx_float_500_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_16 = PyInt_FromLong(16); if (unlikely(!__pyx_int_16)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_3GBM___pyx_scope_struct__ext_grid) < 0) __PYX_ERR(0, 158, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_3GBM___pyx_scope_struct__ext_grid.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_3GBM___pyx_scope_struct__ext_grid.tp_dictoffset && __pyx_type_3GBM___pyx_scope_struct__ext_grid.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_3GBM___pyx_scope_struct__ext_grid.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_3GBM___pyx_scope_struct__ext_grid = &__pyx_type_3GBM___pyx_scope_struct__ext_grid;
  if (PyType_Ready(&__pyx_type_3GBM___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 184, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_3GBM___pyx_scope_struct_1_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_3GBM___pyx_scope_struct_1_genexpr.tp_dictoffset && __pyx_type_3GBM___pyx_scope_struct_1_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_3GBM___pyx_scope_struct_1_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_3GBM___pyx_scope_struct_1_genexpr = &__pyx_type_3GBM___pyx_scope_struct_1_genexpr;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(1, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(1, 222, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(1, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(1, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(1, 764, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initGBM(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initGBM(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_GBM(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_GBM(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_GBM(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'GBM' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_GBM(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("GBM", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_GBM) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "GBM")) {
      if (unlikely(PyDict_SetItemString(modules, "GBM", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "GBM.pyx":6
 * 
 * import cython
 * import numpy as np             # <<<<<<<<<<<<<<
 * from scipy.spatial import Delaunay, cKDTree
 * from scipy.interpolate import NearestNDInterpolator, LinearNDInterpolator
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "GBM.pyx":7
 * import cython
 * import numpy as np
 * from scipy.spatial import Delaunay, cKDTree             # <<<<<<<<<<<<<<
 * from scipy.interpolate import NearestNDInterpolator, LinearNDInterpolator
 * import matplotlib.pyplot as plt
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Delaunay);
  __Pyx_GIVEREF(__pyx_n_s_Delaunay);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Delaunay);
  __Pyx_INCREF(__pyx_n_s_cKDTree);
  __Pyx_GIVEREF(__pyx_n_s_cKDTree);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_cKDTree);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_scipy_spatial, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Delaunay); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Delaunay, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_cKDTree); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cKDTree, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "GBM.pyx":8
 * import numpy as np
 * from scipy.spatial import Delaunay, cKDTree
 * from scipy.interpolate import NearestNDInterpolator, LinearNDInterpolator             # <<<<<<<<<<<<<<
 * import matplotlib.pyplot as plt
 * import random
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NearestNDInterpolator);
  __Pyx_GIVEREF(__pyx_n_s_NearestNDInterpolator);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NearestNDInterpolator);
  __Pyx_INCREF(__pyx_n_s_LinearNDInterpolator);
  __Pyx_GIVEREF(__pyx_n_s_LinearNDInterpolator);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_LinearNDInterpolator);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_scipy_interpolate, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NearestNDInterpolator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NearestNDInterpolator, __pyx_t_2) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_LinearNDInterpolator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LinearNDInterpolator, __pyx_t_2) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "GBM.pyx":9
 * from scipy.spatial import Delaunay, cKDTree
 * from scipy.interpolate import NearestNDInterpolator, LinearNDInterpolator
 * import matplotlib.pyplot as plt             # <<<<<<<<<<<<<<
 * import random
 * import time
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s__38);
  __Pyx_GIVEREF(__pyx_n_s__38);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__38);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_matplotlib_pyplot, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_plt, __pyx_t_2) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "GBM.pyx":10
 * from scipy.interpolate import NearestNDInterpolator, LinearNDInterpolator
 * import matplotlib.pyplot as plt
 * import random             # <<<<<<<<<<<<<<
 * import time
 * from fipy import CellVariable, Grid2D, Viewer, TransientTerm, DiffusionTerm
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_random, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_random, __pyx_t_2) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "GBM.pyx":11
 * import matplotlib.pyplot as plt
 * import random
 * import time             # <<<<<<<<<<<<<<
 * from fipy import CellVariable, Grid2D, Viewer, TransientTerm, DiffusionTerm
 * import h5py
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_time, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "GBM.pyx":12
 * import random
 * import time
 * from fipy import CellVariable, Grid2D, Viewer, TransientTerm, DiffusionTerm             # <<<<<<<<<<<<<<
 * import h5py
 * import os
 */
  __pyx_t_2 = PyList_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_CellVariable);
  __Pyx_GIVEREF(__pyx_n_s_CellVariable);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_CellVariable);
  __Pyx_INCREF(__pyx_n_s_Grid2D);
  __Pyx_GIVEREF(__pyx_n_s_Grid2D);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_Grid2D);
  __Pyx_INCREF(__pyx_n_s_Viewer);
  __Pyx_GIVEREF(__pyx_n_s_Viewer);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_Viewer);
  __Pyx_INCREF(__pyx_n_s_TransientTerm);
  __Pyx_GIVEREF(__pyx_n_s_TransientTerm);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_TransientTerm);
  __Pyx_INCREF(__pyx_n_s_DiffusionTerm);
  __Pyx_GIVEREF(__pyx_n_s_DiffusionTerm);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_s_DiffusionTerm);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_fipy, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_CellVariable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CellVariable, __pyx_t_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Grid2D); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Grid2D, __pyx_t_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Viewer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Viewer, __pyx_t_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_TransientTerm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TransientTerm, __pyx_t_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_DiffusionTerm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DiffusionTerm, __pyx_t_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "GBM.pyx":13
 * import time
 * from fipy import CellVariable, Grid2D, Viewer, TransientTerm, DiffusionTerm
 * import h5py             # <<<<<<<<<<<<<<
 * import os
 * from more_itertools import flatten
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_h5py, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_h5py, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "GBM.pyx":14
 * from fipy import CellVariable, Grid2D, Viewer, TransientTerm, DiffusionTerm
 * import h5py
 * import os             # <<<<<<<<<<<<<<
 * from more_itertools import flatten
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "GBM.pyx":15
 * import h5py
 * import os
 * from more_itertools import flatten             # <<<<<<<<<<<<<<
 * 
 * cimport cython
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_flatten);
  __Pyx_GIVEREF(__pyx_n_s_flatten);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_flatten);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_more_itertools, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_flatten); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_flatten, __pyx_t_1) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "GBM.pyx":36
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def Dead_cluster(np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, np.ndarray Alive, np.ndarray Cell_pop, np.ndarray Dead, np.ndarray Rim, list Xs_r, list Ys_r, list Discarded, np.ndarray points, tri, np.ndarray index, np.ndarray indptr, np.ndarray indices, int Dup, int Qup, double trapped):             # <<<<<<<<<<<<<<
 * 
 *     cdef list neighbours = []
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_3GBM_1Dead_cluster, NULL, __pyx_n_s_GBM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Dead_cluster, __pyx_t_2) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "GBM.pyx":130
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def stocev(np.ndarray Ox_irr, double O2_crit, double Pdie, double Pprol, double Pdivi):             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t gsize = len(Ox_irr)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_3GBM_3stocev, NULL, __pyx_n_s_GBM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_stocev, __pyx_t_2) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "GBM.pyx":158
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def ext_grid(int gsize, np.ndarray points, np.ndarray Alive, np.ndarray index, np.ndarray Rim, tree, np.ndarray phs, list Discarded, np.ndarray Cell_pop, np.ndarray Dead, np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, double trapped):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i, newcomers
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_3GBM_5ext_grid, NULL, __pyx_n_s_GBM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ext_grid, __pyx_t_2) < 0) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "GBM.pyx":246
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def init_oxygen(str Restart, np.ndarray Ox_irr, mesh, int low, np.ndarray points):             # <<<<<<<<<<<<<<
 *     if Restart == "None":
 *         oxygen = CellVariable(mesh = mesh, value = float(low)**2)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_3GBM_9init_oxygen, NULL, __pyx_n_s_GBM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_init_oxygen, __pyx_t_2) < 0) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "GBM.pyx":265
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def solve_oxygen(mesh, oxygen, voronoi_kdtree, np.ndarray pl, np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, Blood_vessel, double Dox, np.ndarray points, list Xs_r, list Ys_r, double timeStepDuration, double lambdaC):             # <<<<<<<<<<<<<<
 * 
 *     cdef int j, llen
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_3GBM_11solve_oxygen, NULL, __pyx_n_s_GBM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_solve_oxygen, __pyx_t_2) < 0) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "GBM.pyx":311
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def hierarchy(int iden, int daughter, np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, double epsilon):             # <<<<<<<<<<<<<<
 * 
 *     # Hierarchy for division of tumour cells according to Lan et al. (2017)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_3GBM_13hierarchy, NULL, __pyx_n_s_GBM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_hierarchy, __pyx_t_2) < 0) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "GBM.pyx":339
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def write_snapshot(int tstart, str name, list Input, np.ndarray Ox_irr, np.ndarray points, np.ndarray pl, np.ndarray phs, np.ndarray Cell_pop, np.ndarray GSC, np.ndarray GPP, np.ndarray GDS, np.ndarray Alive, np.ndarray Dead, np.ndarray Rim, list Discarded):             # <<<<<<<<<<<<<<
 * 
 *     hf = h5py.File(name,"w")
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_3GBM_15write_snapshot, NULL, __pyx_n_s_GBM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_write_snapshot, __pyx_t_2) < 0) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "GBM.pyx":364
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def read_snapshot(name):             # <<<<<<<<<<<<<<
 * 
 *     f = h5py.File(name, 'r')
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_3GBM_17read_snapshot, NULL, __pyx_n_s_GBM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_read_snapshot, __pyx_t_2) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "GBM.pyx":391
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def init_Cell_pop(str Restart, list Input):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i, tstart, iden, gsize, resx, resy, steps, SavN, low, Dup, Qup, dx, dy, lx
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_3GBM_19init_Cell_pop, NULL, __pyx_n_s_GBM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_init_Cell_pop, __pyx_t_2) < 0) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "GBM.pyx":475
 * @cython.boundscheck(False)  # Deactivate bounds checking
 * @cython.wraparound(False)   # Deactivate negative indexing.
 * def run_ABM(str Restart, str store, int resx, int resy, int steps, int SavN, double Dox, double lambdaC, double O2_crit, int low, int Dup, double trapped, int Qup, double epsilon, double Pdie, double Pprol, double Pdivi,  double dx, double dy, bint myplots):             # <<<<<<<<<<<<<<
 * 
 *     cdef double start_time = time.time()
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_3GBM_21run_ABM, NULL, __pyx_n_s_GBM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_run_ABM, __pyx_t_2) < 0) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "GBM.pyx":1
 * #cython: boundscheck=False             # <<<<<<<<<<<<<<
 * #cython: language_level=3
 * #cython: wraparound=False
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../../.local/lib/python3.6/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init GBM", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init GBM");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* DelItemInt */
static int __Pyx_DelItem_Generic(PyObject *o, PyObject *j) {
    int r;
    if (!j) return -1;
    r = PyObject_DelItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_DelItemInt_Fast(PyObject *o, Py_ssize_t i,
                                               CYTHON_UNUSED int is_list, CYTHON_NCP_UNUSED int wraparound) {
#if !CYTHON_USE_TYPE_SLOTS
    if (is_list || PySequence_Check(o)) {
        return PySequence_DelItem(o, i);
    }
#else
    PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
    if (likely(m && m->sq_ass_item)) {
        if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
            Py_ssize_t l = m->sq_length(o);
            if (likely(l >= 0)) {
                i += l;
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    return -1;
                PyErr_Clear();
            }
        }
        return m->sq_ass_item(o, i, (PyObject *)NULL);
    }
#endif
    return __Pyx_DelItem_Generic(o, PyInt_FromSsize_t(i));
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyFloatBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_AddObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double b = floatval;
    double a, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
            
        }
    } else {
        return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
    }
        
        PyFPE_START_PROTECT("add", return NULL)
        result = a + b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* DictGetItem */
  #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* RaiseNoneIterError */
  static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* py_abs */
  #if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *n) {
    if (likely(Py_SIZE(n) == -1)) {
        return PyLong_FromLong(((PyLongObject*)n)->ob_digit[0]);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    {
        PyObject *copy = _PyLong_Copy((PyLongObject*)n);
        if (likely(copy)) {
            __Pyx_SET_SIZE(copy, -Py_SIZE(copy));
        }
        return copy;
    }
#else
    return PyNumber_Negative(n);
#endif
}
#endif

/* FetchCommonType */
  static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
  #include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
  static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* PyFloatBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_EqObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double b = floatval;
    double a;
    (void)inplace;
    (void)zerodivision_check;
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            return (
                PyFloat_Type.tp_richcompare(op2, op1, Py_EQ));
        }
    } else {
        return (
            PyObject_RichCompare(op1, op2, Py_EQ));
    }
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
}
#endif

/* PyFloatBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_SubtractObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double b = floatval;
    double a, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
            
        }
    } else {
        return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
    }
        
        PyFPE_START_PROTECT("subtract", return NULL)
        result = a - b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* PyObjectFormatAndDecref */
      static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* CIntToDigits */
      static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
      static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
      #ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(Py_ssize_t)*3+2];
    char *dpos, *end = digits + sizeof(Py_ssize_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    Py_ssize_t remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const Py_ssize_t neg_one = (Py_ssize_t) -1, const_zero = (Py_ssize_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (Py_ssize_t) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (Py_ssize_t) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (Py_ssize_t) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* JoinPyUnicode */
      static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* CIntToPyUnicode */
      #ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* GetTopmostException */
      #if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
      #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
      #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyErrFetchRestore */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
      #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyObject_GenericGetAttrNoDict */
      #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* TypeImport */
      #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
      static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
      static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
      #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
      static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
      #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
      #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* None */
      static CYTHON_INLINE long __Pyx_pow_long(long b, long e) {
    long t = b;
    switch (e) {
        case 3:
            t *= b;
        CYTHON_FALLTHROUGH;
        case 2:
            t *= b;
        CYTHON_FALLTHROUGH;
        case 1:
            return t;
        case 0:
            return 1;
    }
    #if 1
    if (unlikely(e<0)) return 0;
    #endif
    t = 1;
    while (likely(e)) {
        t *= (b * (e&1)) | ((~e)&1);
        b *= b;
        e >>= 1;
    }
    return t;
}

/* Declarations */
      #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
      #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
      #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
      #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
      static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
      static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
      #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* SwapException */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectGetMethod */
      static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
      static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
      #include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
      static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
      #ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
      static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
      static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
      static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
